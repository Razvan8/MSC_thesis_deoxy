print("x_vect")
print(x_vect)
print("x*coefs")
print(x*coefs)
return(sum(x_vect*coefs))
}
d3<-4*c4
d2<-3*c3
d1<-2*c2
d0<-c1
coefs_deriv<-c(d0,d1,d2,d3)
print("coefs_deriv")
print(coefs_deriv)
roots_deriv <- polyroot(coefs_deriv)
print("roots_deriv")
print(roots_deriv)
real_roots<-roots_deriv[abs(Im(roots_deriv))<=1e-12]
print("IM roots")
print(Im(roots_deriv))
print("real roots")
print(real_roots)
real_roots<-Re(real_roots)
if (positive == TRUE)
{real_roots<-real_roots[real_roots>=0]}
if(positive == FALSE)
{real_roots<-real_roots[real_roots<=0]}
# Evaluate the polynomial at the real roots
values <- sapply(real_roots, function(x) poly(Re(x)))
print(values)
# Find the minimum value and the corresponding root
min_value <- min(values)
min_root <- real_roots[which.min(values)]
# Print the results
print("root for min:")
print(min_root)  # The x-value at which the minimum occurs
print("MIn value of function")
print(min_value)  # The minimum value of the polynomial
}
poly_min_sign(c(1,-4,6,-4,1), positive = TRUE)
lenth(list())
length(list())
length(list(1))
poly_min_sign<-function(coefs, positive) #coefs should be from c0 to c4
{assert(length(coefs)==5, "A 4th deg poly should have 5 coefs")
c4<-coefs[5]
c3<-coefs[4]
c2<-coefs[3]
c1<-coefs[2]
c0<-coefs[1]
coefs<-array(coefs)
poly <- function(x) {
x_vect<-c(1,x,x^2,x^3,x^4)
print("coefs")
print(coefs)
print("x_vect")
print(x_vect)
return(sum(x_vect*coefs))
}
d3<-4*c4
d2<-3*c3
d1<-2*c2
d0<-c1
coefs_deriv<-c(d0,d1,d2,d3)
print("coefs_deriv")
print(coefs_deriv)
roots_deriv <- polyroot(coefs_deriv)
print("roots_deriv")
print(roots_deriv)
real_roots<-roots_deriv[abs(Im(roots_deriv))<=1e-14]
print("IM roots")
print(Im(roots_deriv))
print("real roots")
print(real_roots)
real_roots<-Re(real_roots)
if (positive == TRUE)
{if(length(real_roots)==0)
{real_roots<-list(1e-10)} #add one as backup if it does not find a root
real_roots<-real_roots[real_roots>0]}
if(positive == FALSE)
{if(length(real_roots)==0)
{real_roots<-list(-1e-10)} # add one as backup if it does not find a root
real_roots<-real_roots[real_roots<0]}
# Evaluate the polynomial at the real roots
values <- sapply(real_roots, function(x) poly(Re(x)))
print(values)
# Find the minimum value and the corresponding root
min_value <- min(values)
min_root <- real_roots[which.min(values)]
# Print the results
print("root for min:")
print(min_root)  # The x-value at which the minimum occurs
print("MIn value of function")
print(min_value)  # The minimum value of the polynomial
}
poly_min_sign(c(1,-4,6,-4,1), positive = TRUE)
poly_min_sign(c(1,-4,6,-4,1), positive = FALSE)
poly_min_sign<-function(coefs, positive) #coefs should be from c0 to c4
{assert(length(coefs)==5, "A 4th deg poly should have 5 coefs")
c4<-coefs[5]
c3<-coefs[4]
c2<-coefs[3]
c1<-coefs[2]
c0<-coefs[1]
coefs<-array(coefs)
poly <- function(x) {
x_vect<-c(1,x,x^2,x^3,x^4)
print("coefs")
print(coefs)
print("x_vect")
print(x_vect)
return(sum(x_vect*coefs))
}
d3<-4*c4
d2<-3*c3
d1<-2*c2
d0<-c1
coefs_deriv<-c(d0,d1,d2,d3)
print("coefs_deriv")
print(coefs_deriv)
roots_deriv <- polyroot(coefs_deriv)
print("roots_deriv")
print(roots_deriv)
real_roots<-roots_deriv[abs(Im(roots_deriv))<=1e-14]
print("IM roots")
print(Im(roots_deriv))
print("real roots")
print(real_roots)
real_roots<-Re(real_roots)
if (positive == TRUE)
{if(length(real_roots[real_roots>0])==0)
{real_roots<-list(1e-10)} #add one as backup if it does not find a root
real_roots<-real_roots[real_roots>0]}
if(positive == FALSE)
{if(length(real_roots[real_roots<0])==0)
{real_roots<-list(-1e-10)} # add one as backup if it does not find a root
real_roots<-real_roots[real_roots<0]}
# Evaluate the polynomial at the real roots
values <- sapply(real_roots, function(x) poly(Re(x)))
print(values)
# Find the minimum value and the corresponding root
min_value <- min(values)
min_root <- real_roots[which.min(values)]
# Print the results
print("root for min:")
print(min_root)  # The x-value at which the minimum occurs
print("MIn value of function")
print(min_value)  # The minimum value of the polynomial
}
poly_min_sign(c(1,-4,6,-4,1), positive = FALSE)
poly_min_sign<-function(coefs, positive) #coefs should be from c0 to c4
{assert(length(coefs)==5, "A 4th deg poly should have 5 coefs")
c4<-coefs[5]
c3<-coefs[4]
c2<-coefs[3]
c1<-coefs[2]
c0<-coefs[1]
coefs<-array(coefs)
poly <- function(x) {
x_vect<-c(1,x,x^2,x^3,x^4)
print("coefs")
print(coefs)
print("x_vect")
print(x_vect)
return(sum(x_vect*coefs))
}
d3<-4*c4
d2<-3*c3
d1<-2*c2
d0<-c1
coefs_deriv<-c(d0,d1,d2,d3)
print("coefs_deriv")
print(coefs_deriv)
roots_deriv <- polyroot(coefs_deriv)
print("roots_deriv")
print(roots_deriv)
real_roots<-roots_deriv[abs(Im(roots_deriv))<=1e-14]
print("IM roots")
print(Im(roots_deriv))
print("real roots")
print(real_roots)
real_roots<-Re(real_roots)
if (positive == TRUE)
{if(length(real_roots[real_roots>0])==0)
{real_roots<-list(1e-10)} #add one as backup if it does not find a root
real_roots<-real_roots[real_roots>0]}
if(positive == FALSE)
{if(length(real_roots[real_roots<0])==0)
{real_roots<-list(-1e-10)} # add one as backup if it does not find a root
real_roots<-real_roots[real_roots<0]}
# Evaluate the polynomial at the real roots
values <- sapply(real_roots, function(x) poly(Re(x)))
print(values)
# Find the minimum value and the corresponding root
min_value <- min(values)
min_root <- real_roots[which.min(values)]
# Print the results
print("root for min:")
print(min_root)  # The x-value at which the minimum occurs
print("MIn value of function")
print(min_value)  # The minimum value of the polynomial
}
poly_min_sign(c(1,-4,6,-4,1), positive = FALSE)
poly_min_sign(c(16,-32,24,-8,1), positive = TRUE)
poly_min_sign(c(16,-32,24,-8,1), positive = FALSE)
poly_min_sign(c(8,4,6,4,1), positive = FALSE)
poly_min_sign(c(8,4,6,4,1), positive = TRUE)
poly_min_sign(c(1/16,1/2,3/2,2,1), positive = TRUE)
poly_min_sign(c(1/16,1/2,3/2,2,1), positive = FALSE)
poly_min_sign(c(4,6,5,0,1), positive = FALSE)
poly_min_sign(c(4,6,1,0,1), positive = FALSE)
poly_min_sign(c(4,6,1,0,1), positive = TRUE)
poly_min_sign(c(4,4,-3,-2,1), positive = TRUE)
poly_min_sign(c(4,4,-3,-2,1), positive = FALSE)
x=c(3,4,7)
where(x==min(x))
x==min(x)
which.min(x)
x=c(3,4,3)
which.min(x)
poly_lasso_min<-function(coefs, lambda){ #finds the min for a< a=0, a>0 gets the min out of all
##long term take care if 2 with same min smart decision
coefs_without_lambda<-coefs
#case 1 sign positive
coefs_poz<-coefs_without_lambda
coefs_poz[2]<-coefs_poz[2]+lambda
poz<-poly_min_sign(coefs=coefs_poz, positive = TRUE)
x_min_poz<-poz[1]
val_min_poz<-poz[2]
#case 2 sign negative
coefs_neg<-coefs_without_lambda
coefs_neg[2]<-coefs_neg[2]-lambda
min_poz<-poly_min_sign(coefs=coefs_poz, positive = FALSE)
x_min_neg<-neg[1]
val_min_neg<-neg[2]
#case 3 sign is 0
x_zeros<-0
val_min_zeros<-coefs[1]
all_mins<-c(val_min_neg, val_min_poz, val_min_zeros)
all_x_min<-c(x_min_neg, x_min_poz, x_zeros)#
idx_min<-which.min(all_min)
x_min<-all_x_min[idx_min]
print("RESULTS x_min, f min: ")
print(x_min)
print(all_min[idx_min])
return(x_min)
}
poly_min_sign(c(4,2,-3,-2,1), lambda=2)
poly_lasso_min(c(4,2,-3,-2,1), lambda=2)
poly_lasso_min<-function(coefs, lambda){ #finds the min for a< a=0, a>0 gets the min out of all
##long term take care if 2 with same min smart decision
coefs_without_lambda<-coefs
#case 1 sign positive
coefs_poz<-coefs_without_lambda
coefs_poz[2]<-coefs_poz[2]+lambda
poz<-poly_min_sign(coefs=coefs_poz, positive = TRUE)
x_min_poz<-poz[1]
val_min_poz<-poz[2]
#case 2 sign negative
coefs_neg<-coefs_without_lambda
coefs_neg[2]<-coefs_neg[2]-lambda
neg<-poly_min_sign(coefs=coefs_poz, positive = FALSE)
x_min_neg<-neg[1]
val_min_neg<-neg[2]
#case 3 sign is 0
x_zeros<-0
val_min_zeros<-coefs[1]
all_mins<-c(val_min_neg, val_min_poz, val_min_zeros)
all_x_min<-c(x_min_neg, x_min_poz, x_zeros)#
idx_min<-which.min(all_min)
x_min<-all_x_min[idx_min]
print("RESULTS x_min, f min: ")
print(x_min)
print(all_min[idx_min])
return(x_min)
}
poly_lasso_min(c(4,2,-3,-2,1), lambda=2)
poly_lasso_min<-function(coefs, lambda){ #finds the min for a< a=0, a>0 gets the min out of all
##long term take care if 2 with same min smart decision
coefs_without_lambda<-coefs
#case 1 sign positive
coefs_poz<-coefs_without_lambda
coefs_poz[2]<-coefs_poz[2]+lambda
poz<-poly_min_sign(coefs=coefs_poz, positive = TRUE)
x_min_poz<-poz[1]
val_min_poz<-poz[2]
#case 2 sign negative
coefs_neg<-coefs_without_lambda
coefs_neg[2]<-coefs_neg[2]-lambda
neg<-poly_min_sign(coefs=coefs_poz, positive = FALSE)
x_min_neg<-neg[1]
val_min_neg<-neg[2]
#case 3 sign is 0
x_zeros<-0
val_min_zeros<-coefs[1]
all_mins<-c(val_min_neg, val_min_poz, val_min_zeros)
all_x_min<-c(x_min_neg, x_min_poz, x_zeros)#
idx_min<-which.min(all_min)
x_min<-all_x_min[idx_min]
print("RESULTS x_min, f min: ")
print(x_min)
print(all_mins[idx_min])
return(x_min)
}
poly_lasso_min(c(4,2,-3,-2,1), lambda=2)
poly_lasso_min<-function(coefs, lambda){ #finds the min for a< a=0, a>0 gets the min out of all
##long term take care if 2 with same min smart decision
coefs_without_lambda<-coefs
#case 1 sign positive
coefs_poz<-coefs_without_lambda
coefs_poz[2]<-coefs_poz[2]+lambda
poz<-poly_min_sign(coefs=coefs_poz, positive = TRUE)
x_min_poz<-poz[1]
val_min_poz<-poz[2]
#case 2 sign negative
coefs_neg<-coefs_without_lambda
coefs_neg[2]<-coefs_neg[2]-lambda
neg<-poly_min_sign(coefs=coefs_poz, positive = FALSE)
x_min_neg<-neg[1]
val_min_neg<-neg[2]
#case 3 sign is 0
x_zeros<-0
val_min_zeros<-coefs[1]
all_mins<-c(val_min_neg, val_min_poz, val_min_zeros)
all_x_min<-c(x_min_neg, x_min_poz, x_zeros)#
idx_min<-which.min(all_mins)
x_min<-all_x_min[idx_min]
print("RESULTS x_min, f min: ")
print(x_min)
print(all_mins[idx_min])
return(x_min)
}
poly_lasso_min(c(4,2,-3,-2,1), lambda=2)
poly_min_sign<-function(coefs, positive) #coefs should be from c0 to c4
{assert(length(coefs)==5, "A 4th deg poly should have 5 coefs")
c4<-coefs[5]
c3<-coefs[4]
c2<-coefs[3]
c1<-coefs[2]
c0<-coefs[1]
coefs<-array(coefs)
poly <- function(x) {
x_vect<-c(1,x,x^2,x^3,x^4)
return(sum(x_vect*coefs))
}
d3<-4*c4
d2<-3*c3
d1<-2*c2
d0<-c1
coefs_deriv<-c(d0,d1,d2,d3)
print("real roots")
print(real_roots)
real_roots<-Re(real_roots)
if (positive == TRUE)
{if(length(real_roots[real_roots>0])==0)
{real_roots<-list(1e-10)} #add one as backup if it does not find a root
real_roots<-real_roots[real_roots>0]}
if(positive == FALSE)
{if(length(real_roots[real_roots<0])==0)
{real_roots<-list(-1e-10)} # add one as backup if it does not find a root
real_roots<-real_roots[real_roots<0]}
# Evaluate the polynomial at the real roots
values <- sapply(real_roots, function(x) poly(Re(x)))
print(values)
# Find the minimum value and the corresponding root
min_value <- min(values)
min_root <- real_roots[which.min(values)]
# Print the results
print("root for min:")
print(min_root)  # The x-value at which the minimum occurs
print("Min value of function")
print(min_value)  # The minimum value of the polynomial
return(c(min_root, min_value))
}
poly_min_sign(c(4,4,-3,-2,1), positive = FALSE)
poly_min_sign<-function(coefs, positive) #coefs should be from c0 to c4
{assert(length(coefs)==5, "A 4th deg poly should have 5 coefs")
c4<-coefs[5]
c3<-coefs[4]
c2<-coefs[3]
c1<-coefs[2]
c0<-coefs[1]
coefs<-array(coefs)
poly <- function(x) {
x_vect<-c(1,x,x^2,x^3,x^4)
return(sum(x_vect*coefs))
}
d3<-4*c4
d2<-3*c3
d1<-2*c2
d0<-c1
coefs_deriv<-c(d0,d1,d2,d3)
roots_deriv <- polyroot(coefs_deriv)
real_roots<-roots_deriv[abs(Im(roots_deriv))<=1e-14]
real_roots<-Re(real_roots)
if (positive == TRUE)
{if(length(real_roots[real_roots>0])==0)
{real_roots<-list(1e-10)} #add one as backup if it does not find a root
real_roots<-real_roots[real_roots>0]}
if(positive == FALSE)
{if(length(real_roots[real_roots<0])==0)
{real_roots<-list(-1e-10)} # add one as backup if it does not find a root
real_roots<-real_roots[real_roots<0]}
# Evaluate the polynomial at the real roots
values <- sapply(real_roots, function(x) poly(Re(x)))
print(values)
# Find the minimum value and the corresponding root
min_value <- min(values)
min_root <- real_roots[which.min(values)]
# Print the results
print("root for min:")
print(min_root)  # The x-value at which the minimum occurs
print("Min value of function")
print(min_value)  # The minimum value of the polynomial
return(c(min_root, min_value))
}
poly_min_sign(c(4,4,-3,-2,1), positive = FALSE)
poly_lasso_min<-function(coefs, lambda){ #finds the min for a< a=0, a>0 gets the min out of all
##long term take care if 2 with same min smart decision
coefs_without_lambda<-coefs
#case 1 sign positive
coefs_poz<-coefs_without_lambda
coefs_poz[2]<-coefs_poz[2]+lambda
poz<-poly_min_sign(coefs=coefs_poz, positive = TRUE)
x_min_poz<-poz[1]
val_min_poz<-poz[2]
print("starts neg")
#case 2 sign negative
coefs_neg<-coefs_without_lambda
coefs_neg[2]<-coefs_neg[2]-lambda
neg<-poly_min_sign(coefs=coefs_poz, positive = FALSE)
x_min_neg<-neg[1]
val_min_neg<-neg[2]
print("start 0")
#case 3 sign is 0
x_zeros<-0
val_min_zeros<-coefs[1]
all_mins<-c(val_min_neg, val_min_poz, val_min_zeros)
all_x_min<-c(x_min_neg, x_min_poz, x_zeros)#
idx_min<-which.min(all_mins)
x_min<-all_x_min[idx_min]
print("RESULTS x_min, f min: ")
print(x_min)
print(all_mins[idx_min])
return(x_min)
}
poly_lasso_min(c(4,2,-3,-2,1), lambda=2)
poly_lasso_min(c(4,2,-3,-2,1), lambda=100)
poly_lasso_min(c(4,2,-3,-2,1), lambda=100000)
poly_lasso_min(c(10,-20,-20,30,25), lambda=100000)
poly_lasso_min(c(10,-20,-20,30-1000,25), lambda=1000)
poly_lasso_min(c(10,-20-1000,-20,30,25), lambda=1000)
poly_lasso_min(c(10,-20-10000,-20,30,25), lambda=10000)
poly_lasso_min(c(10,-20,-20,30,25), lambda=0)
poly_lasso_min(c(10,-20,-20,30,25), lambda=1e5)
poly_lasso_min(c(10,-20,-20,30,25), lambda=1e15)
poly_lasso_min<-function(coefs, lambda){ #finds the min for a< a=0, a>0 gets the min out of all
##long term take care if 2 with same min smart decision
coefs_without_lambda<-coefs
#case 1 sign positive
coefs_poz<-coefs_without_lambda
coefs_poz[2]<-coefs_poz[2]+lambda
poz<-poly_min_sign(coefs=coefs_poz, positive = TRUE)
x_min_poz<-poz[1]
val_min_poz<-poz[2]
print("starts neg")
#case 2 sign negative
coefs_neg<-coefs_without_lambda
coefs_neg[2]<-coefs_neg[2]-lambda
neg<-poly_min_sign(coefs=coefs_neg, positive = FALSE)
x_min_neg<-neg[1]
val_min_neg<-neg[2]
print("start 0")
#case 3 sign is 0
x_zeros<-0
val_min_zeros<-coefs[1]
all_mins<-c(val_min_neg, val_min_poz, val_min_zeros)
all_x_min<-c(x_min_neg, x_min_poz, x_zeros)#
idx_min<-which.min(all_mins)
x_min<-all_x_min[idx_min]
print("RESULTS x_min, f min: ")
print(x_min)
print(all_mins[idx_min])
return(x_min)
}
poly_lasso_min(c(10,-20,-20,30,25), lambda=1e15)
poly_lasso_min(c(10,-20,-20,30,25), lambda=1e5)
poly_lasso_min(c(10,-20,-20,30,25), lambda=1e2)
poly_lasso_min(c(10,-20,-20,30,25), lambda=1e0)
poly_lasso_min(c(10,-20,-20,30,25), lambda=0)
poly_lasso_min(c(1/16,1/2,3/2,2,1), lambda=0)
poly_lasso_min(c(1/16,1/2,3/2,2,1), lambda=1)
poly_lasso_min(c(1/16,1/2,3/2,2,1), lambda=1e-3)
poly_lasso_min(c(1/16,1/2,3/2,2,1), lambda=1e-1)
poly_lasso_min(c(1/16,1/2,3/2,2,1), lambda=1e-0)
get_coef_from_xyz<-function(x,y,z)
{c4<-sum(z*z)
c3<-sum(2*sum(x*z))
c2<-sum(x*x)-2*sum(y*z)
c1<-2*sum(x*y)
c0<-sum(y*y)
return(c(c0,c1,c2,c3,c4))}
get_coef_from_xyz(x=array(1, dim1=10), y=array(1, dim=10), z=c(1,2,1,2,1,2,1,2,1,2))
get_coef_from_xyz(x=array(1, dim=10), y=array(1, dim=10), z=c(1,2,1,2,1,2,1,2,1,2))
get_coef_from_xyz<-function(x,y,z)
{c4<-sum(z*z)
c3<-sum(2*sum(x*z))
c2<-sum(x*x)-2*sum(y*z)
c1<--2*sum(x*y)
c0<-sum(y*y)
return(c(c0,c1,c2,c3,c4))}
get_coef_from_xyz(x=array(1, dim=10), y=array(1, dim=10), z=c(1,2,1,2,1,2,1,2,1,2))
get_coef_from_xyz(x=array(0, dim=10), y=array(1, dim=10), z=c(1,2,1,2,1,2,1,2,1,2))
