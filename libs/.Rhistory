{y_pred<-predict(self, X_new, scale=scale)
if (verbose == TRUE)
{cat ("r2 score is ", r2(y_true, y_pred))
plot(y_pred, y_true)}
return(r2(y_true, y_pred))}
return(list( fit = fit, predict = predict, R2_score = R2_score, self = self))
}
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta,
lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1, w_gamma = 1, w_delta = 1, tol=6e-3)
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
## SHIM CLASS for 3 way
SHIM_3way<-function(X,y, beta_init, gamma_init, delta_init,l1=36,l2=3,l3=4, scale=FALSE)
{
self = list()
self$beta_hat <- beta_init #matrix form
self$gamma_hat<- gamma_init
self$delta_hat<-delta_init
self$means_X<-colMeans(X)
self$stds_X<-apply(X,2,sd)
self$mean_y<-mean(y)
self$scale=scale
self$l1=l1
self$l2=l2
self$l3=l3
fit<-function(X, y, lambda_beta, lambda_gamma, lambda_delta, w_beta=NULL, w_gamma=NULL, w_delta=NULL,  tol=1e-5, max_iter=50, compute_Q=Q_normal)
{## STEP 0 (STANDARDIZE)
if (self$scale == TRUE)
{      print('was scaled')
X <- scale(X)}#standardize X
y <- scale(y, center = TRUE, scale = FALSE) #center y # MAYBE ALREADY SCALED ACTUALLY???????????????????????
## STEP 1 (INIT BETA AND GAMMA AND DELTA)
beta_hat<-self$beta_hat
gamma_hat<-self$gamma_hat
delta_hat<-self$delta_hat
Q_old<-1e100
for (i in c(1:max_iter))  ###print smth IF LOSS DOES NOT DECREASE AFTER ONE ITER
{
## STEP 2 (UPDATE DELTA)
delta_hat<- update_delta(X=X, y=y, beta_hat=beta_hat, gamma_hat=gamma_hat, delta_hat=delta_hat, lambda_delta=lambda_delta, l1=self$l1, l2=self$l2, l3=self$l3)
## STEP 3 (UPDATE GAMMA)
gamma_hat<- update_gamma(X=X, y=y,beta_hat=beta_hat, gamma_hat=gamma_hat, delta_hat=delta_hat, lambda_gamma=lambda_gamma,  l1=self$l1, l2=self$l2, l3=self$l3, w=1)
## STEP 4 (UPDATE BETA)
beta_hat<- update_beta(X=X, y=y,beta_hat=beta_hat, gamma_hat=gamma_hat, delta_hat=delta_hat, lambda_beta=lambda_beta,  l1=self$l1, l2=self$l2, l3=self$l3, w=1)
## STEP 5 (COMPUTE REL_DIF)
Q_new<-compute_Q(X=X,y=y, beta= beta_hat, gamma_vec=gamma_hat, delta_vec=delta_hat,
lambda_beta=lambda_beta, lambda_gamma=lambda_gamma, lambda_delta=lambda_delta,
w_beta =w_beta, w_gamma=w_gamma, w_delta=w_delta,l1=self$l1, l2=self$l2, l3=self$l3)
rel_dif<-compute_rel_dif(Q_old=Q_old, Q_new=Q_new)
if (Q_new>Q_old*1.01)
{print("there is numerical instability overall. ")}
if(i%%2==1)
{cat("  Q: ",Q_new  )}
## STEP 6 (CHECK IF SMALL ENOUGH TO STOP)
if (abs(rel_dif)<=tol){
self$beta_hat<-beta_hat
self$gamma_hat<-gamma_hat
self$delta_hat<-delta_hat
beta_2way <- get_beta_vec_2way(beta = self$beta_hat, l1 = l1, l2 = l2, l3 = l3, gamma = self$gamma_hat, only_beta = FALSE) ###This is with delta
beta_3way <- get_beta_vec_3way(beta_2way = beta_2way, l1 = l1, l2 = l2, l3 = l3, delta = self$delta_hat, only_beta = FALSE) #This is with gamma WITH delta
beta_all<-array(c(beta_hat, beta_2way, beta_3way))
return (list("beta_hat" = self$beta_hat, "gamma_hat" = self$gamma_hat , "delta_hat" = self$delta_hat, "beta_all" = beta_all)) }
Q_old<-Q_new #UPDATE Q_old
}
cat("It has not converged. The relative difference between last 2 residuals is:", compute_rel_dif(Q_old=Q_old,Q_new=Q_new) )
self$beta_hat<-beta_hat
self$gamma_hat<-gamma_hat
self$delta_hat<-delta_hat
beta_2way <- get_beta_vec_2way(beta = self$beta_hat, l1 = l1, l2 = l2, l3 = l3, gamma = self$gamma_hat, only_beta = FALSE) ###This is with delta
beta_3way <- get_beta_vec_3way(beta_2way = beta_2way, l1 = l1, l2 = l2, l3 = l3, delta = self$delta_hat, only_beta = FALSE) #This is with gamma WITH delta
beta_all<-array(c(beta_hat, beta_2way, beta_3way))
return (list("beta_hat" = self$beta_hat, "gamma_hat" = self$gamma_hat , "delta_hat" = self$delta_hat, "beta_all" = beta_all))
}
predict<-function(self, X_new, scale=FALSE)
{if (scale ==TRUE)
{X<-scale(X_test)}
beta_2way <- get_beta_vec_2way(beta = self$beta_hat, l1 = l1, l2 = l2, l3 = l3, gamma = self$gamma_hat, only_beta = FALSE) ###This is with delta
beta_3way <- get_beta_vec_3way(beta_2way = beta_2way, l1 = l1, l2 = l2, l3 = l3, delta = self$delta_hat, only_beta = FALSE) #This is with gamma WITH delta
beta_all<-array(c(beta_hat, beta_2way, beta_3way))
y_pred<-  X_new%*%beta_all+self$mean_y
return(y_pred)
}
R2_score<-function(self, X_new, y_true, scale=FALSE, verbose=TRUE)
{y_pred<-predict(self, X_new, scale=scale)
if (verbose == TRUE)
{cat ("r2 score is ", r2(y_true, y_pred))
plot(y_pred, y_true)}
return(r2(y_true, y_pred))}
return(list( fit = fit, predict = predict, R2_score = R2_score, self = self))
}
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
## SHIM CLASS for 3 way
SHIM_3way<-function(X,y, beta_init, gamma_init, delta_init,l1=36,l2=3,l3=4, scale=FALSE)
{
self = list()
self$beta_hat <- beta_init #matrix form
self$gamma_hat<- gamma_init
self$delta_hat<-delta_init
self$means_X<-colMeans(X)
self$stds_X<-apply(X,2,sd)
self$mean_y<-mean(y)
self$scale=scale
self$l1=l1
self$l2=l2
self$l3=l3
fit<-function(X, y, lambda_beta, lambda_gamma, lambda_delta, w_beta=NULL, w_gamma=NULL, w_delta=NULL,  tol=1e-5, max_iter=50, compute_Q=Q_normal)
{## STEP 0 (STANDARDIZE)
if (self$scale == TRUE)
{      print('was scaled')
X <- scale(X)}#standardize X
y <- scale(y, center = TRUE, scale = FALSE) #center y # MAYBE ALREADY SCALED ACTUALLY???????????????????????
## STEP 1 (INIT BETA AND GAMMA AND DELTA)
beta_hat<-self$beta_hat
gamma_hat<-self$gamma_hat
delta_hat<-self$delta_hat
Q_old<-1e100
for (i in c(1:max_iter))  ###print smth IF LOSS DOES NOT DECREASE AFTER ONE ITER
{
## STEP 2 (UPDATE DELTA)
delta_hat<- update_delta(X=X, y=y, beta_hat=beta_hat, gamma_hat=gamma_hat, delta_hat=delta_hat, lambda_delta=lambda_delta, l1=self$l1, l2=self$l2, l3=self$l3)
## STEP 3 (UPDATE GAMMA)
gamma_hat<- update_gamma(X=X, y=y,beta_hat=beta_hat, gamma_hat=gamma_hat, delta_hat=delta_hat, lambda_gamma=lambda_gamma,  l1=self$l1, l2=self$l2, l3=self$l3, w=1)
## STEP 4 (UPDATE BETA)
beta_hat<- update_beta(X=X, y=y,beta_hat=beta_hat, gamma_hat=gamma_hat, delta_hat=delta_hat, lambda_beta=lambda_beta,  l1=self$l1, l2=self$l2, l3=self$l3, w=1)
## STEP 5 (COMPUTE REL_DIF)
Q_new<-compute_Q(X=X,y=y, beta= beta_hat, gamma_vec=gamma_hat, delta_vec=delta_hat,
lambda_beta=lambda_beta, lambda_gamma=lambda_gamma, lambda_delta=lambda_delta,
w_beta =w_beta, w_gamma=w_gamma, w_delta=w_delta,l1=self$l1, l2=self$l2, l3=self$l3)
rel_dif<-compute_rel_dif(Q_old=Q_old, Q_new=Q_new)
if (Q_new>Q_old*1.01)
{print("there is numerical instability overall. ")}
if(i%%2==1)
{cat("  Q: ",Q_new  )}
## STEP 6 (CHECK IF SMALL ENOUGH TO STOP)
if (abs(rel_dif)<=tol){
self$beta_hat<-beta_hat
self$gamma_hat<-gamma_hat
self$delta_hat<-delta_hat
beta_2way <- get_beta_vec_2way(beta = self$beta_hat, l1 = l1, l2 = l2, l3 = l3, gamma = self$gamma_hat, only_beta = FALSE) ###This is with delta
beta_3way <- get_beta_vec_3way(beta_2way = beta_2way, l1 = l1, l2 = l2, l3 = l3, delta = self$delta_hat, only_beta = FALSE) #This is with gamma WITH delta
beta_all<-array(c(beta_hat, beta_2way, beta_3way))
return (list("beta_hat" = self$beta_hat, "gamma_hat" = self$gamma_hat , "delta_hat" = self$delta_hat, "beta_all" = beta_all)) }
Q_old<-Q_new #UPDATE Q_old
}
cat("It has not converged. The relative difference between last 2 residuals is:", compute_rel_dif(Q_old=Q_old,Q_new=Q_new) )
self$beta_hat<-beta_hat
self$gamma_hat<-gamma_hat
self$delta_hat<-delta_hat
beta_2way <- get_beta_vec_2way(beta = self$beta_hat, l1 = l1, l2 = l2, l3 = l3, gamma = self$gamma_hat, only_beta = FALSE) ###This is with delta
beta_3way <- get_beta_vec_3way(beta_2way = beta_2way, l1 = l1, l2 = l2, l3 = l3, delta = self$delta_hat, only_beta = FALSE) #This is with gamma WITH delta
beta_all<-array(c(beta_hat, beta_2way, beta_3way))
return (list("beta_hat" = self$beta_hat, "gamma_hat" = self$gamma_hat , "delta_hat" = self$delta_hat, "beta_all" = beta_all))
}
predict<-function(self, X_new, scale=FALSE)
{if (scale ==TRUE)
{X<-scale(X_test)}
beta_2way <- get_beta_vec_2way(beta = self$beta_hat, l1 = l1, l2 = l2, l3 = l3, gamma = self$gamma_hat, only_beta = FALSE) ###This is with delta
beta_3way <- get_beta_vec_3way(beta_2way = beta_2way, l1 = l1, l2 = l2, l3 = l3, delta = self$delta_hat, only_beta = FALSE) #This is with gamma WITH delta
beta_all<-array(c(beta_hat, beta_2way, beta_3way))
y_pred<-  X_new%*%beta_all+self$mean_y
return(y_pred)
}
R2_score<-function(self, X_new, y_true, scale=FALSE, verbose=TRUE)
{y_pred<-predict(self, X_new, scale=scale)
if (verbose == TRUE)
{cat ("r2 score is ", r2(y_true, y_pred))
plot(y_pred, y_true)}
return(r2(y_true, y_pred))}
return(list( fit = fit, predict = predict, R2_score = R2_score, self = self))
}
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta,
lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1, w_gamma = 1, w_delta = 1, tol=6e-3)
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
## SHIM CLASS for 3 way
SHIM_3way<-function(X,y, beta_init, gamma_init, delta_init,l1=36,l2=3,l3=4, scale=FALSE)
{
self = list()
self$beta_hat <- beta_init #matrix form
self$gamma_hat<- gamma_init
self$delta_hat<-delta_init
self$means_X<-colMeans(X)
self$stds_X<-apply(X,2,sd)
self$mean_y<-mean(y)
self$scale=scale
self$l1=l1
self$l2=l2
self$l3=l3
fit<-function(X, y, lambda_beta, lambda_gamma, lambda_delta, w_beta=NULL, w_gamma=NULL, w_delta=NULL,  tol=1e-5, max_iter=50, compute_Q=Q_normal)
{## STEP 0 (STANDARDIZE)
if (self$scale == TRUE)
{      print('was scaled')
X <- scale(X)}#standardize X
y <- scale(y, center = TRUE, scale = FALSE) #center y # MAYBE ALREADY SCALED ACTUALLY???????????????????????
## STEP 1 (INIT BETA AND GAMMA AND DELTA)
beta_hat<-self$beta_hat
gamma_hat<-self$gamma_hat
delta_hat<-self$delta_hat
Q_old<-1e100
for (i in c(1:max_iter))  ###print smth IF LOSS DOES NOT DECREASE AFTER ONE ITER
{
## STEP 2 (UPDATE DELTA)
delta_hat<- update_delta(X=X, y=y, beta_hat=beta_hat, gamma_hat=gamma_hat, delta_hat=delta_hat, lambda_delta=lambda_delta, l1=self$l1, l2=self$l2, l3=self$l3)
## STEP 3 (UPDATE GAMMA)
gamma_hat<- update_gamma(X=X, y=y,beta_hat=beta_hat, gamma_hat=gamma_hat, delta_hat=delta_hat, lambda_gamma=lambda_gamma,  l1=self$l1, l2=self$l2, l3=self$l3, w=1)
## STEP 4 (UPDATE BETA)
beta_hat<- update_beta(X=X, y=y,beta_hat=beta_hat, gamma_hat=gamma_hat, delta_hat=delta_hat, lambda_beta=lambda_beta,  l1=self$l1, l2=self$l2, l3=self$l3, w=1)
## STEP 5 (COMPUTE REL_DIF)
Q_new<-compute_Q(X=X,y=y, beta= beta_hat, gamma_vec=gamma_hat, delta_vec=delta_hat,
lambda_beta=lambda_beta, lambda_gamma=lambda_gamma, lambda_delta=lambda_delta,
w_beta =w_beta, w_gamma=w_gamma, w_delta=w_delta,l1=self$l1, l2=self$l2, l3=self$l3)
rel_dif<-compute_rel_dif(Q_old=Q_old, Q_new=Q_new)
if (Q_new>Q_old*1.01)
{print("there is numerical instability overall. ")}
if(i%%2==1)
{cat("  Q: ",Q_new  )}
## STEP 6 (CHECK IF SMALL ENOUGH TO STOP)
if (abs(rel_dif)<=tol){
self$beta_hat<-beta_hat
self$gamma_hat<-gamma_hat
self$delta_hat<-delta_hat
beta_2way <- get_beta_vec_2way(beta = self$beta_hat, l1 = l1, l2 = l2, l3 = l3, gamma = self$gamma_hat, only_beta = FALSE) ###This is with delta
beta_3way <- get_beta_vec_3way(beta_2way = beta_2way, l1 = l1, l2 = l2, l3 = l3, delta = self$delta_hat, only_beta = FALSE) #This is with gamma WITH delta
beta_all<-array(c(beta_hat, beta_2way, beta_3way))
return (list("beta_hat" = self$beta_hat, "gamma_hat" = self$gamma_hat , "delta_hat" = self$delta_hat, "beta_all" = beta_all)) }
Q_old<-Q_new #UPDATE Q_old
}
cat("It has not converged. The relative difference between last 2 residuals is:", compute_rel_dif(Q_old=Q_old,Q_new=Q_new) )
self$beta_hat<-beta_hat
self$gamma_hat<-gamma_hat
self$delta_hat<-delta_hat
beta_2way <- get_beta_vec_2way(beta = self$beta_hat, l1 = l1, l2 = l2, l3 = l3, gamma = self$gamma_hat, only_beta = FALSE) ###This is with delta
beta_3way <- get_beta_vec_3way(beta_2way = beta_2way, l1 = l1, l2 = l2, l3 = l3, delta = self$delta_hat, only_beta = FALSE) #This is with gamma WITH delta
beta_all<-array(c(beta_hat, beta_2way, beta_3way))
return (list("beta_hat" = self$beta_hat, "gamma_hat" = self$gamma_hat , "delta_hat" = self$delta_hat, "beta_all" = beta_all))
}
predict<-function(self, X_new, scale=FALSE)
{if (scale ==TRUE)
{X<-scale(X_test)}
beta_2way <- get_beta_vec_2way(beta = self$beta_hat, l1 = l1, l2 = l2, l3 = l3, gamma = self$gamma_hat, only_beta = FALSE) ###This is with delta
beta_3way <- get_beta_vec_3way(beta_2way = beta_2way, l1 = l1, l2 = l2, l3 = l3, delta = self$delta_hat, only_beta = FALSE) #This is with gamma WITH delta
beta_all<-array(c(beta_hat, beta_2way, beta_3way))
y_pred<-  X_new%*%beta_all+self$mean_y
return(y_pred)
}
R2_score<-function(self, X_new, y_true, scale=FALSE, verbose=TRUE)
{y_pred<-predict(self, X_new, scale=scale)
if (verbose == TRUE)
{cat ("r2 score is ", r2(y_true, y_pred))
cat(length(y_true), ' ', length(y_pred))
plot(array(y_pred), array(y_true))}
return(r2(y_true, y_pred))}
return(list( fit = fit, predict = predict, R2_score = R2_score, self = self))
}
lambda_beta<-100
lambda_gamma<-1200
lambda_delta<-500
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta,
lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1, w_gamma = 1, w_delta = 1, tol=6e-3)
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
## SHIM CLASS for 3 way
SHIM_3way<-function(X,y, beta_init, gamma_init, delta_init,l1=36,l2=3,l3=4, scale=FALSE)
{
self = list()
self$beta_hat <- beta_init #matrix form
self$gamma_hat<- gamma_init
self$delta_hat<-delta_init
self$means_X<-colMeans(X)
self$stds_X<-apply(X,2,sd)
self$mean_y<-mean(y)
self$scale=scale
self$l1=l1
self$l2=l2
self$l3=l3
fit<-function(X, y, lambda_beta, lambda_gamma, lambda_delta, w_beta=NULL, w_gamma=NULL, w_delta=NULL,  tol=1e-5, max_iter=50, compute_Q=Q_normal)
{## STEP 0 (STANDARDIZE)
if (self$scale == TRUE)
{      print('was scaled')
X <- scale(X)}#standardize X
y <- scale(y, center = TRUE, scale = FALSE) #center y # MAYBE ALREADY SCALED ACTUALLY???????????????????????
## STEP 1 (INIT BETA AND GAMMA AND DELTA)
beta_hat<-self$beta_hat
gamma_hat<-self$gamma_hat
delta_hat<-self$delta_hat
Q_old<-1e100
for (i in c(1:max_iter))  ###print smth IF LOSS DOES NOT DECREASE AFTER ONE ITER
{
## STEP 2 (UPDATE DELTA)
delta_hat<- update_delta(X=X, y=y, beta_hat=beta_hat, gamma_hat=gamma_hat, delta_hat=delta_hat, lambda_delta=lambda_delta, l1=self$l1, l2=self$l2, l3=self$l3)
## STEP 3 (UPDATE GAMMA)
gamma_hat<- update_gamma(X=X, y=y,beta_hat=beta_hat, gamma_hat=gamma_hat, delta_hat=delta_hat, lambda_gamma=lambda_gamma,  l1=self$l1, l2=self$l2, l3=self$l3, w=1)
## STEP 4 (UPDATE BETA)
beta_hat<- update_beta(X=X, y=y,beta_hat=beta_hat, gamma_hat=gamma_hat, delta_hat=delta_hat, lambda_beta=lambda_beta,  l1=self$l1, l2=self$l2, l3=self$l3, w=1)
## STEP 5 (COMPUTE REL_DIF)
Q_new<-compute_Q(X=X,y=y, beta= beta_hat, gamma_vec=gamma_hat, delta_vec=delta_hat,
lambda_beta=lambda_beta, lambda_gamma=lambda_gamma, lambda_delta=lambda_delta,
w_beta =w_beta, w_gamma=w_gamma, w_delta=w_delta,l1=self$l1, l2=self$l2, l3=self$l3)
rel_dif<-compute_rel_dif(Q_old=Q_old, Q_new=Q_new)
if (Q_new>Q_old*1.01)
{print("there is numerical instability overall. ")}
if(i%%2==1)
{cat("  Q: ",Q_new  )}
## STEP 6 (CHECK IF SMALL ENOUGH TO STOP)
if (abs(rel_dif)<=tol){
self$beta_hat<-beta_hat
self$gamma_hat<-gamma_hat
self$delta_hat<-delta_hat
beta_2way <- get_beta_vec_2way(beta = self$beta_hat, l1 = l1, l2 = l2, l3 = l3, gamma = self$gamma_hat, only_beta = FALSE) ###This is with delta
beta_3way <- get_beta_vec_3way(beta_2way = beta_2way, l1 = l1, l2 = l2, l3 = l3, delta = self$delta_hat, only_beta = FALSE) #This is with gamma WITH delta
beta_all<-array(c(beta_hat, beta_2way, beta_3way))
return (list("beta_hat" = self$beta_hat, "gamma_hat" = self$gamma_hat , "delta_hat" = self$delta_hat, "beta_all" = beta_all)) }
Q_old<-Q_new #UPDATE Q_old
}
cat("It has not converged. The relative difference between last 2 residuals is:", compute_rel_dif(Q_old=Q_old,Q_new=Q_new) )
self$beta_hat<-beta_hat
self$gamma_hat<-gamma_hat
self$delta_hat<-delta_hat
beta_2way <- get_beta_vec_2way(beta = self$beta_hat, l1 = l1, l2 = l2, l3 = l3, gamma = self$gamma_hat, only_beta = FALSE) ###This is with delta
beta_3way <- get_beta_vec_3way(beta_2way = beta_2way, l1 = l1, l2 = l2, l3 = l3, delta = self$delta_hat, only_beta = FALSE) #This is with gamma WITH delta
beta_all<-array(c(beta_hat, beta_2way, beta_3way))
return (list("beta_hat" = self$beta_hat, "gamma_hat" = self$gamma_hat , "delta_hat" = self$delta_hat, "beta_all" = beta_all))
}
predict<-function(self, X_new, scale=FALSE)
{if (scale ==TRUE)
{X<-scale(X_new)}
beta_2way <- get_beta_vec_2way(beta = self$beta_hat, l1 = l1, l2 = l2, l3 = l3, gamma = self$gamma_hat, only_beta = FALSE) ###This is with delta
beta_3way <- get_beta_vec_3way(beta_2way = beta_2way, l1 = l1, l2 = l2, l3 = l3, delta = self$delta_hat, only_beta = FALSE) #This is with gamma WITH delta
beta_all<-array(c(beta_hat, beta_2way, beta_3way))
print(length(beta_all))
print(dim(X_new))
print("mean")
print(self$mean_y)
y_pred<-  X_new%*%beta_all+self$mean_y
return(y_pred)
}
R2_score<-function(self, X_new, y_true, scale=FALSE, verbose=TRUE)
{y_pred<-predict(self, X_new, scale=scale)
if (verbose == TRUE)
{cat ("r2 score is ", r2(y_true, y_pred))
cat(length(y_true), ' ', length(y_pred))
plot(array(y_pred), array(y_true))}
return(r2(y_true, y_pred))}
return(list( fit = fit, predict = predict, R2_score = R2_score, self = self))
}
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
## SHIM CLASS for 3 way
SHIM_3way<-function(X,y, beta_init, gamma_init, delta_init,l1=36,l2=3,l3=4, scale=FALSE)
{
self = list()
self$beta_hat <- beta_init #matrix form
self$gamma_hat<- gamma_init
self$delta_hat<-delta_init
self$means_X<-colMeans(X)
self$stds_X<-apply(X,2,sd)
self$mean_y<-mean(y)
self$scale=scale
self$l1=l1
self$l2=l2
self$l3=l3
fit<-function(X, y, lambda_beta, lambda_gamma, lambda_delta, w_beta=NULL, w_gamma=NULL, w_delta=NULL,  tol=1e-5, max_iter=50, compute_Q=Q_normal)
{## STEP 0 (STANDARDIZE)
if (self$scale == TRUE)
{      print('was scaled')
X <- scale(X)}#standardize X
y <- scale(y, center = TRUE, scale = FALSE) #center y # MAYBE ALREADY SCALED ACTUALLY???????????????????????
## STEP 1 (INIT BETA AND GAMMA AND DELTA)
beta_hat<-self$beta_hat
gamma_hat<-self$gamma_hat
delta_hat<-self$delta_hat
Q_old<-1e100
for (i in c(1:max_iter))  ###print smth IF LOSS DOES NOT DECREASE AFTER ONE ITER
{
## STEP 2 (UPDATE DELTA)
delta_hat<- update_delta(X=X, y=y, beta_hat=beta_hat, gamma_hat=gamma_hat, delta_hat=delta_hat, lambda_delta=lambda_delta, l1=self$l1, l2=self$l2, l3=self$l3)
## STEP 3 (UPDATE GAMMA)
gamma_hat<- update_gamma(X=X, y=y,beta_hat=beta_hat, gamma_hat=gamma_hat, delta_hat=delta_hat, lambda_gamma=lambda_gamma,  l1=self$l1, l2=self$l2, l3=self$l3, w=1)
## STEP 4 (UPDATE BETA)
beta_hat<- update_beta(X=X, y=y,beta_hat=beta_hat, gamma_hat=gamma_hat, delta_hat=delta_hat, lambda_beta=lambda_beta,  l1=self$l1, l2=self$l2, l3=self$l3, w=1)
## STEP 5 (COMPUTE REL_DIF)
Q_new<-compute_Q(X=X,y=y, beta= beta_hat, gamma_vec=gamma_hat, delta_vec=delta_hat,
lambda_beta=lambda_beta, lambda_gamma=lambda_gamma, lambda_delta=lambda_delta,
w_beta =w_beta, w_gamma=w_gamma, w_delta=w_delta,l1=self$l1, l2=self$l2, l3=self$l3)
rel_dif<-compute_rel_dif(Q_old=Q_old, Q_new=Q_new)
if (Q_new>Q_old*1.01)
{print("there is numerical instability overall. ")}
if(i%%2==1)
{cat("  Q: ",Q_new  )}
## STEP 6 (CHECK IF SMALL ENOUGH TO STOP)
if (abs(rel_dif)<=tol){
self$beta_hat<-beta_hat
self$gamma_hat<-gamma_hat
self$delta_hat<-delta_hat
beta_2way <- get_beta_vec_2way(beta = self$beta_hat, l1 = l1, l2 = l2, l3 = l3, gamma = self$gamma_hat, only_beta = FALSE) ###This is with delta
beta_3way <- get_beta_vec_3way(beta_2way = beta_2way, l1 = l1, l2 = l2, l3 = l3, delta = self$delta_hat, only_beta = FALSE) #This is with gamma WITH delta
beta_all<-array(c(beta_hat, beta_2way, beta_3way))
return (list("beta_hat" = self$beta_hat, "gamma_hat" = self$gamma_hat , "delta_hat" = self$delta_hat, "beta_all" = beta_all)) }
Q_old<-Q_new #UPDATE Q_old
}
cat("It has not converged. The relative difference between last 2 residuals is:", compute_rel_dif(Q_old=Q_old,Q_new=Q_new) )
self$beta_hat<-beta_hat
self$gamma_hat<-gamma_hat
self$delta_hat<-delta_hat
beta_2way <- get_beta_vec_2way(beta = self$beta_hat, l1 = l1, l2 = l2, l3 = l3, gamma = self$gamma_hat, only_beta = FALSE) ###This is with delta
beta_3way <- get_beta_vec_3way(beta_2way = beta_2way, l1 = l1, l2 = l2, l3 = l3, delta = self$delta_hat, only_beta = FALSE) #This is with gamma WITH delta
beta_all<-array(c(beta_hat, beta_2way, beta_3way))
return (list("beta_hat" = self$beta_hat, "gamma_hat" = self$gamma_hat , "delta_hat" = self$delta_hat, "beta_all" = beta_all))
}
predict<-function(self, X_new, mean_y,scale=FALSE)
{if (scale ==TRUE)
{X<-scale(X_new)}
beta_2way <- get_beta_vec_2way(beta = self$beta_hat, l1 = l1, l2 = l2, l3 = l3, gamma = self$gamma_hat, only_beta = FALSE) ###This is with delta
beta_3way <- get_beta_vec_3way(beta_2way = beta_2way, l1 = l1, l2 = l2, l3 = l3, delta = self$delta_hat, only_beta = FALSE) #This is with gamma WITH delta
beta_all<-array(c(beta_hat, beta_2way, beta_3way))
y_pred<-  X_new%*%beta_all+mean_y
return(y_pred)
}
R2_score<-function(self, X_new, y_true, scale=FALSE, verbose=TRUE)
{y_pred<-predict(self, X_new, scale=scale)
if (verbose == TRUE)
{cat ("r2 score is ", r2(y_true, y_pred))
cat(length(y_true), ' ', length(y_pred))
plot(array(y_pred), array(y_true))}
return(r2(y_true, y_pred))}
return(list( fit = fit, predict = predict, R2_score = R2_score, self = self))
}
## SHIM CLASS for 3 way
SHIM_3way<-function(X,y, beta_init, gamma_init, delta_init,l1=36,l2=3,l3=4, scale=FALSE)
{
self = list()
self$beta_hat <- beta_init #matrix form
self$gamma_hat<- gamma_init
self$delta_hat<-delta_init
self$means_X<-colMeans(X)
self$stds_X<-apply(X,2,sd)
self$mean_y<-mean(y)
self$scale=scale
self$l1=l1
self$l2=l2
self$l3=l3
fit<-function(X, y, lambda_beta, lambda_gamma, lambda_delta, w_beta=NULL, w_gamma=NULL, w_delta=NULL,  tol=1e-5, max_iter=50, compute_Q=Q_normal)
{## STEP 0 (STANDARDIZE)
if (self$scale == TRUE)
{      print('was scaled')
X <- scale(X)}#standardize X
y <- scale(y, center = TRUE, scale = FALSE) #center y # MAYBE ALREADY SCALED ACTUALLY???????????????????????
## STEP 1 (INIT BETA AND GAMMA AND DELTA)
beta_hat<-self$beta_hat
gamma_hat<-self$gamma_hat
delta_hat<-self$delta_hat
Q_old<-1e100
for (i in c(1:max_iter))  ###print smth IF LOSS DOES NOT DECREASE AFTER ONE ITER
{
## STEP 2 (UPDATE DELTA)
delta_hat<- update_delta(X=X, y=y, beta_hat=beta_hat, gamma_hat=gamma_hat, delta_hat=delta_hat, lambda_delta=lambda_delta, l1=self$l1, l2=self$l2, l3=self$l3)
## STEP 3 (UPDATE GAMMA)
gamma_hat<- update_gamma(X=X, y=y,beta_hat=beta_hat, gamma_hat=gamma_hat, delta_hat=delta_hat, lambda_gamma=lambda_gamma,  l1=self$l1, l2=self$l2, l3=self$l3, w=1)
## STEP 4 (UPDATE BETA)
beta_hat<- update_beta(X=X, y=y,beta_hat=beta_hat, gamma_hat=gamma_hat, delta_hat=delta_hat, lambda_beta=lambda_beta,  l1=self$l1, l2=self$l2, l3=self$l3, w=1)
## STEP 5 (COMPUTE REL_DIF)
Q_new<-compute_Q(X=X,y=y, beta= beta_hat, gamma_vec=gamma_hat, delta_vec=delta_hat,
lambda_beta=lambda_beta, lambda_gamma=lambda_gamma, lambda_delta=lambda_delta,
w_beta =w_beta, w_gamma=w_gamma, w_delta=w_delta,l1=self$l1, l2=self$l2, l3=self$l3)
rel_dif<-compute_rel_dif(Q_old=Q_old, Q_new=Q_new)
if (Q_new>Q_old*1.01)
{print("there is numerical instability overall. ")}
if(i%%2==1)
{cat("  Q: ",Q_new  )}
## STEP 6 (CHECK IF SMALL ENOUGH TO STOP)
if (abs(rel_dif)<=tol){
self$beta_hat<-beta_hat
self$gamma_hat<-gamma_hat
self$delta_hat<-delta_hat
beta_2way <- get_beta_vec_2way(beta = self$beta_hat, l1 = l1, l2 = l2, l3 = l3, gamma = self$gamma_hat, only_beta = FALSE) ###This is with delta
beta_3way <- get_beta_vec_3way(beta_2way = beta_2way, l1 = l1, l2 = l2, l3 = l3, delta = self$delta_hat, only_beta = FALSE) #This is with gamma WITH delta
beta_all<-array(c(beta_hat, beta_2way, beta_3way))
return (list("beta_hat" = self$beta_hat, "gamma_hat" = self$gamma_hat , "delta_hat" = self$delta_hat, "beta_all" = beta_all)) }
Q_old<-Q_new #UPDATE Q_old
}
cat("It has not converged. The relative difference between last 2 residuals is:", compute_rel_dif(Q_old=Q_old,Q_new=Q_new) )
self$beta_hat<-beta_hat
self$gamma_hat<-gamma_hat
self$delta_hat<-delta_hat
beta_2way <- get_beta_vec_2way(beta = self$beta_hat, l1 = l1, l2 = l2, l3 = l3, gamma = self$gamma_hat, only_beta = FALSE) ###This is with delta
beta_3way <- get_beta_vec_3way(beta_2way = beta_2way, l1 = l1, l2 = l2, l3 = l3, delta = self$delta_hat, only_beta = FALSE) #This is with gamma WITH delta
beta_all<-array(c(beta_hat, beta_2way, beta_3way))
return (list("beta_hat" = self$beta_hat, "gamma_hat" = self$gamma_hat , "delta_hat" = self$delta_hat, "beta_all" = beta_all))
}
predict<-function(self, X_new, mean_y,scale=FALSE)
{if (scale ==TRUE)
{X<-scale(X_new)}
beta_2way <- get_beta_vec_2way(beta = self$beta_hat, l1 = l1, l2 = l2, l3 = l3, gamma = self$gamma_hat, only_beta = FALSE) ###This is with delta
beta_3way <- get_beta_vec_3way(beta_2way = beta_2way, l1 = l1, l2 = l2, l3 = l3, delta = self$delta_hat, only_beta = FALSE) #This is with gamma WITH delta
beta_all<-array(c(beta_hat, beta_2way, beta_3way))
y_pred<-  X_new%*%beta_all+mean_y
return(y_pred)
}
R2_score<-function(self, X_new, y_true, scale=FALSE, verbose=TRUE)
{y_pred<-predict(self, X_new, scale=scale, mean_y=mean(y_true))
if (verbose == TRUE)
{cat ("r2 score is ", r2(y_true, y_pred))
cat(length(y_true), ' ', length(y_pred))
plot(array(y_pred), array(y_true))}
return(r2(y_true, y_pred))}
return(list( fit = fit, predict = predict, R2_score = R2_score, self = self))
}
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta,
lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1, w_gamma = 1, w_delta = 1, tol=6e-3)
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
