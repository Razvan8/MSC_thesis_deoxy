for (spec in spec.ijk) {
spec.nonum <- strsplit(spec, split=" ")[[1]][1]
cut.ijk <- (grepl("2",lengths(regmatches(coef.plsglm.all.ijk[,1], gregexpr(":", coef.plsglm.all.ijk[,1])))))&
(grepl(tags1,coef.plsglm.all.ijk[,1]))&(grepl(tags2,coef.plsglm.all.ijk[,1]))&(grepl(spec.nonum,coef.plsglm.all.ijk[,1]))
new.ind <- (1:length(coef.plsglm.all.ijk[,1]))[cut.ijk]
new.val <- sum(coef.plsglm.all.ijk[new.ind,2])
new.tag <- paste(sort(c(tags1, tags2, spec)),collapse=":")
coef.plsglm.all.ijk <- coef.plsglm.all.ijk[-new.ind,]
coef.plsglm.all.ijk <- rbind(coef.plsglm.all.ijk, list(new.tag,new.val))
}
}
}
for (tags in setdiff(tags.ijk, spec.ijk)) {
for (spec1 in spec.ijk) {
for (spec2 in setdiff(spec.ijk,c(spec1))) {
spec1.nonum <- strsplit(spec1, split=" ")[[1]][1]
spec2.nonum <- strsplit(spec2, split=" ")[[1]][1]
cut.ijk <- (grepl("2",lengths(regmatches(coef.plsglm.all.ijk[,1], gregexpr(":", coef.plsglm.all.ijk[,1])))))&
(grepl(tags,coef.plsglm.all.ijk[,1]))&(grepl(spec1.nonum,coef.plsglm.all.ijk[,1]))&(grepl(spec2.nonum,coef.plsglm.all.ijk[,1]))
new.ind <- (1:length(coef.plsglm.all.ijk[,1]))[cut.ijk]
new.val <- sum(coef.plsglm.all.ijk[new.ind,2])
new.tag <- paste(sort(c(tags, spec1, spec2)),collapse=":")
coef.plsglm.all.ijk <- coef.plsglm.all.ijk[-new.ind,]
coef.plsglm.all.ijk <- rbind(coef.plsglm.all.ijk, list(new.tag,new.val))
}
}
}
for (spec1 in spec.ijk) {
for (spec2 in setdiff(spec.ijk,c(spec1))) {
for (spec3 in setdiff(spec.ijk,c(spec1,spec2))) {
spec1.nonum <- strsplit(spec1, split=" ")[[1]][1]
spec2.nonum <- strsplit(spec2, split=" ")[[1]][1]
spec3.nonum <- strsplit(spec3, split=" ")[[1]][1]
cut.ijk <- (grepl("2",lengths(regmatches(coef.plsglm.all.ijk[,1], gregexpr(":", coef.plsglm.all.ijk[,1])))))&
(grepl(spec1.nonum,coef.plsglm.all.ijk[,1]))&(grepl(spec2.nonum,coef.plsglm.all.ijk[,1]))&(grepl(spec3.nonum,coef.plsglm.all.ijk[,1]))
new.ind <- (1:length(coef.plsglm.all.ijk[,1]))[cut.ijk]
new.val <- sum(coef.plsglm.all.ijk[new.ind,2])
new.tag <- paste(sort(c(spec1, spec2, spec3)),collapse=":")
coef.plsglm.all.ijk <- coef.plsglm.all.ijk[-new.ind,]
coef.plsglm.all.ijk <- rbind(coef.plsglm.all.ijk, list(new.tag,new.val))
}
}
}
# Recover original levels
add.ijk <- as.numeric(strsplit(sort(tags.ijk)[1],split=" ")[[1]][2])
bas.ijk <- as.numeric(strsplit(sort(tags.ijk)[2],split=" ")[[1]][2])
suf.ijk <- as.numeric(strsplit(sort(tags.ijk)[3],split=" ")[[1]][2])
print("start")
add.true <- paste("alcohol ", apply(xs, 2, unique)$alcohol[which(apply(xs, 2, function(x) order(unique(x)))$alcohol==add.ijk)], sep="")
print(add.true)
bas.true <- paste("base ", apply(xs, 2, unique)$base[which(apply(xs, 2, function(x) order(unique(x)))$base==bas.ijk)], sep="")
suf.true <- paste("sulfonyl_fluoride ", apply(xs, 2, unique)$sulfonyl_fluoride[which(apply(xs, 2, function(x) order(unique(x)))$sulfonyl_fluoride==suf.ijk)], sep="")
coef.plsglm.all.ijk <- coef.plsglm.all.ijk[order(coef.plsglm.all.ijk$V1),]
coef.plsglm.all.ijk$V2 <- format(as.numeric(coef.plsglm.all.ijk$V2),nsmall=7,digits=7, scientific=F)
coef.plsglm.all.ijk$V1 <- sort(c("intercept", add.true, bas.true, suf.true, paste(add.true, bas.true, suf.true, sep=":"),
paste(add.true, bas.true, sep=":"), paste(add.true, suf.true, sep=":"), paste(bas.true, suf.true, sep=":")
))
coef.plsglm.all.ijk <- rbind( c("g.link(mu.hat)", format(eta.hat.plsglm.all[ind.ijk],nsmall=7,digits=7, scientific=F)), coef.plsglm.all.ijk)
coef.plsglm.all.ijk <- rbind( c("mu.hat", format(mu.hat.plsglm.all[ind.ijk],nsmall=7,digits=7, scientific=F)), coef.plsglm.all.ijk)
coef.plsglm.all.ijk <- rbind( c("y.obs", format(y.all[ind.ijk,],nsmall=7,digits=7, scientific=F)), coef.plsglm.all.ijk)
#print(coef.plsglm.all.ijk)
# Update global table
df.yields <- rbind(df.yields,
c(cols123[counter,1], cols123[counter,2], cols123[counter,3],
coef.plsglm.all.ijk[1,2], coef.plsglm.all.ijk[2,2], coef.plsglm.all.ijk[3,2], coef.plsglm.all.ijk[10,2], #interc
coef.plsglm.all.ijk[4,2], coef.plsglm.all.ijk[8,2], coef.plsglm.all.ijk[11,2], #mains
coef.plsglm.all.ijk[5,2], coef.plsglm.all.ijk[7,2], coef.plsglm.all.ijk[9,2], #two-ways
coef.plsglm.all.ijk[6,2]# three ways
))
colnames(df.yields) <- df.yields.colnames
}
gc()
df.yields
cols123
cols123[counter,1]
cols123[counter,1][1]
str(cols123[counter,1])
######################################################################
## COMPARISON PLSGLM AND LASSOGLM-HEREDITY ON FULL DATA
######################################################################
# Memory
memory.limit(64000)
libs_path<-file.path("..","libs")
source(file.path(libs_path,'helper_functions.R'))
source(file.path(libs_path,'Shim3way_class.R'))
source(file.path(libs_path,'hierarchy_tests.R'))
source(file.path(libs_path,'recover_parameters.R'))
library(glmnet)
data<-load_deoxi_flourination()
print(max(data$yield))
hist(data$prob)
data
plot_yield_histo(data)
levels(data$a)
levels(data$b)
levels(data$s)
y_true<-data$prob*100
X_data<-data[c('a','b','s')]
colnames(X_data)<-c("alcohol", "base", "sulfonyl_fluoride")
X_data <- lapply(X_data, as.factor)
X_data <- as.data.frame(X_data)  # Convert back to data frame
xs<-X_data
X_data[338,]
unique(X_data$a)
unique(X_data$b)
unique(X_data$s)
X_data[338,]
y_true[338]
# Create the dummy matrix without intercept
X_dummy <- model.matrix(~ . - 1, data = X_data, contrasts.arg = lapply(X_data, contrasts, contrasts = FALSE))
# Find rows where the 37th column has value 1
rows_to_replace1 <- X_dummy[,37] == 1
# Replace values in columns 1 to 36 with -1 for these rows
X_dummy[rows_to_replace1, 1:36] <- -1
rows_to_replace2 <- X_dummy[,41] == 1
X_dummy[rows_to_replace2, 38:40] <- -1
rows_to_replace3 <- X_dummy[,46] == 1
X_dummy[rows_to_replace3, 42:45] <- -1
print(dim(X_dummy))
print(colSums(X_dummy))
##only once
X_dummy<-X_dummy[,-c(37,41,46)]
print(dim(X_dummy))
print(colSums(X_dummy))
###
new_colnames <- c(paste0("alcohol ", 1:36), paste0("base ", 1:3), paste0("sulfonyl_fluoride ", 1:4))
colnames(X_dummy) <- new_colnames
X_dummy<-as.data.frame(X_dummy, col.names =TRUE)
for (i in 1:36) {
for (jk in 37:43) {
X_dummy[, paste0(colnames(X_dummy)[i], ':', colnames(X_dummy)[jk])] <-X_dummy[,i]*X_dummy[,jk]
}
}
for (j in c(37:39))
{for (k in c(40:43))
{
X_dummy[,paste0((colnames(X_dummy)[j]),':', colnames(X_dummy[k]) ) ] <- X_dummy[,j]*X_dummy[,k]
}
}
for (i in c(1:36))
{for (j in c(37:39))
{for (k in c(40:43))
{
X_dummy[,paste0( (colnames(X_dummy)[i]), ':' , colnames(X_dummy[j]), ":",  colnames(X_dummy[k]) ) ] <- X_dummy[,i]*X_dummy[,j]*X_dummy[,k]
}
}}
X<-as.matrix(X_dummy)
y<-y_true
colnames(X)
l1=36
l2=3
l3=4
range_main<-c(1: (l1+l2+l3) )
range_theta<-c( (l1+l2+l3+1) : (l1+l2+l3+l1*(l2+l3)+l2*l3) )
range_psi<-c(  (l1+l2+l3+ 1+ l1*(l2+l3)+l2*l3): (l1+l2+l3+ l1*(l2+l3)+l2*l3+l1*l2*l3) )
X[338,range_main]
#######################
## Data processing
#######################
x.all<-X[,range_main]
xxx.all<-X
y.all<- matrix(y_true/100, ncol=1)
n.all <- nrow(y.all)
colnames(xxx.all)
# Identify label ijk for yield
rownames(y.all) <- as.character(1:n.all)
reorder<-order(y.all[,1],decreasing=TRUE)[1:n.all]
y.all<-as.data.frame(y.all[reorder,1], row.names=rownames(y.all)[reorder])
x.all<-x.all[reorder,]
xxx.all<-xxx.all[reorder,]
rownames(y.all)
rownames(x.all)
rownames(xxx.all)
cols123<-X_data[reorder,]
for (ijk in 1:n.all) {
add.i <- colnames(x.all)[which(x.all[ijk,]!=0)][1]
add.I <- sum(grepl("alcohol",colnames(x.all)[which(x.all[ijk,]!=0)]))
if (add.I>1) add.i <- "alcohol 37"  # this is "additive 37"
bas.j <- colnames(x.all)[which(x.all[ijk,]!=0)][1+add.I]
bas.J <- sum(grepl("base",colnames(x.all)[which(x.all[ijk,]!=0)]))
if (bas.J>1) bas.j <- "base 4"
# this is "base 1"
suf.k <- colnames(x.all)[which(x.all[ijk,]!=0)][1+add.I+bas.J]
suf.K <- sum(grepl("sulfonyl_fluoride",colnames(x.all)[which(x.all[ijk,]!=0)]))
if (suf.K>1) suf.k <- "sulfonyl_fluoride 5"
rownames(y.all)[ijk] <- paste(add.i, bas.j, suf.k, sep=":")
}
rownames(xxx.all) <- rownames(y.all)
#print(xxx.all[500:504,range_main])
###############################
## Factorization PLSGLM
###############################
# Initialize table
df.yields.colnames <- c("alcohol", "base", "sulfonyl_fluoride",
"y.obs", "mu.hat", "g(mu.hat)", "intercept",
"a", "b", "sf",
"a:b", "a:sf", "b:sf",
"a:b:sf")
df.yields <- data.frame(matrix(ncol=length(df.yields.colnames),nrow=0))
colnames(df.yields) <- df.yields.colnames
# Get coefficients of best model
coef.plsglm.all <- read.table(file="../Results/coefs_shim_deoxy_table1.txt") ##read coefs as here suitable form!!!!!!
beta.hat.plsglm.all <- coef.plsglm.all[,2]
eta.hat.plsglm.all <- as.vector(as.matrix(xxx.all)%*%beta.hat.plsglm.all[-1]+beta.hat.plsglm.all[1]) ### TAKE CARE TO MAKE xxx.all
mu.hat.plsglm.all <- kappa1(eta.hat.plsglm.all)
print(r2(y.all, mu.hat.plsglm.all))
# Get top yields
n.yield.max <- length(y.all[,1])
IJK <- order(y.all[,1],decreasing=TRUE)[1:n.yield.max]
y.IJK <- as.data.frame(y.all[IJK,1], row.names=rownames(y.all)[IJK])
counter<-0
for (ijk in rownames(y.IJK)) {
counter<-counter+1
# For the given yield get: relevant features, non-standard features, yield value, yield position in data, yield estimated mean
tags.ijk <- strsplit(ijk, split=":")[[1]]
spec.ijk <- tags.ijk[(grepl("alcohol 37",tags.ijk))|
(grepl("base 4",tags.ijk))|
(grepl("sulfonyl_fluoride 5",tags.ijk))]
y.ijk <- format(y.IJK[ijk,], digits=8, nsmall=8, scientific=F)#get y
ind.ijk <- which(rownames(y.all)==ijk)#get ind
mu.ijk <- mu.hat.plsglm.all[ind.ijk] #get mu
# Get coefficients with active features (we cross-multiply to get correct signs for positive and negative effects)
active.ijk <- which(xxx.all[ind.ijk,]!=0)
coef.plsglm.all.ijk <- rbind(coef.plsglm.all[1,], coef.plsglm.all[-1,][active.ijk,])
coef.plsglm.all.ijk$V2 <- c(coef.plsglm.all.ijk$V2[1], as.numeric(xxx.all[ind.ijk,active.ijk])*coef.plsglm.all.ijk$V2[-1])
# Deal with one-level combinations
for (spec in spec.ijk) {
spec.nonum <- strsplit(spec, split=" ")[[1]][1]
cut.ijk <- (!grepl(":",coef.plsglm.all.ijk[,1]))&(grepl(spec.nonum,coef.plsglm.all.ijk[,1]))
coef.plsglm.all.ijk[cut.ijk,]
new.ind <- (1:length(coef.plsglm.all.ijk[,1]))[cut.ijk]
new.val <- sum(coef.plsglm.all.ijk[new.ind,2])
new.tag <- spec
coef.plsglm.all.ijk <- coef.plsglm.all.ijk[-new.ind,]
coef.plsglm.all.ijk <- rbind(coef.plsglm.all.ijk, list(new.tag,new.val))
}
# Deal with two-level combinations
for (tags in setdiff(tags.ijk, spec.ijk)) {
for (spec in spec.ijk) {
spec.nonum <- strsplit(spec, split=" ")[[1]][1]
cut.ijk <- (grepl("1",lengths(regmatches(coef.plsglm.all.ijk[,1],
gregexpr(":", coef.plsglm.all.ijk[,1])))))&(grepl(tags,coef.plsglm.all.ijk[,1]))&(grepl(spec.nonum,coef.plsglm.all.ijk[,1]))
new.ind <- (1:length(coef.plsglm.all.ijk[,1]))[cut.ijk]
new.val <- sum(coef.plsglm.all.ijk[new.ind,2])
new.tag <- paste(sort(c(tags, spec)),collapse=":")
coef.plsglm.all.ijk <- coef.plsglm.all.ijk[-new.ind,]
coef.plsglm.all.ijk <- rbind(coef.plsglm.all.ijk, list(new.tag,new.val))
}
}
for (spec1 in spec.ijk) {
for (spec2 in setdiff(spec.ijk,c(spec1))) {
spec1.nonum <- strsplit(spec1, split=" ")[[1]][1]
spec2.nonum <- strsplit(spec2, split=" ")[[1]][1]
cut.ijk <- (grepl("1",lengths(regmatches(coef.plsglm.all.ijk[,1],
gregexpr(":", coef.plsglm.all.ijk[,1])))))&(grepl(spec1.nonum,coef.plsglm.all.ijk[,1]))&(grepl(spec2.nonum,coef.plsglm.all.ijk[,1]))
new.ind <- (1:length(coef.plsglm.all.ijk[,1]))[cut.ijk]
new.val <- sum(coef.plsglm.all.ijk[new.ind,2])
new.tag <- paste(sort(c(spec1, spec2)),collapse=":")
coef.plsglm.all.ijk <- coef.plsglm.all.ijk[-new.ind,]
coef.plsglm.all.ijk <- rbind(coef.plsglm.all.ijk, list(new.tag,new.val))
}
}
# Deal with three-level combinations
for (tags1 in setdiff(tags.ijk, spec.ijk)) {
for (tags2 in setdiff(setdiff(tags.ijk, spec.ijk),c(tags1))) {
for (spec in spec.ijk) {
spec.nonum <- strsplit(spec, split=" ")[[1]][1]
cut.ijk <- (grepl("2",lengths(regmatches(coef.plsglm.all.ijk[,1], gregexpr(":", coef.plsglm.all.ijk[,1])))))&
(grepl(tags1,coef.plsglm.all.ijk[,1]))&(grepl(tags2,coef.plsglm.all.ijk[,1]))&(grepl(spec.nonum,coef.plsglm.all.ijk[,1]))
new.ind <- (1:length(coef.plsglm.all.ijk[,1]))[cut.ijk]
new.val <- sum(coef.plsglm.all.ijk[new.ind,2])
new.tag <- paste(sort(c(tags1, tags2, spec)),collapse=":")
coef.plsglm.all.ijk <- coef.plsglm.all.ijk[-new.ind,]
coef.plsglm.all.ijk <- rbind(coef.plsglm.all.ijk, list(new.tag,new.val))
}
}
}
for (tags in setdiff(tags.ijk, spec.ijk)) {
for (spec1 in spec.ijk) {
for (spec2 in setdiff(spec.ijk,c(spec1))) {
spec1.nonum <- strsplit(spec1, split=" ")[[1]][1]
spec2.nonum <- strsplit(spec2, split=" ")[[1]][1]
cut.ijk <- (grepl("2",lengths(regmatches(coef.plsglm.all.ijk[,1], gregexpr(":", coef.plsglm.all.ijk[,1])))))&
(grepl(tags,coef.plsglm.all.ijk[,1]))&(grepl(spec1.nonum,coef.plsglm.all.ijk[,1]))&(grepl(spec2.nonum,coef.plsglm.all.ijk[,1]))
new.ind <- (1:length(coef.plsglm.all.ijk[,1]))[cut.ijk]
new.val <- sum(coef.plsglm.all.ijk[new.ind,2])
new.tag <- paste(sort(c(tags, spec1, spec2)),collapse=":")
coef.plsglm.all.ijk <- coef.plsglm.all.ijk[-new.ind,]
coef.plsglm.all.ijk <- rbind(coef.plsglm.all.ijk, list(new.tag,new.val))
}
}
}
for (spec1 in spec.ijk) {
for (spec2 in setdiff(spec.ijk,c(spec1))) {
for (spec3 in setdiff(spec.ijk,c(spec1,spec2))) {
spec1.nonum <- strsplit(spec1, split=" ")[[1]][1]
spec2.nonum <- strsplit(spec2, split=" ")[[1]][1]
spec3.nonum <- strsplit(spec3, split=" ")[[1]][1]
cut.ijk <- (grepl("2",lengths(regmatches(coef.plsglm.all.ijk[,1], gregexpr(":", coef.plsglm.all.ijk[,1])))))&
(grepl(spec1.nonum,coef.plsglm.all.ijk[,1]))&(grepl(spec2.nonum,coef.plsglm.all.ijk[,1]))&(grepl(spec3.nonum,coef.plsglm.all.ijk[,1]))
new.ind <- (1:length(coef.plsglm.all.ijk[,1]))[cut.ijk]
new.val <- sum(coef.plsglm.all.ijk[new.ind,2])
new.tag <- paste(sort(c(spec1, spec2, spec3)),collapse=":")
coef.plsglm.all.ijk <- coef.plsglm.all.ijk[-new.ind,]
coef.plsglm.all.ijk <- rbind(coef.plsglm.all.ijk, list(new.tag,new.val))
}
}
}
# Recover original levels
add.ijk <- as.numeric(strsplit(sort(tags.ijk)[1],split=" ")[[1]][2])
bas.ijk <- as.numeric(strsplit(sort(tags.ijk)[2],split=" ")[[1]][2])
suf.ijk <- as.numeric(strsplit(sort(tags.ijk)[3],split=" ")[[1]][2])
print("start")
add.true <- paste("alcohol ", apply(xs, 2, unique)$alcohol[which(apply(xs, 2, function(x) order(unique(x)))$alcohol==add.ijk)], sep="")
print(add.true)
bas.true <- paste("base ", apply(xs, 2, unique)$base[which(apply(xs, 2, function(x) order(unique(x)))$base==bas.ijk)], sep="")
suf.true <- paste("sulfonyl_fluoride ", apply(xs, 2, unique)$sulfonyl_fluoride[which(apply(xs, 2, function(x) order(unique(x)))$sulfonyl_fluoride==suf.ijk)], sep="")
coef.plsglm.all.ijk <- coef.plsglm.all.ijk[order(coef.plsglm.all.ijk$V1),]
coef.plsglm.all.ijk$V2 <- format(as.numeric(coef.plsglm.all.ijk$V2),nsmall=7,digits=7, scientific=F)
coef.plsglm.all.ijk$V1 <- sort(c("intercept", add.true, bas.true, suf.true, paste(add.true, bas.true, suf.true, sep=":"),
paste(add.true, bas.true, sep=":"), paste(add.true, suf.true, sep=":"), paste(bas.true, suf.true, sep=":")
))
coef.plsglm.all.ijk <- rbind( c("g.link(mu.hat)", format(eta.hat.plsglm.all[ind.ijk],nsmall=7,digits=7, scientific=F)), coef.plsglm.all.ijk)
coef.plsglm.all.ijk <- rbind( c("mu.hat", format(mu.hat.plsglm.all[ind.ijk],nsmall=7,digits=7, scientific=F)), coef.plsglm.all.ijk)
coef.plsglm.all.ijk <- rbind( c("y.obs", format(y.all[ind.ijk,],nsmall=7,digits=7, scientific=F)), coef.plsglm.all.ijk)
#print(coef.plsglm.all.ijk)
# Update global table
df.yields <- rbind(df.yields,
c(as.character(cols123[counter,1]), as.character(cols123[counter,2]), as.character(cols123[counter,3]),
coef.plsglm.all.ijk[1,2], coef.plsglm.all.ijk[2,2], coef.plsglm.all.ijk[3,2], coef.plsglm.all.ijk[10,2], #interc
coef.plsglm.all.ijk[4,2], coef.plsglm.all.ijk[8,2], coef.plsglm.all.ijk[11,2], #mains
coef.plsglm.all.ijk[5,2], coef.plsglm.all.ijk[7,2], coef.plsglm.all.ijk[9,2], #two-ways
coef.plsglm.all.ijk[6,2]# three ways
))
colnames(df.yields) <- df.yields.colnames
}
gc()
df.yields
X_data[which(y==0.97),]
X_data[which(y==97),]
library(RColorBrewer)
library(rgl)
######################################################################
## COMPARISON PLSGLM AND LASSOGLM-HEREDITY ON FULL DATA
######################################################################
# Clear all
rm(list=ls())
gc()
try(dev.off(dev.list()["RStudioGD"]),silent=TRUE)
try(dev.off(),silent=TRUE)
cat("\014")
# Imports
source("tools.R")
library(dplyr)
library(glmnet)
library(ggplot2)
library(ggpubr)
# Memory
memory.limit(64000)
#######################
## Data processing
#######################
# Read data
dx.train <- as.data.frame(read.table("../Data/XtrainNScaled.txt",header=TRUE))
dx.test <- as.data.frame(read.table("../Data/XtestNScaled.txt",header=TRUE))
dy.train <- as.data.frame(read.table("../Data/YTrain.txt",header=FALSE))
dy.test <- as.data.frame(read.table("../Data/YTest.txt",header=FALSE))
# Response variable
y.all <- as.matrix(rbind(dy.train,dy.test))
n.all <- nrow(y.all)
tt <- (1:n.all)/n.all
# Add three artificial descriptors for additives
xc <- rbind(dx.train,dx.test)
set.seed(2134)
c1 <- factor(xc[,1])
c2 <- factor(xc[,3])
c3 <- factor(xc[,4])
levels(c1) <- runif(22)
levels(c2) <- rnorm(22)
levels(c3) <- runif(22)
xc <- cbind(cbind(as.numeric(c1),as.numeric(c2),as.numeric(c3)),xc)
colnames(xc)[1:3] <- c("add_new1","add_new2","add_new3")
xs <- xc[,c(4,23,50,60)]
colnames(xs) <- c("additive","aryl_halide","base","ligand")
a <- rep(NA,ncol(xs))
for (i in 1:ncol(xs)) a[i] <- length(unique(xs[,i]))
xcf <- matrix(NA,nrow(xs),sum(a))
b <- cumsum(a)
colnames(xcf) <- rep(colnames(xs),times=a)
colnum <- order(unique(xs[,1]))
for (i in 2:ncol(xs)) colnum <- c(colnum,order(unique(xs[,i])))
colnames(xcf) <- paste(colnames(xcf),colnum)
for (i in 1:nrow(xs)) {
for (j in 1:length(a)) {
res <- rep(0, a[j])
where <- match( xs[i,j], unique(xs[,j]) )
res[ where ] <- 1
xcf[i,(max(b[j-1],0)+1):b[j]] <- res
}
}
for (i in 1:length(b)) {
ind <- match(xcf[,b[i]],1)==1
xcf[ind,(max(b[i-1],0)+1):b[i]] <- -1
}
xcf <- xcf[,-b]
x.all <- xcf
# Identify label ijkl for yield
rownames(y.all) <- as.character(1:n.all)
for (ijkl in 1:n.all) {
add.i <- colnames(x.all)[which(x.all[ijkl,]!=0)][1]
add.I <- sum(grepl("additive",colnames(x.all)[which(x.all[ijkl,]!=0)]))
if (add.I>1) add.i <- "additive 22"                                          # this is "additive 22"
ary.j <- colnames(x.all)[which(x.all[ijkl,]!=0)][1+add.I]
ary.J <- sum(grepl("aryl_halide",colnames(x.all)[which(x.all[ijkl,]!=0)]))
if (ary.J>1) ary.j <- "aryl_halide 15"                                       # this is "aryl_halide 15"
bas.k <- colnames(x.all)[which(x.all[ijkl,]!=0)][1+add.I+ary.J]
bas.K <- sum(grepl("base",colnames(x.all)[which(x.all[ijkl,]!=0)]))
if (bas.K>1) bas.k <- "base 1"                                              # this is "base 1"
lig.l <- colnames(x.all)[which(x.all[ijkl,]!=0)][1+add.I+ary.J+bas.K]
lig.L <- sum(grepl("ligand",colnames(x.all)[which(x.all[ijkl,]!=0)]))
if (lig.L>1) lig.l <- "ligand 3"                                            # this is "ligand 3"
rownames(y.all)[ijkl] <- paste(add.i, ary.j, bas.k, lig.l, sep=":")
}
# Mixed terms with 2-levels combinations
xx <- rep(1,nrow(xcf))
bb <- cumsum(a-1)
for (j in 1:3) {
for (i in (max(bb[j-1],0)+1):bb[j]) {
xxp <- xcf[,i]*xcf[,-c(1:bb[j])]
colnames(xxp) <- paste(colnames(xcf)[i],colnames(xcf[,-c(1:bb[j])]),sep=":")
xx <- cbind(xx,xxp)
}
}
xx <- cbind(xcf,xx[,-1])
xx.all <- xx
# Mixed terms with 3-levels combinations
xcf1 <- xcf
colnames(xcf1) <- c(rep("additive",21),rep("aryl_halide",14),rep("base",2),rep("ligand",3))
xx1 <- xx[,-c(1:40)]
xxx <- rep(1,nrow(xcf))
ind <- rep(TRUE,ncol(xx1))
for (j in 1:2) {
ind <- as.logical((!grepl(colnames(xcf1)[bb[j]],colnames(xx1)))*(ind))
for (i in (max(bb[j-1],0)+1):bb[j]) {
xxxp <- xcf[,i]*xx1[,ind]
colnames(xxxp) <- paste(colnames(xcf)[i],colnames(xx1)[ind],sep=":")
xxx <- cbind(xxx,xxxp)
}
}
xxx <- cbind(xx,xxx[,-1])
xxx.all <- xxx
# Mixed terms with 4-levels combinations
xxx1 <- xxx[,-c(1:515)]
xxxx <- rep(NA,nrow(xcf))
for (i in 1:21) {
xxxxp <- xcf[,i]*xxx1[,1597:1680]
colnames(xxxxp) <- paste(colnames(xcf)[i],colnames(xxx1)[1597:1680],sep=":")
xxxx <- cbind(xxxx,xxxxp)
}
xxxx <- cbind(xxx,xxxx[,-1])
xxxx.all <- as.matrix(xxxx)
rownames(xxxx.all) <- rownames(y.all)
# Eigenvalues
L1 <- 22
L2 <- 15
L3 <- 3
L4 <- 4
prod.all <- c()
for (l1 in c(1,L1)) {
for (l2 in c(1,L2)) {
for (l3 in c(1,L3)) {
for (l4 in c(1,L4)) {
prod.all <- c(prod.all, l1*l2*l3*l4)
}
}
}
}
prod.all <- prod.all/(L1*L2*L3*L4)
prod.all <- sort(unique(prod.all),decreasing=TRUE)
rho.all <- length(prod.all)
pdf("_all_EVA.pdf", height=10, width=10)
df.all.rsq <- data.frame(x=1:length(prod.all),y=prod.all)
ggplot(data = df.all.rsq,aes(x = x, y = y)) +
geom_point(size=4,col="#0073C2FF")  +
theme(text = element_text(size = 40)) +
theme(plot.title = element_textbox(hjust = 0.5, margin = ggplot2::margin(t = 5, b = 5))) +
labs(title = "Singular values of A") +
xlab("Index")+ylab("Singluar values")
dev.off()
# Combinations
ind.1w <- 1:ncol(x.all)
ind.2w <- (ncol(x.all)+1):ncol(xx.all)
ind.3w <- (ncol(xx.all)+1):ncol(xxx.all)
ind.4w <- (ncol(xxx.all)+1):ncol(xxxx.all)
###############################
## Factorization PLSGLM
###############################
# Initialize table
df.yields.colnames <- c("addi C3 NMR shift", "aryl hali C1 NMR", "base N1 elec charge", "liga C10 NMR shift",
"y.obs", "mu.hat", "g(mu.hat)", "intercept",
"addi", "aryl", "base", "liga",
"addi:aryl", "addi:base", "addi:liga", "aryl:base", "aryl:liga", "base:liga",
"addi:aryl:base", "addi:aryl:liga", "addi:base:liga", "aryl:base:liga", "addi:aryl:base:liga")
df.yields <- data.frame(matrix(ncol=length(df.yields.colnames),nrow=0))
colnames(df.yields) <- df.yields.colnames
# Get coefficients of best model
coef.plsglm.all <- read.table(file="_all_plsglm_coeff.txt")
df.yields
xxx.all
xc
colnames(xc)
xc[which(y.all==max(y.all)),]
