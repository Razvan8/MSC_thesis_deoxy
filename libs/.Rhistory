source(file.path(libs_path,'WeakHierNetSeq12_3way.R'))
r_1way<-y_all - coefs[1]-X[,range_main]%*%coeffs_main
print(sum(  (y-mean(y))^2))
print(sum(r_1way^2))
#print(sum(r_2way^2))
beta_bound<-0.5*coeffs_main
beta_bound
lmd<-10
t<-1e-5
myseq12<-WeakHierNet_seq_2way3(X=X_2way, theta_init = theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3, scale=FALSE)
fitted<-myseq12$fit(X=X_2way, theta_init= theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3)
dim(X_only_main)[2]
l1+l2+l3
theta_init<-get_theta_from_theta_vec_2way3(coefs[range_theta],l1=l1,l2=l2, l3=l3)
dim(theta_init)
theta_init<-matrix(0, nrow=dim(X_only_main)[2], ncol = dim(X_only_main)[2])
lmd<-10
t<-1e-5
theta_init<-get_theta_from_theta_vec_2way3(coefs[range_theta],l1=l1,l2=l2, l3=l3)
dim(theta_init)
myseq12<-WeakHierNet_seq_2way3(X=X_2way, theta_init = theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3, scale=FALSE)
fitted<-myseq12$fit(X=X_2way, theta_init= theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3)
all_beta_functions(theta_true, c(fitted$vec_theta_hat))
lmd<-10
t<-1e-5
myseq12<-WeakHierNet_seq_2way3(X=X_2way, theta_init = theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3, scale=FALSE)
fitted<-myseq12$fit(X=X_2way, theta_init= theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3)
all_beta_functions(theta_true, c(fitted$vec_theta_hat))
theta_init<-matrix(0, nrow=dim(X_only_main)[2], ncol = dim(X_only_main)[2])
myseq12<-WeakHierNet_seq_2way3(X=X_2way, theta_init = theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3, scale=FALSE)
fitted<-myseq12$fit(X=X_2way, theta_init= theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3)
all_beta_functions(theta_true, c(fitted$vec_theta_hat))
print(fitted$vec_theta_hat[0:30])
print(theta_true[0:30])
r_1way<-y_all - coefs[1]-X[,range_main]%*%coeffs_main
print(sum(  (y-mean(y))^2))
print(sum(r_1way^2))
#print(sum(r_2way^2))
beta_bound<-1*coeffs_main
beta_bound
lmd<-10
t<-1e-5
theta_init<-get_theta_from_theta_vec_2way3(coefs[range_theta],l1=l1,l2=l2, l3=l3)
dim(theta_init)
myseq12<-WeakHierNet_seq_2way3(X=X_2way, theta_init = theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3, scale=FALSE)
fitted<-myseq12$fit(X=X_2way, theta_init= theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3)
all_beta_functions(theta_true, c(fitted$vec_theta_hat))
print(fitted$vec_theta_hat[0:30])
print(theta_true[0:30])
r_1way<-y_all - coefs[1]-X[,range_main]%*%coeffs_main
print(sum(  (y-mean(y))^2))
print(sum(r_1way^2))
#print(sum(r_2way^2))
beta_bound<-2*coeffs_main
beta_bound
lmd<-10
t<-1e-5
theta_init<-get_theta_from_theta_vec_2way3(coefs[range_theta],l1=l1,l2=l2, l3=l3)
dim(theta_init)
myseq12<-WeakHierNet_seq_2way3(X=X_2way, theta_init = theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3, scale=FALSE)
fitted<-myseq12$fit(X=X_2way, theta_init= theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3)
all_beta_functions(theta_true, c(fitted$vec_theta_hat))
print(fitted$vec_theta_hat[0:30])
print(theta_true[0:30])
r_1way<-y_all - coefs[1]-X[,range_main]%*%coeffs_main
print(sum(  (y-mean(y))^2))
print(sum(r_1way^2))
#print(sum(r_2way^2))
beta_bound<-4*coeffs_main
beta_bound
lmd<-10
t<-1e-5
theta_init<-get_theta_from_theta_vec_2way3(coefs[range_theta],l1=l1,l2=l2, l3=l3)
dim(theta_init)
myseq12<-WeakHierNet_seq_2way3(X=X_2way, theta_init = theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3, scale=FALSE)
fitted<-myseq12$fit(X=X_2way, theta_init= theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3)
all_beta_functions(theta_true, c(fitted$vec_theta_hat))
print(fitted$vec_theta_hat[0:30])
print(theta_true[0:30])
r_1way<-y_all - coefs[1]-X[,range_main]%*%coeffs_main
print(sum(  (y-mean(y))^2))
print(sum(r_1way^2))
#print(sum(r_2way^2))
beta_bound<-10*coeffs_main
beta_bound
lmd<-10
t<-1e-5
theta_init<-get_theta_from_theta_vec_2way3(coefs[range_theta],l1=l1,l2=l2, l3=l3)
dim(theta_init)
myseq12<-WeakHierNet_seq_2way3(X=X_2way, theta_init = theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3, scale=FALSE)
fitted<-myseq12$fit(X=X_2way, theta_init= theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3)
all_beta_functions(theta_true, c(fitted$vec_theta_hat))
print(fitted$vec_theta_hat[0:30])
print(theta_true[0:30])
beta_bound<-100*coeffs_main
beta_bound
lmd<-10
t<-1e-5
theta_init<-get_theta_from_theta_vec_2way3(coefs[range_theta],l1=l1,l2=l2, l3=l3)
dim(theta_init)
myseq12<-WeakHierNet_seq_2way3(X=X_2way, theta_init = theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3, scale=FALSE)
fitted<-myseq12$fit(X=X_2way, theta_init= theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3)
all_beta_functions(theta_true, c(fitted$vec_theta_hat))
print(fitted$vec_theta_hat[0:30])
print(theta_true[0:30])
r_1way<-y_all - coefs[1]-X[,range_main]%*%coeffs_main
print(sum(  (y-mean(y))^2))
print(sum(r_1way^2))
#print(sum(r_2way^2))
beta_bound<-100*coeffs_main
beta_bound
lmd<-0.1
t<-1e-5
theta_init<-get_theta_from_theta_vec_2way3(coefs[range_theta],l1=l1,l2=l2, l3=l3)
dim(theta_init)
myseq12<-WeakHierNet_seq_2way3(X=X_2way, theta_init = theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3, scale=FALSE)
fitted<-myseq12$fit(X=X_2way, theta_init= theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3)
all_beta_functions(theta_true, c(fitted$vec_theta_hat))
print(fitted$vec_theta_hat[0:30])
print(theta_true[0:30])
r_1way<-y_all - coefs[1]-X[,range_main]%*%coeffs_main
print(sum(  (y-mean(y))^2))
print(sum(r_1way^2))
#print(sum(r_2way^2))
beta_bound<-100*coeffs_main
beta_bound
lmd<-0
t<-1e-5
theta_init<-get_theta_from_theta_vec_2way3(coefs[range_theta],l1=l1,l2=l2, l3=l3)
dim(theta_init)
myseq12<-WeakHierNet_seq_2way3(X=X_2way, theta_init = theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3, scale=FALSE)
fitted<-myseq12$fit(X=X_2way, theta_init= theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3)
all_beta_functions(theta_true, c(fitted$vec_theta_hat))
print(fitted$vec_theta_hat[0:30])
print(theta_true[0:30])
all_beta_functions(theta_true, c(2*fitted$vec_theta_hat))
r_1way<-y_all - coefs[1]-X[,range_main]%*%coeffs_main
print(sum(  (y-mean(y))^2))
print(sum(r_1way^2))
#print(sum(r_2way^2))
beta_bound<-100*coeffs_main
beta_bound
lmd<-10
t<-1e-5
theta_init<-get_theta_from_theta_vec_2way3(coefs[range_theta],l1=l1,l2=l2, l3=l3)
dim(theta_init)
myseq12<-WeakHierNet_seq_2way3(X=X_2way, theta_init = theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3, scale=FALSE)
fitted<-myseq12$fit(X=X_2way, theta_init= theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3)
all_beta_functions(theta_true, c(fitted$vec_theta_hat))
all_beta_functions(theta_true, 2*c(fitted$vec_theta_hat))
all_beta_functions(theta_true, 3*c(fitted$vec_theta_hat))
self$theta_hat
fittedf$theta_hat
fitted$theta_hat
print(fitted$vec_theta_hat[0:30])
source(file.path(libs_path,'WeakHierNetSeq12_3way.R'))
r_1way<-y_all - coefs[1]-X[,range_main]%*%coeffs_main
print(sum(  (y-mean(y))^2))
print(sum(r_1way^2))
#print(sum(r_2way^2))
beta_bound<-100*coeffs_main
beta_bound
lmd<-10
t<-1e-5
theta_init<-get_theta_from_theta_vec_2way3(coefs[range_theta],l1=l1,l2=l2, l3=l3)
dim(theta_init)
myseq12<-WeakHierNet_seq_2way3(X=X_2way, theta_init = theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3, scale=FALSE)
fitted<-myseq12$fit(X=X_2way, theta_init= theta_init, y=r_1way, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-7, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3)
warnings()
assert <- function(condition, message) {
if (!condition) stop(message)
}
check_and_zero_diagonal <- function(matrix) {
# Check if the matrix is square
if (nrow(matrix) != ncol(matrix)) {
stop("The matrix must be square.")
}
# Flag to determine if all diagonal elements are initially zero
all_zero <- TRUE
# Check the diagonal elements
for (i in 1:nrow(matrix)) {
if (matrix[i, i] != 0) {
all_zero <- FALSE
break
}
}
# Print a message if any diagonal element is not zero
if (!all_zero) {
print("Not all diagonal elements are zero. Setting them to zero. This might be a sign of numerical instability.")
}
# Set all diagonal elements to zero
for (i in 1:nrow(matrix)) {
matrix[i, i] <- 0
}
return(matrix)
}
matrix <- matrix(c(1, 2, 3, 4, 0, 6, 7, 8, 0), nrow = 3, byrow = TRUE)
print("Original matrix:")
print(matrix)
matrix <- check_and_zero_diagonal(matrix)
print("Modified matrix:")
print(matrix)
beta<-c(0,1,0)
matrix<-matrix(3,nrow=3,ncol=3)
test_hierarchy_layer12 <- function(beta,theta, strong=FALSE)
{ hierarchy_break<-0
theta<- check_and_zero_diagonal(theta)
p<-length(c(beta))
assert(dim(theta)==c(p,p), "The dimensions are not ok in the hierarchy test")
zeros_positions<-which(beta==0)
if (strong==TRUE)
{for  (i in c(1:p))
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1}
}}
}
if (strong==FALSE)
{for  (i in zeros_positions)
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1}
}}
}
print(hierarchy_break)
}
beta<-c(0,1,0)
matrix<-matrix(3,nrow=3,ncol=3)
test_hierarchy_layer12(beta, matrix)
assert <- function(condition, message) {
if (!condition) stop(message)
}
check_and_zero_diagonal <- function(matrix, strong=FALSE) {
# Check if the matrix is square
if (nrow(matrix) != ncol(matrix)) {
stop("The matrix must be square.")
}
# Flag to determine if all diagonal elements are initially zero
all_zero <- TRUE
# Check the diagonal elements
for (i in 1:nrow(matrix)) {
if (matrix[i, i] != 0) {
all_zero <- FALSE
break
}
}
# Print a message if any diagonal element is not zero
if (!all_zero) {
print("Not all diagonal elements are zero. Setting them to zero. This might be a sign of numerical instability.")
}
# Set all diagonal elements to zero
for (i in 1:nrow(matrix)) {
matrix[i, i] <- 0
}
return(matrix)
}
test_hierarchy_layer12 <- function(beta,theta, strong=FALSE)
{ hierarchy_break<-0
theta<- check_and_zero_diagonal(theta)
p<-length(c(beta))
assert(all(dim(theta)==c(p,p)), "The dimensions are not ok in the hierarchy test")
zeros_positions<-which(beta==0)
if (strong==TRUE)
{for  (i in c(1:p))
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1}
}}
}
if (strong==FALSE)
{for  (i in zeros_positions)
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1}
}}
}
print(hierarchy_break)
}
beta<-c(0,1,0)
matrix<-matrix(3,nrow=3,ncol=3)
test_hierarchy_layer12(beta, matrix)
print(matrix)
test_hierarchy_layer12 <- function(beta,theta, strong=FALSE)
{ hierarchy_break<-0
theta<- check_and_zero_diagonal(theta)
p<-length(c(beta))
assert(all(dim(theta)==c(p,p)), "The dimensions are not ok in the hierarchy test")
zeros_positions<-which(beta==0)
print(zeros_positions)
if (strong==TRUE)
{for  (i in c(1:p))
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1}
}}
}
if (strong==FALSE)
{for  (i in zeros_positions)
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1}
}}
}
print(hierarchy_break)
}
beta<-c(0,1,0)
matrix<-matrix(3,nrow=3,ncol=3)
print(matrix)
test_hierarchy_layer12(beta, matrix)
test_hierarchy_layer12 <- function(beta,theta, strong=FALSE)
{ hierarchy_break<-0
theta<- check_and_zero_diagonal(theta)
p<-length(c(beta))
assert(all(dim(theta)==c(p,p)), "The dimensions are not ok in the hierarchy test")
zeros_positions<-which(beta==0)
print(zeros_positions)
if (strong==TRUE)
{for  (i in c(1:p))
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1
cat(i,j)}
}}
}
if (strong==FALSE)
{for  (i in zeros_positions)
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1}
}}
}
print(hierarchy_break)
}
beta<-c(0,1,0)
matrix<-matrix(3,nrow=3,ncol=3)
print(matrix)
test_hierarchy_layer12(beta, matrix)
test_hierarchy_layer12 <- function(beta,theta, strong=FALSE)
{ hierarchy_break<-0
theta<- check_and_zero_diagonal(theta)
p<-length(c(beta))
assert(all(dim(theta)==c(p,p)), "The dimensions are not ok in the hierarchy test")
zeros_positions<-which(beta==0)
print(zeros_positions)
if (strong==TRUE)
{for  (i in c(1:p))
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1
cat(i,j)}
}}
}
if (strong==FALSE)
{for  (i in zeros_positions)
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1
cat(i,j)}
}}
}
print(hierarchy_break)
}
beta<-c(0,1,0)
matrix<-matrix(3,nrow=3,ncol=3)
print(matrix)
test_hierarchy_layer12(beta, matrix)
test_hierarchy_layer12 <- function(beta,theta, strong=FALSE)
{ hierarchy_break<-0
theta<- check_and_zero_diagonal(theta)
p<-length(c(beta))
assert(all(dim(theta)==c(p,p)), "The dimensions are not ok in the hierarchy test")
zeros_positions<-which(beta==0)
print(zeros_positions)
if (strong==TRUE)
{for  (i in c(1:p))
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1
cat(i,j)}
}}
}
if (strong==FALSE)
{for  (i in zeros_positions)
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1
cat('a',i,j,'b')}
}}
}
print(hierarchy_break)
}
beta<-c(0,1,0)
matrix<-matrix(3,nrow=3,ncol=3)
print(matrix)
test_hierarchy_layer12(beta, matrix)
test_hierarchy_layer12 <- function(beta,theta, strong=FALSE)
{ hierarchy_break<-0
theta<- check_and_zero_diagonal(theta)
p<-length(c(beta))
assert(all(dim(theta)==c(p,p)), "The dimensions are not ok in the hierarchy test")
zeros_positions<-which(beta==0)
print(zeros_positions)
if (strong==TRUE)
{for  (i in c(1:p))
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1
cat(i,j)}
}}
}
if (strong==FALSE)
{for  (i in zeros_positions)
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1/2 ##because it appears 2 times
cat('a',i,j,'b')}
}}
}
print(hierarchy_break)
}
beta<-c(0,1,0)
matrix<-matrix(3,nrow=3,ncol=3)
print(matrix)
test_hierarchy_layer12(beta, matrix)
test_hierarchy_layer12 <- function(beta,theta, strong=FALSE)
{ hierarchy_break<-0
theta<- check_and_zero_diagonal(theta)
p<-length(c(beta))
assert(all(dim(theta)==c(p,p)), "The dimensions are not ok in the hierarchy test")
zeros_positions<-which(beta==0)
print(zeros_positions)
if (strong==TRUE)
{for  (i in c(1:p))
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1}
}}
hierarchy_break<-hierarchy_break- zeros_positions*(zeros_positions-1)/2 ###combinations of 0pos appear twice
}
if (strong==FALSE)
{for  (i in zeros_positions)
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1/2} ##because it appears 2 times
}}
}
print(hierarchy_break)
}
beta<-c(0,1,0)
matrix<-matrix(3,nrow=3,ncol=3)
print(matrix)
test_hierarchy_layer12(beta=beta, theta = matrix, strong = TRUE)
test_hierarchy_layer12 <- function(beta,theta, strong=FALSE)
{ hierarchy_break<-0
theta<- check_and_zero_diagonal(theta)
p<-length(c(beta))
assert(all(dim(theta)==c(p,p)), "The dimensions are not ok in the hierarchy test")
zeros_positions<-which(beta==0)
#print(zeros_positions)
if (strong==TRUE)
{for  (i in c(1:p))
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1}
}}
hierarchy_break<-hierarchy_break- zeros_positions*(zeros_positions-1)/2 ###combinations of 0pos appear twice
}
if (strong==FALSE)
{for  (i in zeros_positions)
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1/2} ##because it appears 2 times
}}
}
print(hierarchy_break)
}
beta<-c(0,1,0)
matrix<-matrix(3,nrow=3,ncol=3)
print(matrix)
test_hierarchy_layer12(beta=beta, theta = matrix, strong = TRUE)
test_hierarchy_layer12 <- function(beta,theta, strong=FALSE)
{ hierarchy_break<-0
theta<- check_and_zero_diagonal(theta)
p<-length(c(beta))
assert(all(dim(theta)==c(p,p)), "The dimensions are not ok in the hierarchy test")
zeros_positions<-which(beta==0)
#print(zeros_positions)
if (strong==TRUE)
{for  (i in c(1:p))
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1}
}}
hierarchy_break<-hierarchy_break- length(zeros_positions)*(length(zeros_positions)-1)/2 ###combinations of 0pos appear twice
}
if (strong==FALSE)
{for  (i in zeros_positions)
{for (j in zeros_positions)
{ if (theta[i,j]+theta[j,i]!=0)
{hierarchy_break<-hierarchy_break+1/2} ##because it appears 2 times
}}
}
print(hierarchy_break)
}
beta<-c(0,1,0)
matrix<-matrix(3,nrow=3,ncol=3)
print(matrix)
test_hierarchy_layer12(beta=beta, theta = matrix, strong = TRUE)
beta<-c(0,1,1)
matrix<-matrix(3,nrow=3,ncol=3)
print(matrix)
test_hierarchy_layer12(beta=beta, theta = matrix, strong = TRUE)
