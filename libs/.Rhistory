beta_2way_shim_recovered<-  get_theta_vec_2way3( get_all_theta(beta_2way_shim_matrix, l1=l1, l2=l2, l3=l3, threshold = 1e-4), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_shim_recovered<- get_psi_vec3( get_all_psi(beta_3way_shim_table, l1=l1, l2=l2, l3=l3, threshold = 1e-4) , l1=l1+1, l2=l2+1, l3=l3+1)
beta_2way_shim_matrix<-get_theta_from_theta_vec_2way3(beta_2way_shim_recovered,l1=l1,l2=l2, l3=l3)
beta_3way_shim_table<-get_psi_from_psi_vec3(beta_3way_shim_recovered,l1=l1,l2=l2, l3=l3)
test_hierarchy_layer12(beta_main_shim_recovered,beta_2way_shim_matrix, strong = TRUE)
test_hierarchy_layer23(beta_2way_shim_matrix, beta_3way_shim_table, strong = TRUE)
test_hierarchy_layer12(beta_main_shim_recovered,beta_2way_shim_matrix, strong = TRUE)
beta_main_shim_recovered<- get_all_beta(beta_main_shim, l1=l1, l2=l2, l3=l3, threshold = 1e-4)
beta_2way_shim_recovered<-  get_theta_vec_2way3( get_all_theta(beta_2way_shim_matrix, l1=l1, l2=l2, l3=l3, threshold = 1e-4), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_shim_recovered<- get_psi_vec3( get_all_psi(beta_3way_shim_table, l1=l1, l2=l2, l3=l3, threshold = 1e-4) , l1=l1+1, l2=l2+1, l3=l3+1)
beta_2way_shim_matrix<-get_theta_from_theta_vec_2way3(beta_2way_shim_recovered,l1=l1+1,l2=l2+1, l3=l3+1)
beta_3way_shim_table<-get_psi_from_psi_vec3(beta_3way_shim_recovered,l1=l1+1,l2=l2+1, l3=l3+1)
test_hierarchy_layer12(beta_main_shim_recovered,beta_2way_shim_matrix, strong = TRUE)
test_hierarchy_layer23(beta_2way_shim_matrix, beta_3way_shim_table, strong = TRUE)
libs_path<-file.path("..","libs")
source(file.path(libs_path,'helper_functions.R'))
source(file.path(libs_path,'Shim3way_class.R'))
source(file.path(libs_path,'hierarchy_tests.R'))
source(file.path(libs_path,'recover_parameters.R'))
library(glmnet)
data<-load_deoxi_flourination()
print(max(data$yield))
hist(data$prob)
which(data$yield_corrected==100)
which(data$yield>100)
data
plot_yield_histo(data)
levels(data$a)
levels(data$b)
levels(data$s)
y_true<-data$prob*100
X_data<-data[c('a','b','s')]
X_data <- lapply(X_data, as.factor)
X_data <- as.data.frame(X_data)  # Convert back to data frame
# Create the dummy matrix without intercept
X_dummy <- model.matrix(~ . - 1, data = X_data, contrasts.arg = lapply(X_data, contrasts, contrasts = FALSE))
# Find rows where the 37th column has value 1
rows_to_replace1 <- X_dummy[,37] == 1
# Replace values in columns 1 to 36 with -1 for these rows
X_dummy[rows_to_replace1, 1:36] <- -1
rows_to_replace2 <- X_dummy[,41] == 1
X_dummy[rows_to_replace2, 38:40] <- -1
rows_to_replace3 <- X_dummy[,46] == 1
X_dummy[rows_to_replace3, 42:45] <- -1
print(dim(X_dummy))
print(colSums(X_dummy))
##only once
X_dummy<-X_dummy[,-c(37,41,46)]
print(dim(X_dummy))
print(colSums(X_dummy))
###
new_colnames <- c(paste0("a.", 1:36), paste0("b.", 1:3), paste0("s.", 1:4))
colnames(X_dummy) <- new_colnames
X_dummy<-as.data.frame(X_dummy, col.names =TRUE)
for (i in 1:36) {
for (jk in 37:43) {
X_dummy[, paste0(colnames(X_dummy)[i], ':', colnames(X_dummy)[jk])] <-X_dummy[,i]*X_dummy[,jk]
}
}
for (j in c(37:39))
{for (k in c(40:43))
{
X_dummy[,paste0((colnames(X_dummy)[j]),':', colnames(X_dummy[k]) ) ] <- X_dummy[,j]*X_dummy[,k]
}
}
for (i in c(1:36))
{for (j in c(37:39))
{for (k in c(40:43))
{
X_dummy[,paste0( (colnames(X_dummy)[i]), ':' , colnames(X_dummy[j]), ":",  colnames(X_dummy[k]) ) ] <- X_dummy[,i]*X_dummy[,j]*X_dummy[,k]
}
}}
X<-as.matrix(X_dummy)
y<-y_true
################################################################ USE LASSO AND MY CLASS ON DATA #################################
l1=36
l2=3
l3=4
#print(beta_true)
range_main<-c(1: (l1+l2+l3) )
range_theta<-c( (l1+l2+l3+1) : (l1+l2+l3+l1*(l2+l3)+l2*l3) )
range_psi<-c(  (l1+l2+l3+ 1+ l1*(l2+l3)+l2*l3): (l1+l2+l3+ l1*(l2+l3)+l2*l3+l1*l2*l3) )
y_centered<-y-mean(y)
class(y_centered)
####START LASSO
cv_fit <- cv.glmnet(X, y_centered, alpha = 1)
best_lambda <- cv_fit$lambda.min
cat("best lambda: ",best_lambda)
#best_lambda<-0.1
lasso_model <- glmnet(X, y_centered, alpha = 1, intercept = FALSE, standardize = FALSE, lambda=best_lambda)
#init for shim
coefs_lasso<-coefficients(lasso_model)[-1]
beta_main_lasso<-coefs_lasso[range_main]
beta_2way_lasso<-coefs_lasso[range_theta]
beta_3way_lasso<-coefs_lasso[range_psi]
beta_2way_lasso_without_gamma<-get_beta_vec_2way(beta_main_lasso,l1=l1,l2=l2,l3=l3,only_beta = TRUE)
beta_3way_lasso_without_delta<- get_beta_vec_3way(beta_2way_lasso, l1=l1, l2=l2, l3=l3, only_beta = TRUE)
print("Percentages of 0s for main 2way and 3way LASSO")
sum(beta_main_lasso==0)/length(beta_main_lasso)
sum(beta_2way_lasso==0)/ length(beta_2way_lasso)
sum(beta_3way_lasso==0)/ length(beta_3way_lasso)
predict_lasso<-predict(lasso_model, s=best_lambda, newx = X)
print(r2(y_centered, predict_lasso))
beta_hat<-beta_main_lasso
gamma_hat<- beta_2way_lasso/beta_2way_lasso_without_gamma
gamma_hat[is.nan(gamma_hat)]<-0
gamma_hat[!is.finite(gamma_hat)]<-0 #this is 0 in shim case
delta_hat<- beta_3way_lasso/beta_3way_lasso_without_delta
delta_hat[!is.finite(delta_hat)]<-0
delta_hat[is.nan(delta_hat)]<-0
lambda_beta<-350
lambda_gamma<-18000
lambda_delta<-900
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta,
lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1, w_gamma = 1, w_delta = 1, tol=1e-2)
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
beta_all_shim<-fitted$beta_all
beta_main_shim<-beta_all_shim[range_main]
beta_2way_shim<-beta_all_shim[range_theta]
beta_3way_shim<-beta_all_shim[range_psi]
print("Percentages of 0s for main 2way and 3way SHIM")
sum(beta_main_shim==0)/length(beta_main_shim)
sum(beta_2way_shim==0)/ length(beta_2way_shim)
sum(beta_3way_shim==0)/ length(beta_3way_shim)
##hierarchy tests
beta_2way_shim_matrix<-get_theta_from_theta_vec_2way3(beta_2way_shim,l1=l1,l2=l2, l3=l3)
beta_3way_shim_table<-get_psi_from_psi_vec3(beta_3way_shim,l1=l1,l2=l2, l3=l3)
test_hierarchy_layer12(beta_main_shim,beta_2way_shim_matrix, strong = TRUE)
test_hierarchy_layer23(beta_2way_shim_matrix, beta_3way_shim_table, strong = TRUE)
### SHIM FOR RECOVERED DATA #############
beta_2way_shim_matrix<-get_theta_from_theta_vec_2way3(beta_2way_shim,l1=l1,l2=l2, l3=l3)
beta_3way_shim_table<-get_psi_from_psi_vec3(beta_3way_shim,l1=l1, l2=l2, l3=l3)
beta_main_shim_recovered<- get_all_beta(beta_main_shim, l1=l1, l2=l2, l3=l3, threshold = 0)
beta_2way_shim_recovered<-  get_theta_vec_2way3( get_all_theta(beta_2way_shim_matrix, l1=l1, l2=l2, l3=l3, threshold = 0), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_shim_recovered<- get_psi_vec3( get_all_psi(beta_3way_shim_table, l1=l1, l2=l2, l3=l3, threshold = 0) , l1=l1+1, l2=l2+1, l3=l3+1)
print("results shim recovered")
all_beta_functions(beta_main_recovered, beta_main_shim_recovered)
all_beta_functions(beta_2way_recovered, beta_2way_shim_recovered)
all_beta_functions(beta_3way_recovered, beta_3way_shim_recovered)
beta_2way_shim_matrix<-get_theta_from_theta_vec_2way3(beta_2way_shim_recovered,l1=l1+1,l2=l2+1, l3=l3+1)
beta_3way_shim_table<-get_psi_from_psi_vec3(beta_3way_shim_recovered,l1=l1+1,l2=l2+1, l3=l3+1)
test_hierarchy_layer12(beta_main_shim_recovered,beta_2way_shim_matrix, strong = TRUE)
test_hierarchy_layer23(beta_2way_shim_matrix, beta_3way_shim_table, strong = TRUE)
print("Percentages of 0s for main 2way and 3way SHIM")
sum(beta_main_shim==0)/length(beta_main_shim)
sum(beta_2way_shim==0)/ length(beta_2way_shim)
sum(beta_3way_shim==0)/ length(beta_3way_shim)
cv_fit <- cv.glmnet(X, y_centered, alpha = 1)
best_lambda <- cv_fit$lambda.min
cat("best lambda: ",best_lambda)
best_lambda<-0.08
lasso_model <- glmnet(X, y_centered, alpha = 1, intercept = FALSE, standardize = FALSE, lambda=best_lambda)
#init for shim
coefs_lasso<-coefficients(lasso_model)[-1]
beta_main_lasso<-coefs_lasso[range_main]
beta_2way_lasso<-coefs_lasso[range_theta]
beta_3way_lasso<-coefs_lasso[range_psi]
beta_2way_lasso_without_gamma<-get_beta_vec_2way(beta_main_lasso,l1=l1,l2=l2,l3=l3,only_beta = TRUE)
beta_3way_lasso_without_delta<- get_beta_vec_3way(beta_2way_lasso, l1=l1, l2=l2, l3=l3, only_beta = TRUE)
print("Percentages of 0s for main 2way and 3way LASSO")
sum(beta_main_lasso==0)/length(beta_main_lasso)
sum(beta_2way_lasso==0)/ length(beta_2way_lasso)
sum(beta_3way_lasso==0)/ length(beta_3way_lasso)
predict_lasso<-predict(lasso_model, s=best_lambda, newx = X)
print(r2(y_centered, predict_lasso))
lambda_beta<-50
lambda_gamma<-8000
lambda_delta<-800
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta,
lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1, w_gamma = 1, w_delta = 1, tol=1e-2)
lambda_beta<-150
lambda_gamma<-8000
lambda_delta<-800
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta,
lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1, w_gamma = 1, w_delta = 1, tol=1e-2)
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
print("Percentages of 0s for main 2way and 3way SHIM")
sum(beta_main_shim==0)/length(beta_main_shim)
sum(beta_2way_shim==0)/ length(beta_2way_shim)
sum(beta_3way_shim==0)/ length(beta_3way_shim)
lambda_beta<-80
lambda_gamma<-5000
lambda_delta<-800
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta,
lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1, w_gamma = 1, w_delta = 1, tol=1e-2)
lambda_beta<-100
lambda_gamma<-6000
lambda_delta<-800
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta,
lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1, w_gamma = 1, w_delta = 1, tol=1e-2)
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
print("Percentages of 0s for main 2way and 3way SHIM")
sum(beta_main_shim==0)/length(beta_main_shim)
sum(beta_2way_shim==0)/ length(beta_2way_shim)
sum(beta_3way_shim==0)/ length(beta_3way_shim)
beta_all_shim<-fitted$beta_all
beta_main_shim<-beta_all_shim[range_main]
beta_2way_shim<-beta_all_shim[range_theta]
beta_3way_shim<-beta_all_shim[range_psi]
print("Percentages of 0s for main 2way and 3way SHIM")
sum(beta_main_shim==0)/length(beta_main_shim)
sum(beta_2way_shim==0)/ length(beta_2way_shim)
sum(beta_3way_shim==0)/ length(beta_3way_shim)
lambda_beta<-100
lambda_gamma<-7000
lambda_delta<-5000
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta,
lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1, w_gamma = 1, w_delta = 1, tol=1e-2)
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
beta_all_shim<-fitted$beta_all
beta_main_shim<-beta_all_shim[range_main]
beta_2way_shim<-beta_all_shim[range_theta]
beta_3way_shim<-beta_all_shim[range_psi]
print("Percentages of 0s for main 2way and 3way SHIM")
sum(beta_main_shim==0)/length(beta_main_shim)
sum(beta_2way_shim==0)/ length(beta_2way_shim)
sum(beta_3way_shim==0)/ length(beta_3way_shim)
fct<-function(x)
{res<-coefs[1] + x*(coefs[2] +lambda*sign(x)) + x^2 * (coefs[3]) +x^3 *(coefs[4]) +x^4 *(coefs[5])
}
coefs<-c(1,-1,0,0,2)
lambda<-1
result_optimize <- optimize(fct, interval = c(-3, 5))
result_optimize
result_optimize <- optimize(fct, interval = c(3, 5))
result_optimize
result_optimize$minimum
poly_lasso_min<-function(coefs, lambda, old_x=0){ #finds the min for a< a=0, a>0 gets the min out of all
##long term take care if 2 with same min smart decision
##coefs[1]=a0
##Minimum using poly and derivative 0
coefs_without_lambda<-coefs
#case 1 sign positive
coefs_poz<-coefs_without_lambda
coefs_poz[2]<-coefs_poz[2]+lambda
poz<-poly_min_sign(coefs=coefs_poz, positive = TRUE)
x_min_poz<-poz[1]
val_min_poz<-poz[2]
#print("starts neg")
#case 2 sign negative
coefs_neg<-coefs_without_lambda
coefs_neg[2]<-coefs_neg[2]-lambda
neg<-poly_min_sign(coefs=coefs_neg, positive = FALSE)
x_min_neg<-neg[1]
val_min_neg<-neg[2]
#print("start 0")
#case 3 sign is 0
x_zeros<-0
val_min_zeros<-coefs[1]
all_mins<-c(val_min_neg, val_min_poz, val_min_zeros)
all_x_min<-c(x_min_neg, x_min_poz, x_zeros)#
idx_min<-which.min(all_mins)
x_min<-all_x_min[idx_min]
x_min<-unlist(x_min)
poly_min_val<-min(all_mins)
### MINIMUM WITH optimize
fct<-function(x)
{res<-coefs[1] + x*(coefs[2] +lambda*sign(x)) + x^2 * (coefs[3]) +x^3 *(coefs[4]) +x^4 *(coefs[5])
}
result_optimize <- optimize(fct, interval = c(min(-old_x/2 -1e-5, 5*old_x/2 -1e-5), max(-old_x/2 +1e-5, 3*old_x/2 + 1e-5 ) ))
x_min_optimize<-result_optimize$minimum
val_min_optimize<-result_optimize$objective
###x_min_final between optimize and poly
final_mins<-c(poly_min_val, val_min_optimize)
final_x_min<-c(x_min, x_min_optimize)
final_idx_min<-which.min(final_mins)
x_min<-final_x_min[final_idx_min]
x_min<-unlist(x_min)
print("mins and x_min for (poly, optimize)")
print(final_mins)
print(final_x_min)
return(x_min)
}
poly_lasso_min(coefs=c(1,-4,6,-4,1), lambda=0, old_x = 0.7)
poly_lasso_min<-function(coefs, lambda, old_x=0){ #finds the min for a< a=0, a>0 gets the min out of all
##long term take care if 2 with same min smart decision
##coefs[1]=a0
##Minimum using poly and derivative 0
coefs_without_lambda<-coefs
#case 1 sign positive
coefs_poz<-coefs_without_lambda
coefs_poz[2]<-coefs_poz[2]+lambda
poz<-poly_min_sign(coefs=coefs_poz, positive = TRUE)
x_min_poz<-poz[1]
val_min_poz<-poz[2]
#print("starts neg")
#case 2 sign negative
coefs_neg<-coefs_without_lambda
coefs_neg[2]<-coefs_neg[2]-lambda
neg<-poly_min_sign(coefs=coefs_neg, positive = FALSE)
x_min_neg<-neg[1]
val_min_neg<-neg[2]
#print("start 0")
#case 3 sign is 0
x_zeros<-0
val_min_zeros<-coefs[1]
all_mins<-c(val_min_neg, val_min_poz, val_min_zeros)
all_x_min<-c(x_min_neg, x_min_poz, x_zeros)#
idx_min<-which.min(all_mins)
x_min<-all_x_min[idx_min]
x_min<-unlist(x_min)
poly_min_val<-min(all_mins)
### MINIMUM WITH optimize
fct<-function(x)
{res<-coefs[1] + x*(coefs[2] +lambda*sign(x)) + x^2 * (coefs[3]) +x^3 *(coefs[4]) +x^4 *(coefs[5])
}
result_optimize <- optimize(fct, interval = c(min(-old_x/2 -1e-5, 5*old_x/2 -1e-5), max(-old_x/2 +1e-5, 3*old_x/2 + 1e-5 ) ))
x_min_optimize<-result_optimize$minimum
val_min_optimize<-result_optimize$objective
###x_min_final between optimize and poly
final_mins<-c(unlist(poly_min_val), unlist(val_min_optimize))
final_x_min<-c(x_min, x_min_optimize)
final_idx_min<-which.min(final_mins)
x_min<-final_x_min[final_idx_min]
x_min<-unlist(x_min)
print("mins and x_min for (poly, optimize)")
print(final_mins)
print(final_x_min)
return(x_min)
}
poly_lasso_min(coefs=c(1,-4,6,-4,1), lambda=0, old_x = 0.7)
min(c(1,2,3))
poly_lasso_min<-function(coefs, lambda, old_x=0){ #finds the min for a< a=0, a>0 gets the min out of all
##long term take care if 2 with same min smart decision
##coefs[1]=a0
##Minimum using poly and derivative 0
coefs_without_lambda<-coefs
#case 1 sign positive
coefs_poz<-coefs_without_lambda
coefs_poz[2]<-coefs_poz[2]+lambda
poz<-poly_min_sign(coefs=coefs_poz, positive = TRUE)
x_min_poz<-poz[1]
val_min_poz<-poz[2]
#print("starts neg")
#case 2 sign negative
coefs_neg<-coefs_without_lambda
coefs_neg[2]<-coefs_neg[2]-lambda
neg<-poly_min_sign(coefs=coefs_neg, positive = FALSE)
x_min_neg<-neg[1]
val_min_neg<-neg[2]
#print("start 0")
#case 3 sign is 0
x_zeros<-0
val_min_zeros<-coefs[1]
all_mins<-c(val_min_neg, val_min_poz, val_min_zeros)
all_x_min<-c(x_min_neg, x_min_poz, x_zeros)#
idx_min<-which.min(all_mins)
x_min<-all_x_min[idx_min]
x_min<-unlist(x_min)
poly_min_val<-min(unlist(all_mins))
### MINIMUM WITH optimize
fct<-function(x)
{res<-coefs[1] + x*(coefs[2] +lambda*sign(x)) + x^2 * (coefs[3]) +x^3 *(coefs[4]) +x^4 *(coefs[5])
}
result_optimize <- optimize(fct, interval = c(min(-old_x/2 -1e-5, 5*old_x/2 -1e-5), max(-old_x/2 +1e-5, 3*old_x/2 + 1e-5 ) ))
x_min_optimize<-result_optimize$minimum
val_min_optimize<-result_optimize$objective
###x_min_final between optimize and poly
final_mins<-c(unlist(poly_min_val), unlist(val_min_optimize))
final_x_min<-c(x_min, x_min_optimize)
final_idx_min<-which.min(final_mins)
x_min<-final_x_min[final_idx_min]
x_min<-unlist(x_min)
print("mins and x_min for (poly, optimize)")
print(final_mins)
print(final_x_min)
return(x_min)
}
poly_lasso_min(coefs=c(1,-4,6,-4,1), lambda=0, old_x = 0.7)
poly_lasso_min(coefs=c(57,-44,64,-43,15), lambda=0, old_x = 0.7)
poly_lasso_min(coefs=c(57,-44,64,-43,15), lambda=0, old_x = 300)
poly_lasso_min(coefs=c(57,-44,64,-43,15), lambda=0, old_x = -500)
poly_lasso_min(coefs=c(57,-44,64,-43,150), lambda=0, old_x = -500)
poly_lasso_min(coefs=c(157,-44,64,-43,150), lambda=0, old_x = -500)
poly_lasso_min(coefs=c(0.157,-1.4,0.64,-0.0043,0.150), lambda=0.1, old_x = -500)
poly_lasso_min(coefs=c(0.157,-0.004,0.64,-0.0043,0.150), lambda=0.1, old_x = -500)
poly_lasso_min(coefs=c(157,-0.004,0.64,-0.0043,0.150), lambda=0.1, old_x = -500)
libs_path<-file.path("..","libs")
source(file.path(libs_path,'Shim3way_class.R'))
source(file.path(libs_path,'hierarchy_tests.R'))
source(file.path(libs_path,'recover_parameters.R'))
data<- create_basic_dataset()
X<- data$X
y<- data$y$obs
beta_true<- data$beta[-1,]
l1=8
l2=8
l3=4
#print(beta_true)
range_main<-c(1: (l1+l2+l3) )
range_theta<-c( (l1+l2+l3+1) : (l1+l2+l3+l1*(l2+l3)+l2*l3) )
range_psi<-c(  (l1+l2+l3+ 1+ l1*(l2+l3)+l2*l3): (l1+l2+l3+ l1*(l2+l3)+l2*l3+l1*l2*l3) )
beta_main<-beta_true[1:(l1+l2+l3)]
beta_2way<-beta_true[unlist(get_ranges(l1,l2,l3)[2])]
beta_3way<-beta_true[unlist(get_ranges(l1,l2,l3)[3])]
beta_2way_matrix<-get_theta_from_theta_vec_2way3(beta_2way,l1=l1,l2=l2, l3=l3)
beta_3way_table<-get_psi_from_psi_vec3(beta_3way,l1=l1,l2=l2, l3=l3)
beta_main_recovered<- get_all_beta(beta_main, l1=l1, l2=l2, l3=l3, threshold = 1e-4)
beta_2way_recovered<-  get_theta_vec_2way3(  get_all_theta(beta_2way_matrix, l1=l1, l2=l2, l3=l3, threshold = 1e-4), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_recovered<- get_psi_vec3( get_all_psi(beta_3way_table, l1=l1, l2=l2, l3=l3, threshold = 1e-4) , l1=l1+1, l2=l2+1, l3=l3+1)
beta_2way_without_gamma<-get_beta_vec_2way(beta = beta_main, l1=l1, l2=l2, l3=l3, gamma=NULL, only_beta = TRUE )
beta_3way_without_gamma<-get_beta_vec_3way(beta_2way = beta_2way, l1=l1, l2=l2, l3=l3, delta = NULL, only_beta = TRUE)
gamma_true<-beta_2way/beta_2way_without_gamma
gamma_true[is.nan(gamma_true)]<-0
delta_true<-beta_3way/beta_3way_without_gamma
delta_true[is.nan(delta_true)]<-0
y_centered<-y-mean(y)
####START LASSO
cv_fit <- cv.glmnet(X, y_centered, alpha = 1)
best_lambda<-0.08
lasso_model <- glmnet(X, y_centered, alpha = 1, intercept = FALSE, standardize = FALSE, lambda=best_lambda)
coefs_lasso<-coefficients(lasso_model)[-1]
beta_main_lasso<-coefs_lasso[range_main]
beta_2way_lasso<-coefs_lasso[range_theta]
beta_3way_lasso<-coefs_lasso[range_psi]
beta_2way_lasso_without_gamma<-get_beta_vec_2way(beta_main_lasso,l1=l1,l2=l2,l3=l3,only_beta = TRUE)
beta_3way_lasso_without_delta<- get_beta_vec_3way(beta_2way_lasso, l1=l1, l2=l2, l3=l3, only_beta = TRUE)
predict_lasso<-predict(lasso_model, s=best_lambda, newx = X)
print(r2(y_centered, predict_lasso))
print(" results lasso without recovered")
all_beta_functions(beta_main, beta_main_lasso)
all_beta_functions(beta_2way, beta_2way_lasso)
all_beta_functions(beta_3way, beta_3way_lasso)
##hierarchy tests
beta_2way_lasso_matrix<-get_theta_from_theta_vec_2way3(beta_2way_lasso,l1=l1,l2=l2, l3=l3)
beta_3way_lasso_table<-get_psi_from_psi_vec3(beta_3way_lasso,l1=l1,l2=l2, l3=l3)
test_hierarchy_layer12(beta_main_lasso,beta_2way_lasso_matrix, strong = TRUE)
test_hierarchy_layer23(beta_2way_lasso_matrix, beta_3way_lasso_table, strong = TRUE)
beta_main_lasso_recovered<- get_all_beta(beta_main_lasso, l1=l1, l2=l2, l3=l3, threshold = 1e-6)
beta_2way_lasso_recovered<-  get_theta_vec_2way3(  get_all_theta(beta_2way_lasso_matrix, l1=l1, l2=l2, l3=l3, threshold = 1e-6), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_lasso_recovered<- get_psi_vec3( get_all_psi(beta_3way_lasso_table, l1=l1, l2=l2, l3=l3, threshold = 1e-6) , l1=l1+1, l2=l2+1, l3=l3+1)
#beta_main_lasso
#beta_main_lasso_recovered
print("results lasso recovered")
all_beta_functions(beta_main_recovered, beta_main_lasso_recovered)
all_beta_functions(beta_2way_recovered, beta_2way_lasso_recovered)
all_beta_functions(beta_3way_recovered, beta_3way_lasso_recovered)
test_hierarchy_layer12(beta_main_lasso_recovered, get_theta_from_theta_vec_2way3( beta_2way_lasso_recovered, l1=l1+1, l2=l2+1, l3=l3+1 ), strong =TRUE)
test_hierarchy_layer23( get_theta_from_theta_vec_2way3( beta_2way_lasso_recovered, l1=l1+1, l2=l2+1, l3=l3+1),
get_psi_from_psi_vec3(beta_3way_lasso_recovered,l1=l1+1,l2=l2+1, l3=l3+1), strong =TRUE)
beta_hat<-beta_main_lasso
gamma_hat<- beta_2way_lasso/beta_2way_lasso_without_gamma
gamma_hat[is.nan(gamma_hat)]<-0
gamma_hat[!is.finite(gamma_hat)]<-0 #this is 0 in shim case
delta_hat<- beta_3way_lasso/beta_3way_lasso_without_delta
delta_hat[!is.finite(delta_hat)]<-0
delta_hat[is.nan(delta_hat)]<-0
##USE SHIM MODEL #########
lambda_beta<-80
lambda_gamma<-1000
lambda_delta<-1000
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta,
lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1, w_gamma = 1, w_delta = 1, tol=8e-3)
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
beta_all_shim<-fitted$beta_all
beta_main_shim<-beta_all_shim[range_main]
beta_2way_shim<-beta_all_shim[range_theta]
beta_3way_shim<-beta_all_shim[range_psi]
all_beta_functions(beta_main, beta_main_shim)
all_beta_functions(beta_2way, beta_2way_shim)
all_beta_functions(beta_3way, beta_3way_shim)
##hierarchy tests
beta_2way_shim_matrix<-get_theta_from_theta_vec_2way3(beta_2way_shim,l1=l1,l2=l2, l3=l3)
beta_3way_shim_table<-get_psi_from_psi_vec3(beta_3way_shim,l1=l1,l2=l2, l3=l3)
test_hierarchy_layer12(beta_main_shim,beta_2way_shim_matrix, strong = TRUE)
test_hierarchy_layer23(beta_2way_shim_matrix, beta_3way_shim_table, strong = TRUE)
### SHIM FOR RECOVERED DATA #############
beta_2way_shim_matrix<-get_theta_from_theta_vec_2way3(beta_2way_shim,l1=l1,l2=l2, l3=l3)
beta_3way_shim_table<-get_psi_from_psi_vec3(beta_3way_shim,l1=l1, l2=l2, l3=l3)
beta_main_shim_recovered<- get_all_beta(beta_main_shim, l1=l1, l2=l2, l3=l3, threshold = 1e-4)
beta_2way_shim_recovered<-  get_theta_vec_2way3( get_all_theta(beta_2way_shim_matrix, l1=l1, l2=l2, l3=l3, threshold = 1e-4), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_shim_recovered<- get_psi_vec3( get_all_psi(beta_3way_shim_table, l1=l1, l2=l2, l3=l3, threshold = 1e-4) , l1=l1+1, l2=l2+1, l3=l3+1)
print("results shim recovered")
all_beta_functions(beta_main_recovered, beta_main_shim_recovered)
all_beta_functions(beta_2way_recovered, beta_2way_shim_recovered)
all_beta_functions(beta_3way_recovered, beta_3way_shim_recovered)
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta,
lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1, w_gamma = 1, w_delta = 1, tol=8e-5)
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
beta_all_shim<-fitted$beta_all
beta_main_shim<-beta_all_shim[range_main]
beta_2way_shim<-beta_all_shim[range_theta]
beta_3way_shim<-beta_all_shim[range_psi]
all_beta_functions(beta_main, beta_main_shim)
all_beta_functions(beta_2way, beta_2way_shim)
all_beta_functions(beta_3way, beta_3way_shim)
##hierarchy tests
beta_2way_shim_matrix<-get_theta_from_theta_vec_2way3(beta_2way_shim,l1=l1,l2=l2, l3=l3)
beta_3way_shim_table<-get_psi_from_psi_vec3(beta_3way_shim,l1=l1,l2=l2, l3=l3)
test_hierarchy_layer12(beta_main_shim,beta_2way_shim_matrix, strong = TRUE)
test_hierarchy_layer23(beta_2way_shim_matrix, beta_3way_shim_table, strong = TRUE)
### SHIM FOR RECOVERED DATA #############
beta_2way_shim_matrix<-get_theta_from_theta_vec_2way3(beta_2way_shim,l1=l1,l2=l2, l3=l3)
beta_3way_shim_table<-get_psi_from_psi_vec3(beta_3way_shim,l1=l1, l2=l2, l3=l3)
beta_main_shim_recovered<- get_all_beta(beta_main_shim, l1=l1, l2=l2, l3=l3, threshold = 1e-4)
beta_2way_shim_recovered<-  get_theta_vec_2way3( get_all_theta(beta_2way_shim_matrix, l1=l1, l2=l2, l3=l3, threshold = 1e-4), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_shim_recovered<- get_psi_vec3( get_all_psi(beta_3way_shim_table, l1=l1, l2=l2, l3=l3, threshold = 1e-4) , l1=l1+1, l2=l2+1, l3=l3+1)
print("results shim recovered")
all_beta_functions(beta_main_recovered, beta_main_shim_recovered)
all_beta_functions(beta_2way_recovered, beta_2way_shim_recovered)
all_beta_functions(beta_3way_recovered, beta_3way_shim_recovered)
test_hierarchy_layer12(beta_main_shim_recovered, get_theta_from_theta_vec_2way3( beta_2way_shim_recovered, l1=l1+1, l2=l2+1, l3=l3+1 ), strong =TRUE)
test_hierarchy_layer23( get_theta_from_theta_vec_2way3( beta_2way_shim_recovered, l1=l1+1, l2=l2+1, l3=l3+1),
get_psi_from_psi_vec3(beta_3way_shim_recovered,l1=l1+1,l2=l2+1, l3=l3+1), strong =TRUE)
