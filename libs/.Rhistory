counter<-counter+1}}
for (i in c((l1+1): (l1+l2))){ #bc
for (j in  c( (l1+l2+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*beta[,j]
counter<-counter+1}}
assert(counter== l1+l2+l3+ l1*(l2+l3)+l2*l3+1)
return(X_2way)
}
get_X_2way(X,l1,l2,l3)
c(dim(X)[1], l1*(l2+l3) +l2*l3)
get_X_2way<-function(X,l1,l2,l3)
{X_2way<- matrix(0, dim = list(c(dim(X)[1], l1*(l2+l3) +l2*l3)) )
counter<-l1+l2+l3+1
for (i in c(1:l1)){ #ab ac
for (j in c ( (l1+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*X[,j]
counter<-counter+1}}
for (i in c((l1+1): (l1+l2))){ #bc
for (j in  c( (l1+l2+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*beta[,j]
counter<-counter+1}}
assert(counter== l1+l2+l3+ l1*(l2+l3)+l2*l3+1)
return(X_2way)
}
get_X_2way<-function(X,l1,l2,l3)
{X_2way<- matrix(0, dim = list(c(dim(X)[1], l1*(l2+l3) +l2*l3)) )
counter<-l1+l2+l3+1
for (i in c(1:l1)){ #ab ac
for (j in c ( (l1+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*X[,j]
counter<-counter+1}}
for (i in c((l1+1): (l1+l2))){ #bc
for (j in  c( (l1+l2+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*beta[,j]
counter<-counter+1}}
assert(counter== l1+l2+l3+ l1*(l2+l3)+l2*l3+1)
return(X_2way)
}
get_X_2way(X,l1,l2,l3)
get_X_2way<-function(X,l1,l2,l3)
{X_2way<- matrix(0, nrow=dim(X)[1], ncol=l1*(l2+l3) +l2*l3 )
counter<-l1+l2+l3+1
for (i in c(1:l1)){ #ab ac
for (j in c ( (l1+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*X[,j]
counter<-counter+1}}
for (i in c((l1+1): (l1+l2))){ #bc
for (j in  c( (l1+l2+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*beta[,j]
counter<-counter+1}}
assert(counter== l1+l2+l3+ l1*(l2+l3)+l2*l3+1)
return(X_2way)
}
get_X_2way(X,l1,l2,l3)
get_X_2way<-function(X,l1,l2,l3)
{X_2way<- matrix(0, nrow=dim(X)[1], ncol=l1*(l2+l3) +l2*l3 )
counter<-l1+l2+l3+1
for (i in c(1:l1)){ #ab ac
for (j in c ( (l1+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*X[,j]
counter<-counter+1}}
for (i in c((l1+1): (l1+l2))){ #bc
for (j in  c( (l1+l2+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*beta[,j]
counter<-counter+1}}
assert(counter== l1+l2+l3+ l1*(l2+l3)+l2*l3+1)
return(X_2way)
}
get_X_2way(X,l1=2,l2=1,l3=1)
l1=2
l2=1
l3=1
X=matrix(1, nrow=4, ncol=4)
X[2,4]=0
beta=array(c(1,0,0,2))
get_X_2way<-function(X,l1,l2,l3)
{X_2way<- matrix(0, nrow=dim(X)[1], ncol=l1*(l2+l3) +l2*l3 )
counter<-l1+l2+l3+1
for (i in c(1:l1)){ #ab ac
for (j in c ( (l1+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*X[,j]
counter<-counter+1}}
for (i in c((l1+1): (l1+l2))){ #bc
for (j in  c( (l1+l2+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*beta[,j]
counter<-counter+1}}
assert(counter== l1+l2+l3+ l1*(l2+l3)+l2*l3+1)
return(X_2way)
}
get_X_2way(X,l1=2,l2=1,l3=1)
et_X_2way<-function(X,l1,l2,l3)
{X_2way<- matrix(0, nrow=dim(X)[1], ncol=l1*(l2+l3) +l2*l3 )
counter<-l1+l2+l3+1
for (i in c(1:l1)){ #ab ac
for (j in c ( (l1+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*X[,j]
counter<-counter+1}}
for (i in c((l1+1): (l1+l2))){ #bc
for (j in  c( (l1+l2+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*beta[,j]
counter<-counter+1
print(counter)}}
assert(counter== l1+l2+l3+ l1*(l2+l3)+l2*l3+1)
return(X_2way)
}
get_X_2way(X,l1=2,l2=1,l3=1)
get_X_2way<-function(X,l1,l2,l3)
{X_2way<- matrix(0, nrow=dim(X)[1], ncol=l1*(l2+l3) +l2*l3 )
counter<-l1+l2+l3+1
for (i in c(1:l1)){ #ab ac
for (j in c ( (l1+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*X[,j]
counter<-counter+1}}
for (i in c((l1+1): (l1+l2))){ #bc
for (j in  c( (l1+l2+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*beta[,j]
counter<-counter+1
print(counter)}}
assert(counter== l1+l2+l3+ l1*(l2+l3)+l2*l3+1)
return(X_2way)
}
get_X_2way(X,l1=2,l2=1,l3=1)
get_X_2way<-function(X,l1,l2,l3)
{X_2way<- matrix(0, nrow=dim(X)[1], ncol=l1*(l2+l3) +l2*l3 )
counter<-l1+l2+l3+1
for (i in c(1:l1)){ #ab ac
for (j in c ( (l1+1): (l1+l2+l3) ) ){
print(counter)
X_2way[,counter]<-X[,i]*X[,j]
counter<-counter+1}}
for (i in c((l1+1): (l1+l2))){ #bc
for (j in  c( (l1+l2+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*beta[,j]
counter<-counter+1
print(counter)}}
assert(counter== l1+l2+l3+ l1*(l2+l3)+l2*l3+1)
return(X_2way)
}
get_X_2way(X,l1=2,l2=1,l3=1)
get_X_2way<-function(X,l1,l2,l3)
{X_2way<- matrix(0, nrow=dim(X)[1], ncol=l1+l2+l3+l1*(l2+l3) +l2*l3 )
counter<-l1+l2+l3+1
for (i in c(1:l1)){ #ab ac
for (j in c ( (l1+1): (l1+l2+l3) ) ){
print(counter)
X_2way[,counter]<-X[,i]*X[,j]
counter<-counter+1}}
for (i in c((l1+1): (l1+l2))){ #bc
for (j in  c( (l1+l2+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*beta[,j]
counter<-counter+1
print(counter)}}
assert(counter== l1+l2+l3+ l1*(l2+l3)+l2*l3+1)
return(X_2way)
}
get_X_2way(X,l1=2,l2=1,l3=1)
get_X_2way<-function(X,l1,l2,l3)
{X_2way<- matrix(0, nrow=dim(X)[1], ncol=l1+l2+l3+l1*(l2+l3) +l2*l3 )
counter<-l1+l2+l3+1
for (i in c(1:l1)){ #ab ac
for (j in c ( (l1+1): (l1+l2+l3) ) ){
print(counter)
X_2way[,counter]<-X[,i]*X[,j]
counter<-counter+1}}
for (i in c((l1+1): (l1+l2))){ #bc
for (j in  c( (l1+l2+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*X[,j]
counter<-counter+1
print(counter)}}
assert(counter== l1+l2+l3+ l1*(l2+l3)+l2*l3+1)
return(X_2way)
}
get_X_2way(X,l1=2,l2=1,l3=1)
get_X_2way<-function(X,l1,l2,l3)
{X_2way<- matrix(0, nrow=dim(X)[1], ncol=l1+l2+l3+l1*(l2+l3) +l2*l3 )
X_2way[,c(1:l1+l2+l3)]<-X
counter<-l1+l2+l3+1
for (i in c(1:l1)){ #ab ac
for (j in c ( (l1+1): (l1+l2+l3) ) ){
print(counter)
X_2way[,counter]<-X[,i]*X[,j]
counter<-counter+1}}
for (i in c((l1+1): (l1+l2))){ #bc
for (j in  c( (l1+l2+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*X[,j]
counter<-counter+1
print(counter)}}
assert(counter== l1+l2+l3+ l1*(l2+l3)+l2*l3+1)
return(X_2way)
}
get_X_2way(X,l1=2,l2=1,l3=1)
get_X_2way<-function(X,l1,l2,l3)
{X_2way<- matrix(0, nrow=dim(X)[1], ncol=l1+l2+l3+l1*(l2+l3) +l2*l3 )
X_2way[,c(1:(l1+l2+l3))]<-X
counter<-l1+l2+l3+1
for (i in c(1:l1)){ #ab ac
for (j in c ( (l1+1): (l1+l2+l3) ) ){
print(counter)
X_2way[,counter]<-X[,i]*X[,j]
counter<-counter+1}}
for (i in c((l1+1): (l1+l2))){ #bc
for (j in  c( (l1+l2+1): (l1+l2+l3) ) ){
X_2way[,counter]<-X[,i]*X[,j]
counter<-counter+1
print(counter)}}
assert(counter== l1+l2+l3+ l1*(l2+l3)+l2*l3+1)
return(X_2way)
}
get_X_2way(X,l1=2,l2=1,l3=1)
xx.all<-get_X_2way(X,l1,l2,l3)
mains_contribution(X,beta,l1,l2,l3)
two_ways_contribution(xx.all, gamma_vec, beta_vec_2way,l1,l2,l3 )
two_ways_contribution(xx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
gamma_vec_2way<-array(0,dim=length(beta_vec_2way))
two_ways_contribution(xx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
two_ways_contribution<-function(X, gamma_vec, beta_vec_2way,l1,l2,l3) ##assumes gamma_vec is in same order as X
{range_2ways<-unlist(get_ranges(l1,l2,l3)[2])
print(dim())
two_ways_contrib<-X[,range_2ways]%*%beta_vec_2way##last multiplication should be elementwise
return(two_ways_contrib)}
three_ways_contribution<-function(X, delta_vec, beta_vec_3way, l1,l2,l3) ##assumes gamma_vec is in same order as X
{range_3ways<-unlist(get_ranges(l1,l2,l3)[3])
three_ways_contrib<-X[,range_3ways]%*%beta_vec_3way*delta_vec ##last multiplication should be elementwise
return(two_ways_contrib)}
two_ways_contribution(xx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
two_ways_contribution<-function(X, gamma_vec, beta_vec_2way,l1,l2,l3) ##assumes gamma_vec is in same order as X
{range_2ways<-unlist(get_ranges(l1,l2,l3)[2])
#print(dim())
two_ways_contrib<-X[,range_2ways]%*%beta_vec_2way##last multiplication should be elementwise
return(two_ways_contrib)}
two_ways_contribution(xx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
beta=array(c(1,0,0,2))
beta_vec_2way<-get_beta_vec_2way(beta,l1,l2,l3)
beta_vec_3way<-get_beta_vec_3way(beta,l1,l2,l3)
gamma_vec_2way<-array(0,dim=length(beta_vec_2way))
delta_vec_3ay<-array(0,dim=length(beta_vec_3way))
xx.all<-get_X_2way(X,l1,l2,l3)
mains_contribution(X,beta,l1,l2,l3)
two_ways_contribution(xx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
beta_vec_2way
two_ways_contribution(xx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
xx.all
gamma_vec_2way<-array(0,dim=length(beta_vec_2way))
delta_vec_3ay<-array(0,dim=length(beta_vec_3way))
xx.all<-get_X_2way(X,l1,l2,l3)
mains_contribution(X,beta,l1,l2,l3)
two_ways_contribution(xx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
two_ways_contribution<-function(X, gamma_vec, beta_vec_2way,l1,l2,l3) ##assumes gamma_vec is in same order as X
{range_2ways<-unlist(get_ranges(l1,l2,l3)[2])
#print(dim())
two_ways_contrib<- (X[,range_2ways]%*%beta_vec_2way)*gamma_vec ##last multiplication should be elementwise
return(two_ways_contrib)}
three_ways_contribution<-function(X, delta_vec, beta_vec_3way, l1,l2,l3) ##assumes gamma_vec is in same order as X
{range_3ways<-unlist(get_ranges(l1,l2,l3)[3])
three_ways_contrib<-X[,range_3ways]%*%beta_vec_3way*delta_vec ##last multiplication should be elementwise
return(two_ways_contrib)}
l1=2
l2=1
l3=1
X=matrix(1, nrow=4, ncol=4)
X[2,4]=0
beta=array(c(1,0,0,2))
beta_vec_2way<-get_beta_vec_2way(beta,l1,l2,l3)
beta_vec_3way<-get_beta_vec_3way(beta,l1,l2,l3)
gamma_vec_2way<-array(0,dim=length(beta_vec_2way))
delta_vec_3ay<-array(0,dim=length(beta_vec_3way))
xx.all<-get_X_2way(X,l1,l2,l3)
mains_contribution(X,beta,l1,l2,l3)
two_ways_contribution(xx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
two_ways_contribution<-function(X, gamma_vec, beta_vec_2way,l1,l2,l3) ##assumes gamma_vec is in same order as X
{range_2ways<-unlist(get_ranges(l1,l2,l3)[2])
#print(dim())
two_ways_contrib<- X[,range_2ways]%*%(beta_vec_2way*gamma_vec) ##last multiplication should be elementwise
return(two_ways_contrib)}
three_ways_contribution<-function(X, delta_vec, beta_vec_3way, l1,l2,l3) ##assumes gamma_vec is in same order as X
{range_3ways<-unlist(get_ranges(l1,l2,l3)[3])
three_ways_contrib<-X[,range_3ways]%*%beta_vec_3way*delta_vec ##last multiplication should be elementwise
return(two_ways_contrib)}
l1=2
l2=1
l3=1
X=matrix(1, nrow=4, ncol=4)
X[2,4]=0
beta=array(c(1,0,0,2))
beta_vec_2way<-get_beta_vec_2way(beta,l1,l2,l3)
beta_vec_3way<-get_beta_vec_3way(beta,l1,l2,l3)
gamma_vec_2way<-array(0,dim=length(beta_vec_2way))
delta_vec_3ay<-array(0,dim=length(beta_vec_3way))
xx.all<-get_X_2way(X,l1,l2,l3)
mains_contribution(X,beta,l1,l2,l3)
two_ways_contribution(xx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
gamma_vec_2way<-array(1,dim=length(beta_vec_2way))
delta_vec_3ay<-array(0,dim=length(beta_vec_3way))
xx.all<-get_X_2way(X,l1,l2,l3)
mains_contribution(X,beta,l1,l2,l3)
two_ways_contribution(xx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
gamma_vec_2way<-array(1,dim=length(beta_vec_2way))
delta_vec_3ay<-array(0,dim=length(beta_vec_3way))
xx.all<-get_X_2way(X,l1,l2,l3)
mains_contribution(X,beta,l1,l2,l3)
two_ways_contribution(xx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
gamma_vec_2way<-array(c(1,2,3,4),dim=length(beta_vec_2way))
delta_vec_3ay<-array(0,dim=length(beta_vec_3way))
xx.all<-get_X_2way(X,l1,l2,l3)
mains_contribution(X,beta,l1,l2,l3)
two_ways_contribution(xx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
beta=array(c(1,1,0,2))
beta_vec_2way<-get_beta_vec_2way(beta,l1,l2,l3)
beta_vec_3way<-get_beta_vec_3way(beta,l1,l2,l3)
gamma_vec_2way<-array(c(1,2,3,4),dim=length(beta_vec_2way))
delta_vec_3ay<-array(0,dim=length(beta_vec_3way))
xx.all<-get_X_2way(X,l1,l2,l3)
mains_contribution(X,beta,l1,l2,l3)
two_ways_contribution(xx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
beta_vec_2wa
beta_vec_2way
beta_vec_2way*gamma_vec_2way
two_ways_contribution(xx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
xx.all
get_xx.all<-function(X,l1,l2,l3)
{xx.all<- matrix(0, nrow=dim(X)[1], ncol=l1+l2+l3+l1*(l2+l3) +l2*l3 )
xx.all[,c(1:(l1+l2+l3))]<-X
counter<-l1+l2+l3+1
for (i in c(1:l1)){ #ab ac
for (j in c ( (l1+1): (l1+l2+l3) ) ){
print(counter)
xx.all[,counter]<-X[,i]*X[,j]
counter<-counter+1}}
for (i in c((l1+1): (l1+l2))){ #bc
for (j in  c( (l1+l2+1): (l1+l2+l3) ) ){
xx.all[,counter]<-X[,i]*X[,j]
counter<-counter+1
print(counter)}}
assert(counter== l1+l2+l3+ l1*(l2+l3)+l2*l3+1)
return(xx.all)
}
xx.all<-get_xx.all(X,l1,l2,l3)
xx.all
two_ways_contribution(xx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
## FUNCTIONS USED FOR THE CLASS
assert <- function(condition, message) {
if (!condition) stop(message)
}
#Function to compute prediction contribution for mains
get_xx.all<-function(X,l1,l2,l3)
{xx.all<- matrix(0, nrow=dim(X)[1], ncol=l1+l2+l3+l1*(l2+l3) +l2*l3 )
xx.all[,c(1:(l1+l2+l3))]<-X
counter<-l1+l2+l3+1
for (i in c(1:l1)){ #ab ac
for (j in c ( (l1+1): (l1+l2+l3) ) ){
print(counter)
xx.all[,counter]<-X[,i]*X[,j]
counter<-counter+1}}
for (i in c((l1+1): (l1+l2))){ #bc
for (j in  c( (l1+l2+1): (l1+l2+l3) ) ){
xx.all[,counter]<-X[,i]*X[,j]
counter<-counter+1
}}
assert(counter== l1+l2+l3+ l1*(l2+l3)+l2*l3+1)
return(xx.all)
}
get_beta_vec_2way<-function(beta,l1,l2,l3)
{beta_vec2way<- array(0, dim = l1*(l2+l3) +l2*l3 )
counter<-1
for (i in c(1:l1)){ #ab ac
for (j in c ( (l1+1): (l1+l2+l3) ) ){
beta_vec2way[counter]<-beta[i]*beta[j]
counter<-counter+1}}
for (i in c((l1+1): (l1+l2))){ #bc
for (j in  c( (l1+l2+1): (l1+l2+l3) ) ){
beta_vec2way[counter]<-beta[i]*beta[j]
counter<-counter+1}}
assert(counter==l1*(l2+l3)+l2*l3+1)
return(beta_vec2way)
}
get_beta_vec_3way<-function(beta,l1,l2,l3)
{beta_vec3way<- array(0, dim = l1*l2*l3 )
counter<-1
for (i in c(1:l1)){ #ab ac
for (j in c ( (l1+1): (l1+l2) ) ){
for (k in c ( (l1+l2+1): (l1+l2+l3) ) ){
beta_vec3way[counter]<-beta[i]*beta[j]*beta[k]
counter<-counter+1}}}
assert(counter==l1*l2*l3+1)
return(beta_vec3way)
}
beta<-array(c(1,2,3,4,5,7), dim=6)
#get_beta_vec_2way(beta, l1=2,l2=2,l3=1)
get_beta_vec_3way(beta, l1=2, l2=1,l3=3)
get_ranges<-function(l1,l2,l3)
{range_main<-c(1: (l1+l2+l3) )
range_theta<-c( (l1+l2+l3+1) : (l1+l2+l3+l1*(l2+l3)+l2*l3) )
range_psi<-c(  (l1+l2+l3+ 1+ l1*(l2+l3)+l2*l3): (l1+l2+l3+ l1*(l2+l3)+l2*l3+l1*l2*l3) )
return(list(range_main, range_theta, range_psi))}
mains_contribution<-function(X, beta, l1,l2,l3)
{ range_main<-unlist(get_ranges(l1,l2,l3)[1])
mains_contrib<-X[,range_main]%*%beta
return(mains_contrib)}
two_ways_contribution<-function(X, gamma_vec, beta_vec_2way,l1,l2,l3) ##assumes gamma_vec is in same order as X
{range_2ways<-unlist(get_ranges(l1,l2,l3)[2])
#print(dim())
two_ways_contrib<- X[,range_2ways]%*%(beta_vec_2way*gamma_vec) ##last multiplication should be elementwise
return(two_ways_contrib)}
three_ways_contribution<-function(X, delta_vec, beta_vec_3way, l1,l2,l3) ##assumes gamma_vec is in same order as X
{range_3ways<-unlist(get_ranges(l1,l2,l3)[3])
three_ways_contrib<-X[,range_3ways]%*%beta_vec_3way*delta_vec ##last multiplication should be elementwise
return(two_ways_contrib)}
l1=2
l2=1
l3=1
X=matrix(1, nrow=4, ncol=4)
X[2,4]=0
beta=array(c(1,1,0,2))
beta_vec_2way<-get_beta_vec_2way(beta,l1,l2,l3)
beta_vec_3way<-get_beta_vec_3way(beta,l1,l2,l3)
gamma_vec_2way<-array(c(1,2,3,4),dim=length(beta_vec_2way))
delta_vec_3ay<-array(0,dim=length(beta_vec_3way))
xx.all<-get_xx.all(X,l1,l2,l3)
mains_contribution(X,beta,l1,l2,l3)
two_ways_contribution(xx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
mains_contribution<-function(X, beta, l1,l2,l3)
{ range_main<-unlist(get_ranges(l1,l2,l3)[1])
mains_contrib<-X[,range_main]%*%beta
return(mains_contrib)}
compute_relative_dif<-function(Q_old, Q_new)
{rel_dif<- abs(Q_old-Q_new)/abs(Q_old)
return(rel_dif)}
compute_relative_dif(10,3)
compute_relative_dif(10,15)
get_xxx.all<-function(X,l1,l2,l3)
{xxx.all<- matrix(0, nrow=dim(X)[1], ncol=l1+l2+l3+l1*(l2+l3) +l2*l3 + l1*l2*l3)
xxx.all[,c(1:(l1+l2+l3+ l1*(l2+l3)+l2*l3))]<-get_xx.all(X=X, l1=l1, l2=l2, l3=l3)
counter<-l1+l2+l3+l1*(l2+l3)+l2*l3+1
for (i in c(1:l1)){ #abc
for (j in c ( (l1+1): (l1+l2) ) ){
for (k in c ( (l1+l2+1): (l1+l2+l3) ) ){
xxx.all[,counter]<-X[,i]*X[,j]*X[,k]
counter<-counter+1}}}
assert(counter==l1+l2+l3+l1*(l2+l3)+l2*l3+l1*l2*l3+1)
}
get_xxx.all(X,2,1,1)
get_xxx.all<-function(X,l1,l2,l3)
{xxx.all<- matrix(0, nrow=dim(X)[1], ncol=l1+l2+l3+l1*(l2+l3) +l2*l3 + l1*l2*l3)
xxx.all[,c(1:(l1+l2+l3+ l1*(l2+l3)+l2*l3))]<-get_xx.all(X=X, l1=l1, l2=l2, l3=l3)
counter<-l1+l2+l3+l1*(l2+l3)+l2*l3+1
for (i in c(1:l1)){ #abc
for (j in c ( (l1+1): (l1+l2) ) ){
for (k in c ( (l1+l2+1): (l1+l2+l3) ) ){
xxx.all[,counter]<-X[,i]*X[,j]*X[,k]
counter<-counter+1}}}
assert(counter==l1+l2+l3+l1*(l2+l3)+l2*l3+l1*l2*l3+1)
return(xxx.all)
}
get_xxx.all(X,2,1,1)
beta_vec_3way<-get_beta_vec_3way(beta,l1,l2,l3)
beta_vec_3way
mains_contribution(xxx.all,beta,l1,l2,l3)
xxx.all<-get_xxx.all(X,l1,l2,l3)
mains_contribution(xxx.all,beta,l1,l2,l3)
two_ways_contribution(xxx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
three_ways_contribution(xxx.all, beta_vec_3way = beta_vec_3way, delta_vec = delta_vec_3way, l1 , l2, l3 )
delta_vec_3way<-array(0,dim=length(beta_vec_3way))
xx.all<-get_xx.all(X,l1,l2,l3)
xxx.all<-get_xxx.all(X,l1,l2,l3)
mains_contribution(xxx.all,beta,l1,l2,l3)
two_ways_contribution(xxx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
three_ways_contribution(xxx.all, beta_vec_3way = beta_vec_3way, delta_vec = delta_vec_3way, l1 , l2, l3 )
three_ways_contribution<-function(X, delta_vec, beta_vec_3way, l1,l2,l3) ##assumes gamma_vec is in same order as X
{range_3ways<-unlist(get_ranges(l1,l2,l3)[3])
three_ways_contrib<-X[,range_3ways]%*%(beta_vec_3way*delta_vec) ##last multiplication should be elementwise
return(two_ways_contrib)}
three_ways_contribution(xxx.all, beta_vec_3way = beta_vec_3way, delta_vec = delta_vec_3way, l1 , l2, l3 )
three_ways_contribution<-function(X, delta_vec, beta_vec_3way, l1,l2,l3) ##assumes gamma_vec is in same order as X
{range_3ways<-unlist(get_ranges(l1,l2,l3)[3])
three_ways_contrib<-X[,range_3ways]%*%(beta_vec_3way*delta_vec) ##last multiplication should be elementwise
return(three_ways_contrib)}
three_ways_contribution(xxx.all, beta_vec_3way = beta_vec_3way, delta_vec = delta_vec_3way, l1 , l2, l3 )
X=matrix(1, nrow=4, ncol=4)
X[2,4]=0
beta=array(c(1,1,1,2))
beta_vec_2way<-get_beta_vec_2way(beta,l1,l2,l3)
beta_vec_3way<-get_beta_vec_3way(beta,l1,l2,l3)
gamma_vec_2way<-array(c(1,2,3,4),dim=length(beta_vec_2way))
delta_vec_3way<-array(0,dim=length(beta_vec_3way))
xx.all<-get_xx.all(X,l1,l2,l3)
xxx.all<-get_xxx.all(X,l1,l2,l3)
mains_contribution(xxx.all,beta,l1,l2,l3)
two_ways_contribution(xxx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
xx.all<
get_xx.all(X,l1,l2,l3)
xx.all
two_ways_contribution(xxx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
gamma_vec_2way
X=matrix(1, nrow=4, ncol=4)
X[2,4]=0
beta=array(c(1,1,1,2))
beta_vec_2way<-get_beta_vec_2way(beta,l1,l2,l3)
beta_vec_3way<-get_beta_vec_3way(beta,l1,l2,l3)
gamma_vec_2way<-array(c(1,2,3,4,0),dim=length(beta_vec_2way))
delta_vec_3way<-array(0,dim=length(beta_vec_3way))
xx.all<-get_xx.all(X,l1,l2,l3)
xxx.all<-get_xxx.all(X,l1,l2,l3)
mains_contribution(xxx.all,beta,l1,l2,l3)
two_ways_contribution(xxx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
three_ways_contribution(xxx.all, beta_vec_3way = beta_vec_3way, delta_vec = delta_vec_3way, l1 , l2, l3 )
delta_vec_3way<-array(c(2,3),dim=length(beta_vec_3way))
xx.all<-get_xx.all(X,l1,l2,l3)
xxx.all<-get_xxx.all(X,l1,l2,l3)
mains_contribution(xxx.all,beta,l1,l2,l3)
two_ways_contribution(xxx.all, gamma_vec_2way, beta_vec_2way,l1,l2,l3 )
three_ways_contribution(xxx.all, beta_vec_3way = beta_vec_3way, delta_vec = delta_vec_3way, l1 , l2, l3 )
xxx.all
