libs_path<-file.path("..","libs")
source(file.path(libs_path,'helper_functions.R'))
data<-load_deoxi_flourination()
library(ggplot2)
# Combine data
y.all <- data$prob
n.all <- length(y.all)
tt <- 1:n.all/n.all
# Find MLE for p
ld<-function(p)
{
(n.all*p/(2*p-1)-sum(y.all)+n.all/log((1-p)/p))/(p*(p-1))
}
p.hat <- uniroot(ld,c(0.001,0.5))$root
# Plot the histogram
ll <- log((1-p.hat)/p.hat)*p.hat^tt*(1-p.hat)^(1-tt)/(1-2*p.hat)
df <- data.frame(y.all,tt,ll)
colnames(df) <- c("Yield","Probability","Density")
ggplot(df, aes(x=Yield*100)) +
geom_histogram(aes(y=..density..),color="black",fill="cornflowerblue",breaks=seq(0,100,length=11))+
theme(text = element_text(size = 40)) +labs(title = "Yield density") +
theme(plot.title = element_textbox(hjust = 0.5, margin = ggplot2::margin(t = 5, b = 5)))+
geom_line(aes(x=tt*100,y =ll/100), color = "black",size=2)+ylab("Density")+xlab("Yield")
element_textbox <- function(...) {
el <- element_text(...)
class(el) <- c("element_textbox", class(el))
el
}
ggplot(df, aes(x=Yield*100)) +
geom_histogram(aes(y=..density..),color="black",fill="cornflowerblue",breaks=seq(0,100,length=11))+
theme(text = element_text(size = 40)) +labs(title = "Yield density") +
theme(plot.title = element_textbox(hjust = 0.5, margin = ggplot2::margin(t = 5, b = 5)))+
geom_line(aes(x=tt*100,y =ll/100), color = "black",size=2)+ylab("Density")+xlab("Yield")
ggplot2:::absoluteGrob(
grid::gList(
element_grob(calc_element("strip.background", theme_bw())),
text_grob
),
height = grid::grobHeight(text_grob),
width = grid::unit(1, "npc")
)
ggplot2:::absoluteGrob(
grid::gList(
element_grob(calc_element("strip.background", theme_bw())),
text_grob
),
height = grid::grobHeight(text_grob),
width = grid::unit(1, "npc")
)
element_textbox <- function(...) {
el <- element_text(...)
class(el) <- c("element_textbox", class(el))
el
}
element_grob.element_textbox <- function(element, ...) {
text_grob <- NextMethod()
rect_grob <- element_grob(calc_element("strip.background", theme_bw()))
ggplot2:::absoluteGrob(
grid::gList(
element_grob(calc_element("strip.background", theme_bw())),
text_grob
),
height = grid::grobHeight(text_grob),
width = grid::unit(1, "npc")
)
}
ggplot(df, aes(x=Yield*100)) +
geom_histogram(aes(y=..density..),color="black",fill="cornflowerblue",breaks=seq(0,100,length=11))+
theme(text = element_text(size = 40)) +labs(title = "Yield density") +
theme(plot.title = element_textbox(
hjust = 0.5, margin = margin(t = 5, b = 5)
))+
geom_line(aes(x=tt*100,y =ll/100), color = "black",size=2)+ylab("Density")+xlab("Yield")
ggplot(df, aes(x=Yield*100)) +
geom_histogram(aes(y=..density..),color="black",fill="cornflowerblue",breaks=seq(0,100,length=11))+
theme(text = element_text(size = 40)) +labs(title = "Yield density") +
theme(plot.title = element_textbox(
hjust = 0.5, margin = margin(t = 5, b = 5)
), aspect.ratio = 1)+
geom_line(aes(x=tt*100,y =ll/100), color = "black",size=2)+ylab("Density")+xlab("Yield")
ggplot(df, aes(x=Yield*100)) +
geom_histogram(aes(y=..density..),color="black",fill="cornflowerblue",breaks=seq(0,100,length=11))+
scale_y_continuous(breaks = c(0, 0.01, 0.02)) +
theme(text = element_text(size = 40)) +labs(title = "Yield density") +
theme(plot.title = element_textbox(
hjust = 0.5, margin = margin(t = 5, b = 5)
), aspect.ratio = 1)+
geom_line(aes(x=tt*100,y =ll/100), color = "black",size=2)+ylab("Density")+xlab("Yield")
ggplot(df, aes(x=Yield*100)) +
geom_histogram(aes(y=..density..),color="black",fill="cornflowerblue",breaks=seq(0,100,length=11))+
scale_y_continuous(breaks = c(0, 0.01, 0.02)) +
theme(text = element_text(size = 40)) +labs(title = "Yield density") +
theme(plot.title = element_textbox(
hjust = 0.5, margin = margin(t = 3, b = 3)
), aspect.ratio = 1)+
geom_line(aes(x=tt*100,y =ll/100), color = "black",size=2)+ylab("Density")+xlab("Yield")
dev.off()
ggplot(df, aes(x=Yield*100)) +
geom_histogram(aes(y=..density..),color="black",fill="cornflowerblue",breaks=seq(0,100,length=11))+
scale_y_continuous(breaks = c(0, 0.01, 0.02)) +
theme(text = element_text(size = 30)) +labs(title = "Yield density") +
theme(plot.title = element_textbox(
hjust = 0.5, margin = margin(t = 5, b = 5)
), aspect.ratio = 1)+
geom_line(aes(x=tt*100,y =ll/100), color = "black",size=2)+ylab("Density")+xlab("Yield")
dev.off()
ggplot(df, aes(x=Yield*100)) +
geom_histogram(aes(y=..density..),color="black",fill="cornflowerblue",breaks=seq(0,100,length=11))+
scale_y_continuous(breaks = c(0, 0.01, 0.02)) +
theme(text = element_text(size = 30)) +labs(title = "Yield density") +
theme(plot.title = element_textbox(
hjust = 0.5, margin = margin(t = 5, b = 5)
), aspect.ratio = 1)+
geom_line(aes(x=tt*100,y =ll/100), color = "black",size=2)+ylab("Density")+xlab("Yield")
ggplot(df, aes(x=Yield*100)) +
geom_histogram(aes(y=..density..),color="black",fill="cornflowerblue",breaks=seq(0,100,length=11))+
scale_y_continuous(breaks = c(0, 0.01, 0.02)) +
theme(text = element_text(size = 10)) +labs(title = "Yield density") +
theme(plot.title = element_textbox(
hjust = 0.5, margin = margin(t = 5, b = 5)
), aspect.ratio = 1)+
geom_line(aes(x=tt*100,y =ll/100), color = "black",size=2)+ylab("Density")+xlab("Yield")
ggplot(df, aes(x=Yield*100)) +
geom_histogram(aes(y=..density..),color="black",fill="cornflowerblue",breaks=seq(0,100,length=11))+
scale_y_continuous(breaks = c(0, 0.01, 0.02)) +
theme(text = element_text(size = 25)) +labs(title = "Yield density") +
theme(plot.title = element_textbox(
hjust = 0.5, margin = margin(t = 5, b = 5)
), aspect.ratio = 1)+
geom_line(aes(x=tt*100,y =ll/100), color = "black",size=2)+ylab("Density")+xlab("Yield")
libs_path<-file.path("..","libs")
source(file.path(libs_path,'helper_functions.R'))
data<-load_deoxi_flourination()
print(max(data$yield))
hist(data$prob)
which(data$yield_corrected==100)
which(data$yield>100)
plot_yield_histo(data)
libs_path<-file.path("..","libs")
source(file.path(libs_path,'helper_functions.R'))
data<-load_deoxi_flourination()
print(max(data$yield))
hist(data$prob)
which(data$yield_corrected==100)
which(data$yield>100)
plot_yield_histo(data)
data
unique(data$a)
unique(data$a)
unique(data$b)
unique(data$s)
37*4*5
dim(data)
data
levels(data$a)
levels(data$b)
levels(data$s)
37*4*5
length(data)
dim(data)
######################################################################
## ANOVA FACTORIZATION FOR TOY DATA
######################################################################
# Clear all
rm(list=ls())
gc()
try(dev.off(dev.list()["RStudioGD"]),silent=TRUE)
try(dev.off(),silent=TRUE)
cat("\014")
# Memory
memory.limit(64000)
#######################
## Dummy Function
#######################
dummy.matrix <- function(NF=2, NL=rep(2,NF)) {
# Computes dummy matrix from number of factors NF and number of levels NL
# NF is an integer between 2 and 4
# NL is a vector of length NF having integer entries between 2 and 100
# Factors and Levels
fac.tags <- c("A", "B", "C", "D")
fac.levs <- as.character(1:100)
if (NF == 2) {
# One-way
L.1 <- NL[1]
L.2 <- NL[2]
fac.1 <- paste(fac.tags[1], fac.levs[1:L.1], sep=".")
fac.2 <- paste(fac.tags[2], fac.levs[1:L.2], sep=".")
# Two-ways
L.12 <- L.1*L.2
fac.12 <- sort(as.vector(outer(fac.1, fac.2, paste, sep=":")))
# Dummy design matrix 2-way
n.2w <- L.12
p.2w <- n.2w-1
x.2w <- data.frame(matrix(0, nrow=n.2w, ncol=p.2w))
rownames(x.2w) <- c(fac.12)
colnames(x.2w) <- c(fac.1[-L.1], fac.2[-L.2],
sort(as.vector(outer(fac.1[-L.1], fac.2[-L.2], paste, sep=":")))
)
for (col in 1:ncol(x.2w)) {
col.tags <- unlist(strsplit(colnames(x.2w)[col], split=":"))
if (length(col.tags)==1) {
fac.tag <- unlist(strsplit(col.tags,split="\\."))
x.2w[grepl(col.tags,split(unlist(strsplit(rownames(x.2w),split=":")), 1:2)[[1]]),col] <- 1
x.2w[grepl(col.tags,split(unlist(strsplit(rownames(x.2w),split=":")), 1:2)[[2]]),col] <- 1
x.2w[grepl(paste(fac.tag[1],L.1,sep="."),split(unlist(strsplit(rownames(x.2w),split=":")), 1:2)[[1]]),col] <- -1
x.2w[grepl(paste(fac.tag[1],L.2,sep="."),split(unlist(strsplit(rownames(x.2w),split=":")), 1:2)[[2]]),col] <- -1
}
if (length(col.tags)==2) {
col.1 <- which(colnames(x.2w)==col.tags[1])
col.2 <- which(colnames(x.2w)==col.tags[2])
x.2w[,col] <- x.2w[,col.1]*x.2w[,col.2]
}
}
return(x.2w)
}
if (NF == 3) {
# One-way
L.1 <- NL[1]
L.2 <- NL[2]
L.3 <- NL[3]
fac.1 <- paste(fac.tags[1], fac.levs[1:L.1], sep=".")
fac.2 <- paste(fac.tags[2], fac.levs[1:L.2], sep=".")
fac.3 <- paste(fac.tags[3], fac.levs[1:L.3], sep=".")
# Two-ways
L.12 <- L.1*L.2
L.13 <- L.1*L.3
L.23 <- L.2*L.3
fac.12 <- sort(as.vector(outer(fac.1, fac.2, paste, sep=":")))
fac.13 <- sort(as.vector(outer(fac.1, fac.3, paste, sep=":")))
fac.23 <- sort(as.vector(outer(fac.2, fac.3, paste, sep=":")))
# Three-ways
L.123 <- L.1*L.2*L.3
fac.123 <- sort(as.vector(outer(fac.1, fac.23, paste, sep=":")))
# Dummy design matrix 3-way
n.3w <- L.123
p.3w <- n.3w-1
x.3w <- data.frame(matrix(0, nrow=n.3w, ncol=p.3w))
rownames(x.3w) <- c(fac.123)
colnames(x.3w) <- c(fac.1[-L.1], fac.2[-L.2], fac.3[-L.3],
sort(as.vector(outer(fac.1[-L.1], fac.2[-L.2], paste, sep=":"))),
sort(as.vector(outer(fac.1[-L.1], fac.3[-L.3], paste, sep=":"))),
sort(as.vector(outer(fac.2[-L.2], fac.3[-L.3], paste, sep=":"))),
sort(as.vector(outer(fac.1[-L.1], sort(as.vector(outer(fac.2[-L.2], fac.3[-L.3], paste, sep=":"))), paste, sep=":")))
)
for (col in 1:ncol(x.3w)) {
col.tags <- unlist(strsplit(colnames(x.3w)[col], split=":"))
if (length(col.tags)==1) {
fac.tag <- unlist(strsplit(col.tags,split="\\."))
x.3w[grepl(col.tags,split(unlist(strsplit(rownames(x.3w),split=":")), 1:3)[[1]]),col] <- 1
x.3w[grepl(col.tags,split(unlist(strsplit(rownames(x.3w),split=":")), 1:3)[[2]]),col] <- 1
x.3w[grepl(col.tags,split(unlist(strsplit(rownames(x.3w),split=":")), 1:3)[[3]]),col] <- 1
x.3w[grepl(paste(fac.tag[1],L.1,sep="."),split(unlist(strsplit(rownames(x.3w),split=":")), 1:3)[[1]]),col] <- -1
x.3w[grepl(paste(fac.tag[1],L.2,sep="."),split(unlist(strsplit(rownames(x.3w),split=":")), 1:3)[[2]]),col] <- -1
x.3w[grepl(paste(fac.tag[1],L.3,sep="."),split(unlist(strsplit(rownames(x.3w),split=":")), 1:3)[[3]]),col] <- -1
}
if (length(col.tags)==2) {
col.1 <- which(colnames(x.3w)==col.tags[1])
col.2 <- which(colnames(x.3w)==col.tags[2])
x.3w[,col] <- x.3w[,col.1]*x.3w[,col.2]
}
if (length(col.tags)==3) {
col.1 <- which(colnames(x.3w)==col.tags[1])
col.2 <- which(colnames(x.3w)==col.tags[2])
col.3 <- which(colnames(x.3w)==col.tags[3])
x.3w[,col] <- x.3w[,col.1]*x.3w[,col.2]*x.3w[,col.3]
}
}
return(x.3w)
}
if (NF == 4) {
# One-way
L.1 <- NL[1]
L.2 <- NL[2]
L.3 <- NL[3]
L.4 <- NL[4]
fac.1 <- paste(fac.tags[1], fac.levs[1:L.1], sep=".")
fac.2 <- paste(fac.tags[2], fac.levs[1:L.2], sep=".")
fac.3 <- paste(fac.tags[3], fac.levs[1:L.3], sep=".")
fac.4 <- paste(fac.tags[4], fac.levs[1:L.4], sep=".")
# Two-ways
L.12 <- L.1*L.2
L.13 <- L.1*L.3
L.14 <- L.1*L.4
L.23 <- L.2*L.3
L.24 <- L.2*L.4
L.34 <- L.3*L.4
fac.12 <- sort(as.vector(outer(fac.1, fac.2, paste, sep=":")))
fac.13 <- sort(as.vector(outer(fac.1, fac.3, paste, sep=":")))
fac.14 <- sort(as.vector(outer(fac.1, fac.4, paste, sep=":")))
fac.23 <- sort(as.vector(outer(fac.2, fac.3, paste, sep=":")))
fac.24 <- sort(as.vector(outer(fac.2, fac.4, paste, sep=":")))
fac.34 <- sort(as.vector(outer(fac.3, fac.4, paste, sep=":")))
# Three-ways
L.123 <- L.1*L.2*L.3
L.124 <- L.1*L.2*L.4
L.134 <- L.1*L.3*L.4
L.234 <- L.2*L.3*L.4
fac.123 <- sort(as.vector(outer(fac.1, fac.23, paste, sep=":")))
fac.124 <- sort(as.vector(outer(fac.1, fac.24, paste, sep=":")))
fac.134 <- sort(as.vector(outer(fac.1, fac.34, paste, sep=":")))
fac.234 <- sort(as.vector(outer(fac.2, fac.34, paste, sep=":")))
# Four-ways
L.1234 <- L.1*L.2*L.3*L.4
fac.1234 <- sort(as.vector(outer(fac.1, fac.234, paste, sep=":")))
# Dummy design matrix 4-way
n.4w <- L.1234
p.4w <- n.4w-1
x.4w <- data.frame(matrix(0, nrow=n.4w, ncol=p.4w))
rownames(x.4w) <- c(fac.1234)
colnames(x.4w) <- c(fac.1[-L.1], fac.2[-L.2], fac.3[-L.3], fac.4[-L.4],
sort(as.vector(outer(fac.1[-L.1], fac.2[-L.2], paste, sep=":"))),
sort(as.vector(outer(fac.1[-L.1], fac.3[-L.3], paste, sep=":"))),
sort(as.vector(outer(fac.1[-L.1], fac.4[-L.4], paste, sep=":"))),
sort(as.vector(outer(fac.2[-L.2], fac.3[-L.3], paste, sep=":"))),
sort(as.vector(outer(fac.2[-L.2], fac.4[-L.4], paste, sep=":"))),
sort(as.vector(outer(fac.3[-L.3], fac.4[-L.4], paste, sep=":"))),
sort(as.vector(outer(fac.1[-L.1], sort(as.vector(outer(fac.2[-L.2], fac.3[-L.3], paste, sep=":"))), paste, sep=":"))),
sort(as.vector(outer(fac.1[-L.1], sort(as.vector(outer(fac.2[-L.2], fac.4[-L.4], paste, sep=":"))), paste, sep=":"))),
sort(as.vector(outer(fac.1[-L.1], sort(as.vector(outer(fac.3[-L.3], fac.4[-L.4], paste, sep=":"))), paste, sep=":"))),
sort(as.vector(outer(fac.2[-L.2], sort(as.vector(outer(fac.3[-L.3], fac.4[-L.4], paste, sep=":"))), paste, sep=":"))),
sort(as.vector(outer(fac.1[-L.1], sort(as.vector(outer(fac.2[-L.2], sort(as.vector(outer(fac.3[-L.3], fac.4[-L.4], paste, sep=":"))),
paste, sep=":"))), paste, sep=":")))
)
for (col in 1:ncol(x.4w)) {
col.tags <- unlist(strsplit(colnames(x.4w)[col], split=":"))
if (length(col.tags)==1) {
fac.tag <- unlist(strsplit(col.tags,split="\\."))
x.4w[grepl(col.tags,split(unlist(strsplit(rownames(x.4w),split=":")), 1:4)[[1]]),col] <- 1
x.4w[grepl(col.tags,split(unlist(strsplit(rownames(x.4w),split=":")), 1:4)[[2]]),col] <- 1
x.4w[grepl(col.tags,split(unlist(strsplit(rownames(x.4w),split=":")), 1:4)[[3]]),col] <- 1
x.4w[grepl(col.tags,split(unlist(strsplit(rownames(x.4w),split=":")), 1:4)[[4]]),col] <- 1
x.4w[grepl(paste(fac.tag[1],L.1,sep="."),split(unlist(strsplit(rownames(x.4w),split=":")), 1:4)[[1]]),col] <- -1
x.4w[grepl(paste(fac.tag[1],L.2,sep="."),split(unlist(strsplit(rownames(x.4w),split=":")), 1:4)[[2]]),col] <- -1
x.4w[grepl(paste(fac.tag[1],L.3,sep="."),split(unlist(strsplit(rownames(x.4w),split=":")), 1:4)[[3]]),col] <- -1
x.4w[grepl(paste(fac.tag[1],L.4,sep="."),split(unlist(strsplit(rownames(x.4w),split=":")), 1:4)[[4]]),col] <- -1
}
if (length(col.tags)==2) {
col.1 <- which(colnames(x.4w)==col.tags[1])
col.2 <- which(colnames(x.4w)==col.tags[2])
x.4w[,col] <- x.4w[,col.1]*x.4w[,col.2]
}
if (length(col.tags)==3) {
col.1 <- which(colnames(x.4w)==col.tags[1])
col.2 <- which(colnames(x.4w)==col.tags[2])
col.3 <- which(colnames(x.4w)==col.tags[3])
x.4w[,col] <- x.4w[,col.1]*x.4w[,col.2]*x.4w[,col.3]
}
if (length(col.tags)==4) {
col.1 <- which(colnames(x.4w)==col.tags[1])
col.2 <- which(colnames(x.4w)==col.tags[2])
col.3 <- which(colnames(x.4w)==col.tags[3])
col.4 <- which(colnames(x.4w)==col.tags[4])
x.4w[,col] <- x.4w[,col.1]*x.4w[,col.2]*x.4w[,col.3]*x.4w[,col.4]
}
}
return(x.4w)
}
}
#######################
## Toy Model
#
x.3w <- dummy.matrix(NF=3, NL=c(37,4,5))
x.3w
dim(x.3w)
colnames(x.3w)
36*7+12
36*7+12 +46+20*37
36*7+12 +43+ 12*36
x.3w <- dummy.matrix(NF=3, NL=c(50,4,5))
dim(x.3w)
svd_result <- svd(x.3w)
singular_values <- svd_result$d
# Find the largest and smallest singular values
largest_singular_value <- max(singular_values)
smallest_singular_value <- min(singular_values)
largest_singular_value/smallest_singular_value
svd_result <- svd(x.3w[,c(1:30)])
# Extract the singular values
singular_values <- svd_result$d
# Find the largest and smallest singular values
largest_singular_value <- max(singular_values)
smallest_singular_value <- min(singular_values)
largest_singular_value/smallest_singular_value
svd_result <- svd(x.3w[,c(1:100)])
# Extract the singular values
singular_values <- svd_result$d
# Find the largest and smallest singular values
largest_singular_value <- max(singular_values)
smallest_singular_value <- min(singular_values)
largest_singular_value/smallest_singular_value
svd_result <- svd(x.3w[,c(1:200)])
# Extract the singular values
singular_values <- svd_result$d
# Find the largest and smallest singular values
largest_singular_value <- max(singular_values)
smallest_singular_value <- min(singular_values)
largest_singular_value/smallest_singular_value
x.3w <- dummy.matrix(NF=3, NL=c(37,4,5))
svd_result <- svd(x.3w)
# Extract the singular values
singular_values <- svd_result$d
# Find the largest and smallest singular values
largest_singular_value <- max(singular_values)
smallest_singular_value <- min(singular_values)
largest_singular_value/smallest_singular_value
x.4w <- dummy.matrix(NF=4, NL=c(22,15,3,4))
svd_result <- svd(x.4w)
x.3w <- dummy.matrix(NF=3, NL=c(37,4,5))
svd_result <- svd(x.3w)
singular_values
sort(singular_values)
# Find the largest and smallest singular values
largest_singular_value <- max(singular_values)
smallest_singular_value <- min(singular_values)
largest_singular_value/smallest_singular_value
data<-load_deoxi_flourination()
source('helper_functions.R')
libs_path<-file.path("..","libs")
source(file.path(libs_path,'helper_functions.R'))
data<-load_deoxi_flourination()
colnames(data)
X<-data[,c('a','b','s')]
X<-data[,c('a','b','s')]
one_hot_encoding <- model.matrix(~ . - 1, X)
dim(X)
dim(one_hot_encoding)
svd_result <- svd(one_hot_encoding)
# Extract the singular values
singular_values <- svd_result$d
# Find the largest and smallest singular values
largest_singular_value <- max(singular_values)
smallest_singular_value <- min(singular_values)
largest_singular_value/smallest_singular_value
x.4w <- dummy.matrix(NF=4, NL=c(20,10,3,4))
svd_result <- svd(x.4w)
# Extract the singular values
singular_values <- svd_result$d
# Find the largest and smallest singular values
largest_singular_value <- max(singular_values)
smallest_singular_value <- min(singular_values)
largest_singular_value/smallest_singular_value
x.3w <- dummy.matrix(NF=3, NL=c(38,5,6))
x.3w[x.3w<0]<-0
svd_result <- svd(x.3w)
# Extract the singular values
singular_values <- svd_result$d
# Find the largest and smallest singular values
largest_singular_value <- max(singular_values)
smallest_singular_value <- min(singular_values)
largest_singular_value/smallest_singular_value
dim(x.3w)
37+4+5 +37*9+20
dim(x.3w)
37+4+5 +37*9+20
x<-x.3w[,c(400:1139)]
svd_result <- svd(x.3w)
# Extract the singular values
singular_values <- svd_result$d
# Find the largest and smallest singular values
largest_singular_value <- max(singular_values)
smallest_singular_value <- min(singular_values)
largest_singular_value/smallest_singular_value
x.3w <- dummy.matrix(NF=3, NL=c(37,4,5))
x<-cbind(x.3w, rep(1, nrow(mat)))
x<-cbind(x.3w, rep(1, nrow(x.3w)))
svd_result <- svd(x)
# Extract the singular values
singular_values <- svd_result$d
# Find the largest and smallest singular values
largest_singular_value <- max(singular_values)
smallest_singular_value <- min(singular_values)
largest_singular_value/smallest_singular_value
unique(data$b)
data$y[data$y]>100
data$y[data$y]>100
data$y[data$y>100]
