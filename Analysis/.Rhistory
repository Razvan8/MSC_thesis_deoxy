all_beta_functions(beta_true, coefs[range_main])
all_beta_functions(theta_true, coefs[range_theta])
all_beta_functions(psi_true, coefs[range_psi])
lasso_model <- glmnet(X, y_all, alpha = 1, lambda=0.01, intercept = FALSE)
coefs<-coefficients(lasso_model)[-1]
#print(coefficients(lasso_model))
#coefs
#sum(coefs==0)
#print(coefs[range_theta])
all_beta_functions(beta_true, coefs[range_main])
all_beta_functions(theta_true, coefs[range_theta])
all_beta_functions(psi_true, coefs[range_psi])
beta_true
coefs[range_main]
lasso_main <- glmnet(X_only_main, y_all, alpha = 1, lambda=0.005)
coefs_lasso_main<-coefficients(lasso_main)[-1]
all_beta_functions(beta_true, coefs_lasso_main)#lasso main
lasso_model <- glmnet(X, y_all, alpha = 1, lambda=0.005, intercept = FALSE)
coefs<-coefficients(lasso_model)[-1]
#print(coefficients(lasso_model))
#coefs
#sum(coefs==0)
#print(coefs[range_theta])
all_beta_functions(beta_true, coefs[range_main])
all_beta_functions(theta_true, coefs[range_theta])
all_beta_functions(psi_true, coefs[range_psi])
lasso_model <- glmnet(X, y_all, alpha = 1, lambda=0.005)
coefs<-coefficients(lasso_model)[-1]
#print(coefficients(lasso_model))
#coefs
#sum(coefs==0)
#print(coefs[range_theta])
all_beta_functions(beta_true, coefs[range_main])
all_beta_functions(theta_true, coefs[range_theta])
all_beta_functions(psi_true, coefs[range_psi])
sum(coefs[c(range_main,range_theta)]==0)
lasso_main <- glmnet(X_only_main, y_all, alpha = 1, lambda=0.005)
coefs_lasso_main<-coefficients(lasso_main)[-1]
all_beta_functions(beta_true, coefs_lasso_main)#lasso main
coefs_lasso_main<-coefs[range_main]
all_beta_functions(beta_true, coefs_lasso_main)#lasso main
beta_bound<-coefs_lasso_main*3
theta_init<-get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3)*1
lmd<-55
t<-5e-3
r_main<-y_all- X_only_main%*%coefs_lasso_main -coefficients(lasso_main)[1]
source(file.path(libs_path,'WeakHierNetSeq12_3way.R'))
seq12<-WeakHierNet_seq_2way3(X=X_2way, theta_init=theta_init, y=r_main, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-8, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3, scale=FALSE)
fit12<-seq12$fit( X=X_2way, theta_init=theta_init, y=r_main, lambda=lmd,beta_bound=beta_bound, t=t, tol=1e-8, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3)
all_beta_functions(theta_true, fit12$vec_theta_hat)#lasso all
lmd<-30
t<-1e-3
r_main<-y_all- X_only_main%*%coefs_lasso_main -coefficients(lasso_main)[1]
source(file.path(libs_path,'WeakHierNetSeq12_3way.R'))
seq12<-WeakHierNet_seq_2way3(X=X_2way, theta_init=theta_init, y=r_main, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-8, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3, scale=FALSE)
fit12<-seq12$fit( X=X_2way, theta_init=theta_init, y=r_main, lambda=lmd,beta_bound=beta_bound, t=t, tol=1e-8, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3)
lmd<-30
t<-1e-4
r_main<-y_all- X_only_main%*%coefs_lasso_main -coefficients(lasso_main)[1]
source(file.path(libs_path,'WeakHierNetSeq12_3way.R'))
seq12<-WeakHierNet_seq_2way3(X=X_2way, theta_init=theta_init, y=r_main, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-8, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3, scale=FALSE)
fit12<-seq12$fit( X=X_2way, theta_init=theta_init, y=r_main, lambda=lmd,beta_bound=beta_bound, t=t, tol=1e-8, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3)
lmd<-30
t<-1e-5
r_main<-y_all- X_only_main%*%coefs_lasso_main -coefficients(lasso_main)[1]
source(file.path(libs_path,'WeakHierNetSeq12_3way.R'))
seq12<-WeakHierNet_seq_2way3(X=X_2way, theta_init=theta_init, y=r_main, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-8, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3, scale=FALSE)
fit12<-seq12$fit( X=X_2way, theta_init=theta_init, y=r_main, lambda=lmd,beta_bound=beta_bound, t=t, tol=1e-8, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3)
all_beta_functions(theta_true, fit12$vec_theta_hat)#lasso all
lmd<-30
t<-5e-6
r_main<-y_all- X_only_main%*%coefs_lasso_main -coefficients(lasso_main)[1]
source(file.path(libs_path,'WeakHierNetSeq12_3way.R'))
seq12<-WeakHierNet_seq_2way3(X=X_2way, theta_init=theta_init, y=r_main, beta_bound=beta_bound, lambda=lmd, t=t, tol=1e-8, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3, scale=FALSE)
fit12<-seq12$fit( X=X_2way, theta_init=theta_init, y=r_main, lambda=lmd,beta_bound=beta_bound, t=t, tol=1e-8, max_iter=5000, eps=1e-8,l1=l1,l2=l2,l3=l3)
all_beta_functions(theta_true, fit12$vec_theta_hat)#lasso all
sum(fit12$vec_theta_hat==0)
r2(y_all, coefficients(lasso_main)[1] + X_only_main%*%coefs_lasso_main +X_2way%*%fit12$vec_theta_hat)
library(glmnet)
#library(hierNet)
r2 <- function(actual, predicted) {
mean_actual <- mean(actual)
total_sum_squares <- sum((actual - mean_actual)^2)
residual_sum_squares <- sum((actual - predicted)^2)
# Calculate R-squared
r_squared <- 1 - (residual_sum_squares / total_sum_squares)
return(r_squared)
}
# Set seed for reproducibility
set.seed(123)
# Define the number of rows
n <- 100
# Create the matrix with specified means
# Since we want to create columns with specific means, we generate random data and then adjust the means
X <- matrix(rnorm(n * 8), n, 8)
# Adjust the means of each column
X[, 1] <- X[, 1] - mean(X[, 1]) + 1
X[, 2] <- X[, 2] - mean(X[, 2]) + 2
X[, 3] <- X[, 3] - mean(X[, 3]) + 3
X[, 4] <- X[, 4] - mean(X[, 4]) + 4
X[, 5] <- X[, 5] - mean(X[, 1]) + 1
X[, 6] <- X[, 6] - mean(X[, 2]) + 2
X[, 7] <- X[, 7] - mean(X[, 3]) + 3
X[, 8] <- X[, 8] - mean(X[, 4]) + 4
pairwise_products <- NULL
for (i in 1:ncol(X)) {
for (j in i:ncol(X)) {
new_col <- X[, i] * X[, j]
pairwise_products <- cbind(pairwise_products, new_col)
}
}
# Combine the original matrix, pairwise products, and response variable into a data frame
X <- data.frame(X, pairwise_products)
y <- 1 * X[, 1] + 4 * X[, 2] + 7 * X[, 3] - 3 * X[, 4] +5*X[,5]-7*X[,6] + 3*X[,12] -4*X[,13] +5*X[,14] -7*X[,23] +8*X[,24]  +10*X[,30] -11*X[,31]+8*X[,32]
lasso_model <- glmnet(X,y , alpha = 1, lambda=1)
coefs<-coefficients(lasso_model)[-1]
interc<-coefficients(lasso_model)[1]
coefficients(lasso_model)
print(r2(y, as.matrix(X)%*%matrix(coefs, ncol=1)+interc))
fit=hierNet(as.matrix(X), y, lam=20, diagonal = FALSE, stand.main=FALSE,tol=1e-10)
### SAME BUT CENTERED X
n <- 100
# Create the matrix with specified means
# Since we want to create columns with specific means, we generate random data and then adjust the means
X <- matrix(rnorm(n * 8), n, 8)
# Adjust the means of each column
X[, 1] <- X[, 1] - mean(X[, 1])
X[, 2] <- X[, 2] - mean(X[, 2])
X[, 3] <- X[, 3] - mean(X[, 3])
X[, 4] <- X[, 4] - mean(X[, 4])
X[, 5] <- X[, 5] - mean(X[, 1])
X[, 6] <- X[, 6] - mean(X[, 2])
X[, 7] <- X[, 7] - mean(X[, 3])
X[, 8] <- X[, 8] - mean(X[, 4])
pairwise_products <- NULL
for (i in 1:ncol(X)) {
for (j in i:ncol(X)) {
new_col <- X[, i] * X[, j]
pairwise_products <- cbind(pairwise_products, new_col)
}
}
# Combine the original matrix, pairwise products, and response variable into a data frame
X <- data.frame(X, pairwise_products)
# Verify the means
colMeans(X)
eigs=svd(X)$d
print(max(eigs)/min(eigs))
# Create the response variable y
y <- 1 * X[, 1] + 4 * X[, 2] + 7 * X[, 3] - 3 * X[, 4] +5*X[,5]-7*X[,6] + 3*X[,12] -4*X[,13] +5*X[,14] -7*X[,23] +8*X[,24]  +10*X[,30] -11*X[,31]+8*X[,32]
lasso_model <- glmnet(X,y , alpha = 1, lambda=0.1)
coefs<-coefficients(lasso_model)[-1]
coefficients(lasso_model)
lasso_model <- glmnet(X,y , alpha = 1, lambda=1)
coefs<-coefficients(lasso_model)[-1]
coefficients(lasso_model)
X[,1]
# Set seed for reproducibility
set.seed(123)
# Define the number of rows
n <- 100
# Create the matrix with specified means
# Since we want to create columns with specific means, we generate random data and then adjust the means
X <- matrix(rnorm(n * 8), n, 8)
# Adjust the means of each column
X[, 1] <- X[, 1] - mean(X[, 1]) + 1
X[, 2] <- X[, 2] - mean(X[, 2]) + 2
X[, 3] <- X[, 3] - mean(X[, 3]) + 3
X[, 4] <- X[, 4] - mean(X[, 4]) + 4
X[, 5] <- X[, 5] - mean(X[, 1]) + 1
X[, 6] <- X[, 6] - mean(X[, 2]) + 2
X[, 7] <- X[, 7] - mean(X[, 3]) + 3
X[, 8] <- X[, 8] - mean(X[, 4]) + 4
pairwise_products <- NULL
for (i in 1:ncol(X)) {
for (j in i:ncol(X)) {
new_col <- X[, i] * X[, j]
pairwise_products <- cbind(pairwise_products, new_col)
}
}
# Combine the original matrix, pairwise products, and response variable into a data frame
X <- data.frame(X, pairwise_products)
eigs=svd(X)$d
print(max(eigs)/min(eigs))
eigs
# Verify the means
colMeans(X)
# Create the response variable y
y <- 1 * X[, 1] + 4 * X[, 2] + 7 * X[, 3] - 3 * X[, 4] +5*X[,5]-7*X[,6] + 3*X[,12] -4*X[,13] +5*X[,14] -7*X[,23] +8*X[,24]  +10*X[,30] -11*X[,31]+8*X[,32]
lasso_model <- glmnet(X,y , alpha = 1, lambda=1, standardize = TRUE)
coefs<-coefficients(lasso_model)[-1]
interc<-coefficients(lasso_model)[1]
coefficients(lasso_model)
lasso_model <- glmnet(X,y , alpha = 1, lambda=1, standardize = FALSE)
coefs<-coefficients(lasso_model)[-1]
interc<-coefficients(lasso_model)[1]
coefficients(lasso_model)
library(glmnet)
#library(hierNet)
r2 <- function(actual, predicted) {
mean_actual <- mean(actual)
total_sum_squares <- sum((actual - mean_actual)^2)
residual_sum_squares <- sum((actual - predicted)^2)
# Calculate R-squared
r_squared <- 1 - (residual_sum_squares / total_sum_squares)
return(r_squared)
}
# Set seed for reproducibility
set.seed(123)
# Define the number of rows
n <- 100
# Create the matrix with specified means
# Since we want to create columns with specific means, we generate random data and then adjust the means
X <- matrix(rnorm(n * 8), n, 8)
# Adjust the means of each column
X[, 1] <- X[, 1] - mean(X[, 1]) + 1
X[, 2] <- X[, 2] - mean(X[, 2]) + 2
X[, 3] <- X[, 3] - mean(X[, 3]) + 3
X[, 4] <- X[, 4] - mean(X[, 4]) + 4
X[, 5] <- X[, 5] - mean(X[, 1]) + 1
X[, 6] <- X[, 6] - mean(X[, 2]) + 2
X[, 7] <- X[, 7] - mean(X[, 3]) + 3
X[, 8] <- X[, 8] - mean(X[, 4]) + 4
pairwise_products <- NULL
for (i in 1:ncol(X)) {
for (j in i:ncol(X)) {
new_col <- X[, i] * X[, j]
pairwise_products <- cbind(pairwise_products, new_col)
}
}
# Combine the original matrix, pairwise products, and response variable into a data frame
X <- data.frame(X, pairwise_products)
eigs=svd(X)$d
print(max(eigs)/min(eigs))
eigs
# Verify the means
colMeans(X)
# Create the response variable y
y <- 3+ 1 * X[, 1] + 4 * X[, 2] + 7 * X[, 3] - 3 * X[, 4] +5*X[,5]-7*X[,6] + 3*X[,12] -4*X[,13] +5*X[,14] -7*X[,23] +8*X[,24]  +10*X[,30] -11*X[,31]+8*X[,32]
lasso_model <- glmnet(X,y , alpha = 1, lambda=1, standardize =TRUE)
coefs<-coefficients(lasso_model)[-1]
interc<-coefficients(lasso_model)[1]
coefficients(lasso_model)
X[,1]
X[,4]
X <- matrix(rnorm(n * 8), n, 8)
# Adjust the means of each column
#X[, 1] <- X[, 1] - mean(X[, 1]) + 1
#X[, 2] <- X[, 2] - mean(X[, 2]) + 2
#X[, 3] <- X[, 3] - mean(X[, 3]) + 3
#X[, 4] <- X[, 4] - mean(X[, 4]) + 4
#X[, 5] <- X[, 5] - mean(X[, 1]) + 1
#X[, 6] <- X[, 6] - mean(X[, 2]) + 2
#X[, 7] <- X[, 7] - mean(X[, 3]) + 3
#X[, 8] <- X[, 8] - mean(X[, 4]) + 4
pairwise_products <- NULL
for (i in 1:ncol(X)) {
for (j in i:ncol(X)) {
new_col <- X[, i] * X[, j]
pairwise_products <- cbind(pairwise_products, new_col)
}
}
# Combine the original matrix, pairwise products, and response variable into a data frame
X <- data.frame(X, pairwise_products)
eigs=svd(X)$d
print(max(eigs)/min(eigs))
eigs
# Verify the means
colMeans(X)
# Create the response variable y
y <- 3+ 1 * X[, 1] + 4 * X[, 2] + 7 * X[, 3] - 3 * X[, 4] +5*X[,5]-7*X[,6] + 3*X[,12] -4*X[,13] +5*X[,14] -7*X[,23] +8*X[,24]  +10*X[,30] -11*X[,31]+8*X[,32]
lasso_model <- glmnet(X,y , alpha = 1, lambda=1, standardize =TRUE)
coefs<-coefficients(lasso_model)[-1]
interc<-coefficients(lasso_model)[1]
coefficients(lasso_model)
lasso_model <- glmnet(X,y , alpha = 1, lambda=0.5, standardize =TRUE)
coefs<-coefficients(lasso_model)[-1]
interc<-coefficients(lasso_model)[1]
coefficients(lasso_model)
apply(X,2, mean)
library(glmnet)
library(glmnet)
libs_path<-file.path("..","libs")
source(file.path(libs_path,'Create_synthetic_datasets.R'))
source(file.path(libs_path,'WeakHierNet_Class_corrected_unscaled.R'))
source(file.path(libs_path,'WeakHierNetSeq23_3way.R'))
source(file.path(libs_path,'hierarchy_tests.R'))
data=create_hier_dataset_paper_many_main()
X<-data$X
y<-data$y$obs
beta_trues<-data$beta[-1,]  ##without intercept
l1=6
l2=5
l3=4
#y
#beta_trues
range_main<-c(1: (l1+l2+l3) )
range_theta<-c( (l1+l2+l3+1) : (l1+l2+l3+l1*(l2+l3)+l2*l3) )
range_psi<-c(  (l1+l2+l3+ 1+ l1*(l2+l3)+l2*l3): (l1+l2+l3+ l1*(l2+l3)+l2*l3+l1*l2*l3) )
colnames(X)[range_main]
beta_true<-beta_trues[range_main]
theta_true<-beta_trues[range_theta]
psi_true<-beta_trues[range_psi]
X_only_main<-X[,range_main]
X_2way<-X[,range_theta]
X_3way<-X[,range_psi]
y_all<-as.vector(y[,1])
lasso_model <- glmnet(X, y_all, alpha = 1, lambda=0.32)
coefs<-coefficients(lasso_model)[-1]
coefs
all_beta_functions(beta_true, coefs[range_main])
all_beta_functions(theta_true, coefs[range_theta])
all_beta_functions(psi_true, coefs[range_psi])
test_hierarchy_layer12(coefs[range_main], get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3) )
test_hierarchy_layer23( get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3), get_psi_from_psi_vec3(coefs[range_psi],l1=l1,l2=l2,l3=l3) )
lasso_model <- glmnet(X, y_all, alpha = 1, lambda=0.32, standardize = FALSE)
coefs<-coefficients(lasso_model)[-1]
coefs
#sum(coefs==0)
#print(coefs[range_theta])
all_beta_functions(beta_true, coefs[range_main])
all_beta_functions(theta_true, coefs[range_theta])
all_beta_functions(psi_true, coefs[range_psi])
test_hierarchy_layer12(coefs[range_main], get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3) )
test_hierarchy_layer23( get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3), get_psi_from_psi_vec3(coefs[range_psi],l1=l1,l2=l2,l3=l3) )
lasso_model <- glmnet(X, y_all, alpha = 1, lambda=0.32, standardize = FALSE)
coefs<-coefficients(lasso_model)[-1]
coefs
#sum(coefs==0)
#print(coefs[range_theta])
all_beta_functions(beta_true, coefs[range_main])
all_beta_functions(theta_true, coefs[range_theta])
all_beta_functions(psi_true, coefs[range_psi])
test_hierarchy_layer12(coefs[range_main], get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3) )
test_hierarchy_layer23( get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3), get_psi_from_psi_vec3(coefs[range_psi],l1=l1,l2=l2,l3=l3) )
lasso_model <- glmnet(X, y_all, alpha = 1, lambda=0.28, standardize = FALSE)
coefs<-coefficients(lasso_model)[-1]
coefs
#sum(coefs==0)
#print(coefs[range_theta])
all_beta_functions(beta_true, coefs[range_main])
all_beta_functions(theta_true, coefs[range_theta])
all_beta_functions(psi_true, coefs[range_psi])
test_hierarchy_layer12(coefs[range_main], get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3) )
test_hierarchy_layer23( get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3), get_psi_from_psi_vec3(coefs[range_psi],l1=l1,l2=l2,l3=l3) )
lasso_model <- glmnet(X, y_all, alpha = 1, lambda=0.1, standardize = FALSE)
coefs<-coefficients(lasso_model)[-1]
coefs
#sum(coefs==0)
#print(coefs[range_theta])
all_beta_functions(beta_true, coefs[range_main])
all_beta_functions(theta_true, coefs[range_theta])
all_beta_functions(psi_true, coefs[range_psi])
test_hierarchy_layer12(coefs[range_main], get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3) )
test_hierarchy_layer23( get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3), get_psi_from_psi_vec3(coefs[range_psi],l1=l1,l2=l2,l3=l3) )
lasso_model <- glmnet(X, y_all, alpha = 1, lambda=0.3, standardize = FALSE)
coefs<-coefficients(lasso_model)[-1]
coefs
#sum(coefs==0)
#print(coefs[range_theta])
all_beta_functions(beta_true, coefs[range_main])
all_beta_functions(theta_true, coefs[range_theta])
all_beta_functions(psi_true, coefs[range_psi])
test_hierarchy_layer12(coefs[range_main], get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3) )
test_hierarchy_layer23( get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3), get_psi_from_psi_vec3(coefs[range_psi],l1=l1,l2=l2,l3=l3) )
lasso_model <- glmnet(X, y_all, alpha = 1, lambda=0.1, standardize = FALSE)
coefs<-coefficients(lasso_model)[-1]
coefs
#sum(coefs==0)
#print(coefs[range_theta])
all_beta_functions(beta_true, coefs[range_main])
all_beta_functions(theta_true, coefs[range_theta])
all_beta_functions(psi_true, coefs[range_psi])
test_hierarchy_layer12(coefs[range_main], get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3) )
test_hierarchy_layer23( get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3), get_psi_from_psi_vec3(coefs[range_psi],l1=l1,l2=l2,l3=l3) )
lasso_model <- glmnet(X, y_all, alpha = 1, lambda=0.03, standardize = TRUE)
coefs<-coefficients(lasso_model)[-1]
#coefs
#sum(coefs==0)
#print(coefs[range_theta])
all_beta_functions(beta_true, coefs[range_main])
all_beta_functions(theta_true, coefs[range_theta])
all_beta_functions(psi_true, coefs[range_psi])
lasso_model <- glmnet(X, y_all, alpha = 1, lambda=0.30, standardize = TRUE)
coefs<-coefficients(lasso_model)[-1]
#coefs
#sum(coefs==0)
#print(coefs[range_theta])
all_beta_functions(beta_true, coefs[range_main])
all_beta_functions(theta_true, coefs[range_theta])
all_beta_functions(psi_true, coefs[range_psi])
test_hierarchy_layer12(coefs[range_main], get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3) )
test_hierarchy_layer23( get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3), get_psi_from_psi_vec3(coefs[range_psi],l1=l1,l2=l2,l3=l3) )
lmd<-cv.glmnet(X, y_all, alpha = 1,standardize=FALSE)$lambda.min
lmd
lasso_model <- glmnet(X, y_all, alpha = 1, lambda=lmd, standardize = FALSE)
all_beta_functions(beta_true, coefs[range_main])
all_beta_functions(theta_true, coefs[range_theta])
all_beta_functions(psi_true, coefs[range_psi])
test_hierarchy_layer12(coefs[range_main], get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3) )
test_hierarchy_layer23( get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3), get_psi_from_psi_vec3(coefs[range_psi],l1=l1,l2=l2,l3=l3) )
lmd<-cv.glmnet(X, y_all, alpha = 1,standardize=TRUE)$lambda.min
lmd
lasso_model <- glmnet(X, y_all, alpha = 1, lambda=lmd, standardize = TRUE)
coefs<-coefficients(lasso_model)[-1]
#coefs
#sum(coefs==0)
#print(coefs[range_theta])
all_beta_functions(beta_true, coefs[range_main])
all_beta_functions(theta_true, coefs[range_theta])
all_beta_functions(psi_true, coefs[range_psi])
test_hierarchy_layer12(coefs[range_main], get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3) )
test_hierarchy_layer23( get_theta_hat_from_vec3(coefs[range_theta],l1=l1,l2=l2,l3=l3), get_psi_from_psi_vec3(coefs[range_psi],l1=l1,l2=l2,l3=l3) )
library(glmnet)
libs_path<-file.path("..","libs")
source(file.path(libs_path,'generate_dummy01.R'))
source(file.path(libs_path,'WeakHierNet_Class_corrected_unscaled.R'))
source(file.path(libs_path,'WeakHierNetSeq23_3way.R'))
source(file.path(libs_path,'hierarchy_tests.R'))
source(file.path(libs_path,'helper_functions.R'))
l1=6
l2=5
l3=4
data=generate_data01(nlevels=c(l1,l2,l3), error_sd=0, intercept=0)
X<-as.matrix(data$X)
y<-data$y
beta_trues<-data$beta  ##without intercept
mean(y)
#y
#beta_trues
range_main<-c(1: (l1+l2+l3) )
range_theta<-c( (l1+l2+l3+1) : (l1+l2+l3+l1*(l2+l3)+l2*l3) )
range_psi<-c(  (l1+l2+l3+ 1+ l1*(l2+l3)+l2*l3): (l1+l2+l3+ l1*(l2+l3)+l2*l3+l1*l2*l3) )
colnames(X)[range_main]
beta_true<-beta_trues[range_main]
theta_true<-beta_trues[range_theta]
psi_true<-beta_trues[range_psi]
zeros_beta_true<-sum(beta_true==0)
zeros_theta_true<-sum(theta_true==0)
zeros_psi_true<-sum(psi_true==0)
total_zeros<-zeros_beta_true+zeros_theta_true+zeros_psi_true
lmd<-cv.glmnet(X, y_all, alpha = 1,standardize=TRUE)$lambda.min
####Sparse hierarchical simulations####
library(glmnet)
libs_path<-file.path("..","libs")
source(file.path(libs_path,'generate_dummy01.R'))
source(file.path(libs_path,'WeakHierNet_Class_corrected_unscaled.R'))
source(file.path(libs_path,'WeakHierNetSeq23_3way.R'))
source(file.path(libs_path,'hierarchy_tests.R'))
source(file.path(libs_path,'helper_functions.R'))
l1=6
l2=5
l3=4
data=generate_data01(nlevels=c(l1,l2,l3), error_sd=0, intercept=0)
X<-as.matrix(data$X)
y<-data$y
beta_trues<-data$beta  ##without intercept
mean(y)
#y
#beta_trues
range_main<-c(1: (l1+l2+l3) )
range_theta<-c( (l1+l2+l3+1) : (l1+l2+l3+l1*(l2+l3)+l2*l3) )
range_psi<-c(  (l1+l2+l3+ 1+ l1*(l2+l3)+l2*l3): (l1+l2+l3+ l1*(l2+l3)+l2*l3+l1*l2*l3) )
colnames(X)[range_main]
beta_true<-beta_trues[range_main]
theta_true<-beta_trues[range_theta]
psi_true<-beta_trues[range_psi]
zeros_beta_true<-sum(beta_true==0)
zeros_theta_true<-sum(theta_true==0)
zeros_psi_true<-sum(psi_true==0)
total_zeros<-zeros_beta_true+zeros_theta_true+zeros_psi_true
print(zeros_beta_true)
print(zeros_theta_true)
print(zeros_psi_true)
print(total_zeros)
print(length(beta_trues))
dim(X)
# Perform singular value decomposition
svd_decomposition <- svd(X)
# Extract singular values
singular_values <- svd_decomposition$d
# Calculate the condition number
condition_number <- max(singular_values) / min(singular_values)
# Print the condition number
print(condition_number)
X_only_main<-X[,range_main]
X_2way<-X[,range_theta]
X_3way<-X[,range_psi]
y_all<-as.vector(y[,1])
################################### ANALYSIS WITH LASSO ##############################################################
####Lasso only on main effects
#lasso_model <- glmnet(X[,range_main], y_all, alpha = 1, lambda=0.3)
#coefs<-coefficients(lasso_model)[-1]
#coefs
#sum(coefs==0)
#all_beta_functions(beta_true, coefs[range_main])
lmd<-cv.glmnet(X, y_all, alpha = 1,standardize=TRUE)$lambda.min
lmd
lasso_model <- glmnet(X, y_all, alpha = 1, lambda=lmd, standardize = TRUE)
coefs<-coefficients(lasso_model)[-1]
all_beta_functions(beta_true, coefs[range_main])
all_beta_functions(theta_true, coefs[range_theta])
all_beta_functions(psi_true, coefs[range_psi])
lmd<-cv.glmnet(X, y_all, alpha = 1,standardize=FALSE)$lambda.min
lmd
lasso_model <- glmnet(X, y_all, alpha = 1, lambda=lmd, standardize = FALSE)
coefs<-coefficients(lasso_model)[-1]
#coefs
#sum(coefs==0)
#print(coefs[range_theta])
all_beta_functions(beta_true, coefs[range_main])
all_beta_functions(theta_true, coefs[range_theta])
all_beta_functions(psi_true, coefs[range_psi])
