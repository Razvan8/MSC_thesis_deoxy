#2 way
#beta[21]=2 #A1:B5
#beta[25]=2 #A1:B9
#beta[91]=9 #B9:C3
#3way
#beta[106]=2  #A1B5C3  sau 106-91=15
#beta[105]=-1  #A1B5C2             =14
#beta[128]=-2  #A1B9C3  sau 128-91=37
#####
lmd<-10
t<-1e-3
myWeakHierNet<-WeakHierNetUnscaled (X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all, lambda=lmd, t=t, tol=1e-8,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all, lambda=lmd, t=t, tol=1e-8,
max_iter=10000, eps=1e-8,l1=4,l2=9,l3=3 )
print(fitted$Beta_hat_plus-fitted$Beta_hat_minus)
print(fitted$vec_theta_hat)
print(fitted$Theta_hat)
print(myWeakHierNet$R2_score(fitted,X_only_main,y_all))
#Residuals
predicted<-myWeakHierNet$predict(fitted, X_only_main)
r_2way<-y_all-predicted
##Fit in on residuals
lasso_model <- glmnet(X_3way, r_2way, alpha = 1, lambda=1)
coefficients(lasso_model)
psi_init<-get_psi_from_psi_vec3(as.vector(coefficients(lasso_model)[-1]),l1=4,l2=9,l3=3) ## psi, get intercept out
theta_bound<-fitted$Theta_hat +t(fitted$Theta_hat) ##bound
lambda<-10
myWeakHierNet_seq3 <- WeakHierNet_seq3(X=X_3way, psi_init=psi_init, y=r_2way, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=5000, eps=1e-8,
l1=4,l2=9,l3=3, scale = FALSE)
# Fit the model
fitted=myWeakHierNet_seq3$fit(X=X_3way, psi_init=psi_init, y=r_2way, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=5000,
eps=1e-8,l1=4,l2=9,l3=3)
r2(r_2way,myWeakHierNet_seq3$predict(fitted,X_3way))
print(fitted$vec_psi_hat)
print(fitted$Theta_hat)
print(fitted$vec_theta_hat)
myWeakHierNet<-WeakHierNetUnscaled (X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all, lambda=lmd, t=t, tol=1e-8,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all, lambda=lmd, t=t, tol=1e-8,
max_iter=10000, eps=1e-8,l1=4,l2=9,l3=3 )
print(fitted$Beta_hat_plus-fitted$Beta_hat_minus)
print(fitted$vec_theta_hat)
print(fitted$Theta_hat)
print(fitted$vec_theta_hat)
fit=hierNet(X_only_main, y_all, lam=1, diagonal = FALSE, stand.main=FALSE,tol=1e-6)
#fit
#y_pred_train=predict(fit,X_only_main)
#sum(fit$bp+fit$bn)
#$sum(abs(fit$th))
print(get_vec_theta_hat3(fit$th,l1=4, l2=9, l3=3))
fit=hierNet(X_only_main, y_all, lam=10, diagonal = FALSE, stand.main=FALSE,tol=1e-6)
print(get_vec_theta_hat3(fit$th,l1=4, l2=9, l3=3))
sign(0)
sign(0.1)
sign(0.1)==sign(0)
hamming_distance_sign(beta, beta_hat,scale=TRUE)
hamming_distance_sign<-function(beta, beta_hat,scale=TRUE)
{total=length(beta)
correct=sum(sign(beta)==sign(beta_hat))
if (scale==TRUE)
return(100-correct/total*100)
return(total-corect)}
hamming_distance_sign(c(1,2,3,-1,-2,-3,4), c(1,2,3,4,5,6,7))
hamming_distance_sign(c(1,2,3,-1,-2,-3,4,8,9,10), c(1,2,3,4,5,6,7,8,9,10))
hamming_distance_sign(c(1,2,3,-1,-2,-3,4,8,9,10), c(1,2,3,4,5,6,7,8,-9,10))
d2_scaled<-function(beta, beta_hat)
return(nomr(beta-beta_hat, type="2")/length(beta))
print(d2_scaled(c(1,2,3,4),c(0,0,0,1)))
hamming_distance_sign<-function(beta, beta_hat,scale=TRUE)
{total=length(beta)
correct=sum(sign(beta)==sign(beta_hat))
if (scale==TRUE)
return(100-correct/total*100)
return(total-corect)}
d2_scaled<-function(beta, beta_hat)
return(norm(beta-beta_hat, type="2")/length(beta))
print(d2_scaled(c(1,2,3,4),c(0,0,0,1)))
hamming_distance_sign<-function(beta, beta_hat,scale=TRUE)
{total=length(beta)
correct=sum(sign(beta)==sign(beta_hat))
if (scale==TRUE)
return(100-correct/total*100)
return(total-corect)}
d2_scaled<-function(beta, beta_hat)
return(norm(beta-beta_hat, type="2")^2/length(beta))
print(d2_scaled(c(1,2,3,4),c(0,0,0,1)))
hamming_distance_sign<-function(beta, beta_hat,scale=TRUE)
{total=length(beta)
correct=sum(sign(beta)==sign(beta_hat))
if (scale==TRUE)
return(100-correct/total*100)
return(total-corect)}
d2_scaled<-function(beta, beta_hat)
return(norm(beta-beta_hat, type="2"))
print(d2_scaled(c(1,2,3,4),c(0,0,0,1)))
hamming_distance_sign<-function(beta, beta_hat,scale=TRUE)
{total=length(beta)
correct=sum(sign(beta)==sign(beta_hat))
if (scale==TRUE)
return(100-correct/total*100)
return(total-corect)}
d2_scaled<-function(beta, beta_hat)
return(norm(beta-beta_hat, type="2"))^2
print(d2_scaled(c(1,2,3,4),c(0,0,0,1)))
hamming_distance_sign<-function(beta, beta_hat,scale=TRUE)
{total=length(beta)
correct=sum(sign(beta)==sign(beta_hat))
if (scale==TRUE)
return(100-correct/total*100)
return(total-corect)}
d2_scaled<-function(beta, beta_hat)
return(norm(beta-beta_hat, type="2"))^2
print(d2_scaled(c(1,2,3,4),c(0,0,0,1)))
hamming_distance_sign<-function(beta, beta_hat,scale=TRUE)
{total=length(beta)
correct=sum(sign(beta)==sign(beta_hat))
if (scale==TRUE)
return(100-correct/total*100)
return(total-corect)}
d2_scaled<-function(beta, beta_hat)
return(norm(beta-beta_hat, type="2")^2)
print(d2_scaled(c(1,2,3,4),c(0,0,0,1)))
MSE_beta<-function(beta, beta_hat)
return(norm(beta-beta_hat, type="2")^2/length(beta))
print(MSE_beta(c(1,2,3,4),c(0,0,0,1)))
zeros_found_correct(c(0,0,0,0,1),c(1,2,0,1,0))
hamming_distance_sign<-function(beta, beta_hat,scale=TRUE)
{total=length(beta)
correct=sum(sign(beta)==sign(beta_hat))
if (scale==TRUE)
return(100-correct/total*100)
return(total-corect)}
MSE_beta<-function(beta, beta_hat)
return(norm(beta-beta_hat, type="2")^2/length(beta))
print(MSE_beta(c(1,2,3,4),c(0,0,0,1)))
zeros_found_correct<-function(beta,beta_hat) #percentage
idx_beta<-which(beta==0)
idx_beta_hat<-which(beta_hat)==0
zeros_found_correct<-function(beta,beta_hat) #percentage
idx_beta<-which(beta==0)
idx_beta_hat<-which(beta_hat)==0
zeros_found_correct<-function(beta,beta_hat) #percentage
idx_beta<-which(beta==0)
idx_beta_hat<-which(beta_hat==0)
zeros_found_correct<-function(beta,beta_hat) #percentage
idx_beta<-which(beta==0)
print(beta_hat)
zeros_found_correct<-function(beta,beta_hat) #percentage
idx_beta<-which(beta==0)
print(beta_hat)
zeros_found_correct<-function(beta,beta_hat) #percentage
{idx_beta<-which(beta==0)
print(beta_hat)
idx_beta_hat<-which(beta_hat==0)
return(length(intersect(idx_beta, idx_beta_hat))/length(idx_beta)*100)}
zeros_found_correct(beta = c(0, 0, 0, 0, 1), beta_hat = c(1, 2, 0, 1, 0))
zeros_found_correct(beta = c(0, 0, 0, 0, 1), beta_hat = c(1, 0, 0, 0, 0))
zeros_found_wrong<-function(beta,beta_hat) #FPR pred TRUE
{idx_beta<-which(beta!=0) #True Negatives
idx_beta_hat<-which(beta_hat==0) #pred positive
return(length(intersect(idx_beta, idx_beta_hat))/length(idx_beta)*100)}
zeros_found_wrong(beta = c(0, 0, 0, 0, 1), beta_hat = c(1, 0, 0, 0, 0))
zeros_found_wrong(beta = c(1, 0, 0, 0, 1), beta_hat = c(1, 0, 0, 0, 0))
zeros_found_wrong(beta = c(1, 1, 0, 0, 1), beta_hat = c(1, 0, 0, 0, 0))
TPR_zeros<-function(beta,beta_hat) #TPR-sensitivity (TP /(TP+FN))
{idx_beta<-which(beta0=0) #pred as positives
idx_beta_hat<-which(beta_hat==0) ## True positives
return( length(intersect(idx_beta, idx_beta_hat))/length(idx_beta)*100)}
TPR_zeros(beta = c(0, 0, 0, 0, 1), beta_hat = c(1, 0, 0, 0, 0))
TPR_zeros<-function(beta,beta_hat) #TPR-sensitivity (TP /(TP+FN))
{idx_beta<-which(beta==0) #pred as positives
idx_beta_hat<-which(beta_hat==0) ## True positives
return( length(intersect(idx_beta, idx_beta_hat))/length(idx_beta)*100)}
TPR_zeros(beta = c(0, 0, 0, 0, 1), beta_hat = c(1, 0, 0, 0, 0))
FPR_zeros<-function(beta,beta_hat) #FPR pred TRUE
{idx_beta<-which(beta!=0) #True Negatives
idx_beta_hat<-which(beta_hat==0) #pred positive
return(length(intersect(idx_beta, idx_beta_hat))/length(idx_beta)*100)}
FPR_zeros(beta = c(1, 1, 0, 0, 1), beta_hat = c(1, 0, 0, 0, 0))
library(Metrics)
library(hierNet)
library(caret)
library(dplyr)
library(Metrics)
libs_path<-file.path("..","libs")
source(file.path(libs_path,'helper_functions.R'))
source(file.path(libs_path,'WeakHierNet_Class_corrected_unscaled.R'))
data<-load_deoxi_flourination()
x.all<-data[,c('a','b','s')]
y.all<-data$p
X.all<-model.matrix(~ . - 1, data = x.all)*1
#X.all
X.all
dim(X.all)
X.all<-model.matrix(~ . , data = x.all)*1
#X.all
dim(X.all)
library(caret)
dummy <- dummyVars(" ~ .", data=x.all)
newdata <- data.frame(predict(dummy, newdata = x.all))
dim(newdata)
library(caret)
dummy <- dummyVars(" ~ .", data=x.all)
X.all<- data.frame(predict(dummy, newdata = x.all)) *1
dim(X.all)
X.all
fit=hierNet(X.all, y.all, lam=1e-8, diagonal = FALSE, stand.main=FALSE,center.main=FALSE, tol=1e-11)
print("-----Hiernet library-----")
##On train
fit=hierNet(X.all, y.all, lam=1e-8, diagonal = FALSE, stand.main=FALSE,center=FALSE, tol=1e-11)
t<-4e-5
#t<-0.001
lmd<-1e1
tol<-1e-10
#colnames(X.all)
source(file.path(libs_path,'WeakHierNet_Class_corrected_unscaled.R'))
myWeakHierNet<-WeakHierNetUnscaled (X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8, center=TRUE, standard_form=FALSE)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8)
###DATA PREP
library(Metrics)
library(hierNet)
library(caret)
library(dplyr)
library(Metrics)
libs_path<-file.path("..","libs")
source(file.path(libs_path,'helper_functions.R'))
source(file.path(libs_path,'WeakHierNet_Class_corrected_unscaled.R'))
data<-load_deoxi_flourination()
print(levels(data$a))# 37
print(levels(data$b))# 4
print(levels(data$s))# 5
x.all<-data[,c('a','b','s')]
y.all<-data$p
library(caret)
dummy <- dummyVars(" ~ .", data=x.all)
X.all<- data.frame(predict(dummy, newdata = x.all)) *1
dim(X.all)
X.all
index <- createDataPartition(y = y.all, p = 0.7, list = FALSE)
# Separate X_train, X_test, y_train, y_test
X_train <- X.all[index, ]
y_train <- y.all[index]
X_test <- X.all[-index,]
y_test <- y.all[-index]
print("-----Hiernet library-----")
##On train
fit=hierNet(X.all, y.all, lam=1e-8, diagonal = FALSE, stand.main=FALSE, tol=1e-11)
print("-----MY HIERNET-----")
t<-4e-5
#t<-0.001
lmd<-1e1
tol<-1e-10
#colnames(X.all)
source(file.path(libs_path,'WeakHierNet_Class_corrected_unscaled.R'))
myWeakHierNet<-WeakHierNetUnscaled (X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8, center=TRUE, standard_form=FALSE)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8)
dim(X.all)
X.all<- as.matrix(data.frame(predict(dummy, newdata = x.all))) *1
myWeakHierNet<-WeakHierNetUnscaled (X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8, center=TRUE, standard_form=FALSE)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8)
t<-4e-3
#t<-0.001
lmd<-1e1
tol<-1e-10
#colnames(X.all)
source(file.path(libs_path,'WeakHierNet_Class_corrected_unscaled.R'))
myWeakHierNet<-WeakHierNetUnscaled (X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8, center=TRUE, standard_form=FALSE)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8)
#fitted$Beta_hat_plus
sum(fitted$Beta_hat_minus+fitted$Beta_hat_plus)
sum(abs(fitted$Theta_hat))
print(fitted$Theta_hat)
print(lmd)
# Make predictions
new_X <- X.all
print("R2 score on all data")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X.all), y_true = y.all, verbose = TRUE)
t<-4e-3
#t<-0.001
lmd<-1e0
tol<-1e-10
#colnames(X.all)
source(file.path(libs_path,'WeakHierNet_Class_corrected_unscaled.R'))
myWeakHierNet<-WeakHierNetUnscaled (X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8, center=TRUE, standard_form=FALSE)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8)
#fitted$Beta_hat_plus
sum(fitted$Beta_hat_minus+fitted$Beta_hat_plus)
sum(abs(fitted$Theta_hat))
print(fitted$Theta_hat)
print(lmd)
# Make predictions
new_X <- X.all
print("R2 score on all data")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X.all), y_true = y.all, verbose = TRUE)
t<-4e-3
#t<-0.001
lmd<-1e-1
tol<-1e-10
#colnames(X.all)
source(file.path(libs_path,'WeakHierNet_Class_corrected_unscaled.R'))
myWeakHierNet<-WeakHierNetUnscaled (X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8, center=TRUE, standard_form=FALSE)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8)
t<-5e-3
#t<-0.001
lmd<-1e-1
tol<-1e-8
#colnames(X.all)
source(file.path(libs_path,'WeakHierNet_Class_corrected_unscaled.R'))
myWeakHierNet<-WeakHierNetUnscaled (X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8, center=TRUE, standard_form=FALSE)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8)
t<-4e-3
#t<-0.001
lmd<-1e-1
tol<-1e-8
#colnames(X.all)
source(file.path(libs_path,'WeakHierNet_Class_corrected_unscaled.R'))
myWeakHierNet<-WeakHierNetUnscaled (X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8, center=TRUE, standard_form=FALSE)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8)
#fitted$Beta_hat_plus
sum(fitted$Beta_hat_minus+fitted$Beta_hat_plus)
sum(abs(fitted$Theta_hat))
print(fitted$Theta_hat)
print(lmd)
# Make predictions
new_X <- X.all
print("R2 score on all data")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X.all), y_true = y.all, verbose = TRUE)
t<-4e-3
#t<-0.001
lmd<-3e-1
tol<-1e-8
#colnames(X.all)
source(file.path(libs_path,'WeakHierNet_Class_corrected_unscaled.R'))
myWeakHierNet<-WeakHierNetUnscaled (X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8, center=TRUE, standard_form=FALSE)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8)
#fitted$Beta_hat_plus
sum(fitted$Beta_hat_minus+fitted$Beta_hat_plus)
sum(abs(fitted$Theta_hat))
print(fitted$Theta_hat)
print(lmd)
# Make predictions
new_X <- X.all
print("R2 score on all data")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X.all), y_true = y.all, verbose = TRUE)
print("-----MY HIERNET-----")
t<-4e-3
#t<-0.001
lmd<-5e-2
tol<-1e-8
#colnames(X.all)
source(file.path(libs_path,'WeakHierNet_Class_corrected_unscaled.R'))
myWeakHierNet<-WeakHierNetUnscaled (X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8, center=TRUE, standard_form=FALSE)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8)
#fitted$Beta_hat_plus
sum(fitted$Beta_hat_minus+fitted$Beta_hat_plus)
sum(abs(fitted$Theta_hat))
print(fitted$Theta_hat)
print(lmd)
# Make predictions
new_X <- X.all
print("R2 score on all data")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X.all), y_true = y.all, verbose = TRUE)
myWeakHierNet<-WeakHierNetUnscaled (X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8, center=FALSE, standard_form=FALSE)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8)
t<-4e-4
#t<-0.001
lmd<-5e-2
tol<-1e-8
#colnames(X.all)
source(file.path(libs_path,'WeakHierNet_Class_corrected_unscaled.R'))
myWeakHierNet<-WeakHierNetUnscaled (X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8, center=FALSE, standard_form=FALSE)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8)
#fitted$Beta_hat_plus
sum(fitted$Beta_hat_minus+fitted$Beta_hat_plus)
sum(abs(fitted$Theta_hat))
print(fitted$Theta_hat)
print(lmd)
# Make predictions
new_X <- X.all
print("R2 score on all data")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X.all), y_true = y.all, verbose = TRUE)
print("-----MY HIERNET-----")
t<-5e-4
#t<-0.001
lmd<-5e-5
tol<-1e-8
#colnames(X.all)
source(file.path(libs_path,'WeakHierNet_Class_corrected_unscaled.R'))
myWeakHierNet<-WeakHierNetUnscaled (X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8, center=FALSE, standard_form=FALSE)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8)
sum(fitted$Beta_hat_minus+fitted$Beta_hat_plus)
sum(abs(fitted$Theta_hat))
print("R2 score on all data")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X.all), y_true = y.all, verbose = TRUE)
print("-----MY HIERNET-----")
t<-5e-4
#t<-0.001
lmd<-0
tol<-1e-8
#colnames(X.all)
source(file.path(libs_path,'WeakHierNet_Class_corrected_unscaled.R'))
myWeakHierNet<-WeakHierNetUnscaled (X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8, center=FALSE, standard_form=FALSE)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8)
#fitted$Beta_hat_plus
sum(fitted$Beta_hat_minus+fitted$Beta_hat_plus)
sum(abs(fitted$Theta_hat))
print(fitted$Theta_hat)
print(lmd)
# Make predictions
new_X <- X.all
print("R2 score on all data")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X.all), y_true = y.all, verbose = TRUE)
print("-----MY HIERNET-----")
t<-5e-4
#t<-0.001
lmd<-0
tol<-1e-9
#colnames(X.all)
source(file.path(libs_path,'WeakHierNet_Class_corrected_unscaled.R'))
myWeakHierNet<-WeakHierNetUnscaled (X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8, center=FALSE, standard_form=FALSE)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X.all, Beta_plus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X.all)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X.all)[2], nrow = dim(X.all)[2]), y=y.all, lambda=lmd, t=t, tol=tol,
max_iter=10000, eps=1e-8)
#fitted$Beta_hat_plus
sum(fitted$Beta_hat_minus+fitted$Beta_hat_plus)
sum(abs(fitted$Theta_hat))
print(fitted$Theta_hat)
print(lmd)
# Make predictions
new_X <- X.all
print("R2 score on all data")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X.all), y_true = y.all, verbose = TRUE)
