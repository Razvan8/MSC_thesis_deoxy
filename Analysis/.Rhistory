print(colSums(X_dummy))
###
new_colnames <- c(paste0("alcohol ", 1:36), paste0("base ", 1:3), paste0("sulfonyl-fluoride", 1:4))
colnames(X_dummy) <- new_colnames
X_dummy<-as.data.frame(X_dummy, col.names =TRUE)
for (i in 1:36) {
for (jk in 37:43) {
X_dummy[, paste0(colnames(X_dummy)[i], ':', colnames(X_dummy)[jk])] <-X_dummy[,i]*X_dummy[,jk]
}
}
for (j in c(37:39))
{for (k in c(40:43))
{
X_dummy[,paste0((colnames(X_dummy)[j]),':', colnames(X_dummy[k]) ) ] <- X_dummy[,j]*X_dummy[,k]
}
}
for (i in c(1:36))
{for (j in c(37:39))
{for (k in c(40:43))
{
X_dummy[,paste0( (colnames(X_dummy)[i]), ':' , colnames(X_dummy[j]), ":",  colnames(X_dummy[k]) ) ] <- X_dummy[,i]*X_dummy[,j]*X_dummy[,k]
}
}}
X<-as.matrix(X_dummy)
y<-y_true
################################################################ USE LASSO AND MY CLASS ON DATA #################################
l1=36
l2=3
l3=4
#print(beta_true)
range_main<-c(1: (l1+l2+l3) )
range_theta<-c( (l1+l2+l3+1) : (l1+l2+l3+l1*(l2+l3)+l2*l3) )
range_psi<-c(  (l1+l2+l3+ 1+ l1*(l2+l3)+l2*l3): (l1+l2+l3+ l1*(l2+l3)+l2*l3+l1*l2*l3) )
#y_centered<-y-mean(y)
y<-y/100 ############# only once
####START LASSO
#cross_validation_irlasso.cb( X=X, y=y, lambda_values=c( 1e-3, 6e-4, 3e-4, 1e-4, 6e-5), l1=l1,l2=l2,l3=l3, split_percentage = 0.6, k=4)
cv<-cross_validation_irlasso.cb( X=X, y=y, lambda_values=c( 1e-3, 6e-4, 3e-4, 1e-4, 6e-5), l1=l1,l2=l2,l3=l3, split_percentage = 0.6, k=4)
cv
lambda<-cv$best_lambda
lambda=3e-4 #this is the value of the cross val
res_lasso<-irlasso.cb(X=X, Y=y, lambda=lambda, w.lambda=NULL, beta0=NULL,
centering=FALSE, scaling=FALSE, intercept=T,
maxit=10, tol=0.0545, sd.tol=1e-6,
verbose=TRUE)
coefs_lasso<-array(res_lasso$beta[-1,1,1])
interc_init<-res_lasso$beta[1,1,1]
beta_main_lasso<-coefs_lasso[range_main]
beta_2way_lasso<-coefs_lasso[range_theta]
beta_3way_lasso<-coefs_lasso[range_psi]
beta_2way_lasso_without_gamma<-get_beta_vec_2way(beta_main_lasso,l1=l1,l2=l2,l3=l3,only_beta = TRUE)
beta_hat<-beta_main_lasso
gamma_hat<- beta_2way_lasso/beta_2way_lasso_without_gamma
gamma_hat[is.nan(gamma_hat)]<-0
gamma_hat[!is.finite(gamma_hat)]<-0 #this is 0 in shim case
beta_3way_lasso_without_delta<- get_beta_vec_3way(beta_2way_lasso_without_gamma*gamma_hat, l1=l1, l2=l2, l3=l3, only_beta = TRUE) #maybe better for shim init
delta_hat<- beta_3way_lasso/beta_3way_lasso_without_delta
delta_hat[!is.finite(delta_hat)]<-0
delta_hat[is.nan(delta_hat)]<-0
predict_lasso<-kappa1(X%*%array(coefs_lasso, dim=c(length(coefs_lasso),1) )  + interc_init  ) #no intercept
print(r2(y, predict_lasso))
plot(predict_lasso, y,  xlab = "Predicted Yield", ylab = "True Yield", main = "Predicted vs True Yield  ")
abline(a = 0, b = 1, col = "red")
sum(beta_main_lasso==0)/length(beta_main_lasso)
sum(beta_2way_lasso==0)/length(beta_2way_lasso)
sum(beta_3way_lasso==0)/length(beta_3way_lasso)
source(file.path(libs_path,'Shim3way_GLM.R'))
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta, lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1,
w_gamma = 1, w_delta = 1, tol=1e-2, compute_Q = Q_bern, intercept = interc_init, use_intercept = TRUE)
#fitted
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
lambda_beta<-5e-4
lambda_gamma<-1e-6
lambda_delta<-1e-4#have to run this
#delta_hat=delta_hat+rnorm(length(delta_hat))
#delta_true
source(file.path(libs_path,'Shim3way_GLM.R'))
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta, lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1,
w_gamma = 1, w_delta = 1, tol=1e-2, compute_Q = Q_bern, intercept = interc_init, use_intercept = TRUE)
#fitted
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
sum(fitted$beta_all[range_main]==0)/length(range_main)
sum(fitted$beta_all[range_theta]==0)/length(range_theta)
sum(fitted$beta_all[range_psi]==0)/length(range_psi)
source(file.path(libs_path,'Shim3way_GLM.R'))
cross_validation_irlasso.cb( X=X, y=y, lambda_values=c( 3e-4), l1=l1,l2=l2,l3=l3, split_percentage = 0.6, k=4)
cross_validation_irlasso.cb( X=X, y=y, lambda_values=c( 3e-4), l1=l1,l2=l2,l3=l3, split_percentage = 0.6, k=4)
sum(beta_main_lasso==0)/length(beta_main_lasso)
sum(beta_2way_lasso==0)/length(beta_2way_lasso)
sum(beta_3way_lasso==0)/length(beta_3way_lasso)
lambda
sum(fitted$beta_all[range_main]==0)/length(range_main)
sum(fitted$beta_all[range_theta]==0)/length(range_theta)
sum(fitted$beta_all[range_psi]==0)/length(range_psi)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta, lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1,
w_gamma = 1, w_delta = 1, tol=1e-3, compute_Q = Q_bern, intercept = interc_init, use_intercept = TRUE)
#fitted
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
sum(fitted$beta_all[range_main]==0)/length(range_main)
sum(fitted$beta_all[range_theta]==0)/length(range_theta)
sum(fitted$beta_all[range_psi]==0)/length(range_psi)
lambda_beta
lambda_gamma
beta_2way_shim_matrix<-get_theta_from_theta_vec_2way3(fitted$beta_all[range_theta],l1=l1,l2=l2, l3=l3)
beta_3way_shim_table<-get_psi_from_psi_vec3(fitted$beta_all[range_psi],l1=l1, l2=l2, l3=l3)
beta_main_shim_recovered<- get_all_beta(fitted$beta_all[range_main], l1=l1, l2=l2, l3=l3, threshold = 0)
beta_2way_shim_recovered<-  get_theta_vec_2way3( get_all_theta(beta_2way_shim_matrix, l1=l1, l2=l2, l3=l3, threshold = 0), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_shim_recovered<- get_psi_vec3( get_all_psi(beta_3way_shim_table, l1=l1, l2=l2, l3=l3, threshold = 0) , l1=l1+1, l2=l2+1, l3=l3+1)
sum(beta_main_shim_recovered==0)/length(beta_main_shim_recovered)
sum(beta_2way_shim_recovered==0)/length(beta_2way_shim_recovered)
sum(beta_3way_shim_recovered==0)/length(beta_3way_shim_recovered)
lambda_beta<-5e-4
lambda_gamma<-1e-5
lambda_delta<-1e-4#have to run this
#delta_hat=delta_hat+rnorm(length(delta_hat))
#delta_true
source(file.path(libs_path,'Shim3way_GLM.R'))
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta, lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1,
w_gamma = 1, w_delta = 1, tol=1e-2, compute_Q = Q_bern, intercept = interc_init, use_intercept = TRUE)
#fitted
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
sum(fitted$beta_all[range_main]==0)/length(range_main)
sum(fitted$beta_all[range_theta]==0)/length(range_theta)
sum(fitted$beta_all[range_psi]==0)/length(range_psi)
lambda_beta<-5e-4
lambda_gamma<-1e-4
lambda_delta<-1e-4#have to run this
#delta_hat=delta_hat+rnorm(length(delta_hat))
#delta_true
source(file.path(libs_path,'Shim3way_GLM.R'))
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta, lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1,
w_gamma = 1, w_delta = 1, tol=1e-2, compute_Q = Q_bern, intercept = interc_init, use_intercept = TRUE)
#fitted
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
sum(fitted$beta_all[range_main]==0)/length(range_main)
sum(fitted$beta_all[range_theta]==0)/length(range_theta)
sum(fitted$beta_all[range_psi]==0)/length(range_psi)
cv_good<-cross_val_pipeline( X=X, y=y, lambda=lambda, lambda_values_main=c(  5e-4),
lambda_values_2way=c(5e-4, 1e-4, 1e-6), lambda_delta=1e-4, split_percentage = 0.6, verbose=TRUE, k=4, l1=l1, l2=l2, l3=l3)
cv_good
cross_validation_irlasso.cb( X=X, y=y, lambda_values=c( 3e-4), l1=l1,l2=l2,l3=l3, split_percentage = 0.6, k=4)
sum(abs(fitted$beta_all))
sum(abs(coefs_lasso))
beta_2way_lasso_matrix<-get_theta_from_theta_vec_2way3(beta_2way_lasso,l1=l1,l2=l2, l3=l3)
beta_3way_lasso_table<-get_psi_from_psi_vec3(beta_3way_lasso,l1=l1,l2=l2, l3=l3)
##hierarchy tests
test_hierarchy_layer12(beta_main_lasso,beta_2way_lasso_matrix, strong = TRUE)
test_hierarchy_layer23(beta_2way_lasso_matrix, beta_3way_lasso_table, strong = TRUE)
beta_main_lasso_recovered<- get_all_beta(beta_main_lasso, l1=l1, l2=l2, l3=l3, threshold = 0)
beta_2way_lasso_recovered<-  get_theta_vec_2way3(  get_all_theta(beta_2way_lasso_matrix, l1=l1, l2=l2, l3=l3, threshold = 0), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_lasso_recovered<- get_psi_vec3( get_all_psi(beta_3way_lasso_table, l1=l1, l2=l2, l3=l3, threshold = 0) , l1=l1+1, l2=l2+1, l3=l3+1)
test_hierarchy_layer12(beta_main_lasso_recovered, get_theta_from_theta_vec_2way3( beta_2way_lasso_recovered, l1=l1+1, l2=l2+1, l3=l3+1 ), strong =TRUE)
test_hierarchy_layer23( get_theta_from_theta_vec_2way3( beta_2way_lasso_recovered, l1=l1+1, l2=l2+1, l3=l3+1),
get_psi_from_psi_vec3(beta_3way_lasso_recovered,l1=l1+1,l2=l2+1, l3=l3+1), strong =TRUE)
sum(beta_main_lasso_recovered==0)/length(beta_main_lasso)
sum(beta_2way_lasso_recovered==0)/length(beta_2way_lasso)
sum(beta_3way_lasso_recovred==0)/length(beta_3way_lasso)
sum(beta_main_lasso_recovered==0)/length(beta_main_lasso_recovered)
sum(beta_2way_lasso_recovered==0)/length(beta_2way_lasso_recovered)
sum(beta_3way_lasso_recovered==0)/length(beta_3way_lasso_recovered)
sum(beta_main_shim_recovered==0)/length(beta_main_shim_recovered)
sum(beta_2way_shim_recovered==0)/length(beta_2way_shim_recovered)
sum(beta_3way_shim_recovered==0)/length(beta_3way_shim_recovered)
fitted$beta_all
sort(fitted$beta_all)
order(fitted$beta_all, decreasing=TRUE)
order(abs(fitted$beta_all), decreasing=TRUE)
order(abs(fitted$beta_all), decreasing=TRUE)
order(abs(coefs_lasso), decreasing = TRUE)
sum(sign(fitted$beta_all)==sign(coefs_lasso))/length(coefs_lasso)
sign(fitted$beta_all*coefs_lasso)
min(sign(fitted$beta_all*coefs_lasso))
libs_path<-file.path("..","libs")
source(file.path(libs_path,'Shim3way_class_sc_loss.R'))
source(file.path(libs_path,'hierarchy_tests.R'))
source(file.path(libs_path,'recover_parameters.R'))
data<- create_basic_dataset()
X<- data$X
y<- data$y$obs
mean(y)
beta_true<- data$beta[-1,]
l1=8
l2=7
l3=6
#print(beta_true)
range_main<-c(1: (l1+l2+l3) )
range_theta<-c( (l1+l2+l3+1) : (l1+l2+l3+l1*(l2+l3)+l2*l3) )
range_psi<-c(  (l1+l2+l3+ 1+ l1*(l2+l3)+l2*l3): (l1+l2+l3+ l1*(l2+l3)+l2*l3+l1*l2*l3) )
beta_main<-beta_true[1:(l1+l2+l3)]
beta_2way<-beta_true[unlist(get_ranges(l1,l2,l3)[2])]
beta_3way<-beta_true[unlist(get_ranges(l1,l2,l3)[3])]
beta_2way_matrix<-get_theta_from_theta_vec_2way3(beta_2way,l1=l1,l2=l2, l3=l3)
beta_3way_table<-get_psi_from_psi_vec3(beta_3way,l1=l1,l2=l2, l3=l3)
beta_main_recovered<- get_all_beta(beta_main, l1=l1, l2=l2, l3=l3, threshold = 0)
beta_2way_recovered<-  get_theta_vec_2way3(  get_all_theta(beta_2way_matrix, l1=l1, l2=l2, l3=l3, threshold = 0), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_recovered<- get_psi_vec3( get_all_psi(beta_3way_table, l1=l1, l2=l2, l3=l3, threshold = 0) , l1=l1+1, l2=l2+1, l3=l3+1)
beta_2way_without_gamma<-get_beta_vec_2way(beta = beta_main, l1=l1, l2=l2, l3=l3, gamma=NULL, only_beta = TRUE )
beta_3way_without_gamma<-get_beta_vec_3way(beta_2way = beta_2way, l1=l1, l2=l2, l3=l3, delta = NULL, only_beta = TRUE)
gamma_true<-beta_2way/beta_2way_without_gamma
gamma_true[is.nan(gamma_true)]<-0
delta_true<-beta_3way/beta_3way_without_gamma
delta_true[is.nan(delta_true)]<-0
y_centered<-y-mean(y)
best_lambda<-0.06## cv best lambda varies a bit at different runs. SET TO 0.06 for cv or 0.16 for TPR90%!!!
lasso_model <- glmnet(X, y_centered, alpha = 1, intercept = FALSE, standardize = FALSE, lambda=best_lambda)
coefs_lasso<-coefficients(lasso_model)[-1]
beta_main_lasso<-coefs_lasso[range_main]
beta_2way_lasso<-coefs_lasso[range_theta]
beta_3way_lasso<-coefs_lasso[range_psi]
beta_2way_lasso_without_gamma<-get_beta_vec_2way(beta_main_lasso,l1=l1,l2=l2,l3=l3,only_beta = TRUE)
beta_3way_lasso_without_delta<- get_beta_vec_3way(beta_2way_lasso, l1=l1, l2=l2, l3=l3, only_beta = TRUE)
predict_lasso<-predict(lasso_model, s=best_lambda, newx = X)
print(r2(y_centered, predict_lasso))
length(c(beta_main, beta_2way, beta_3way))
######################### RESULTS LASSO #########################################################
print(" results lasso without recovered")
all_beta_functions(beta_main, beta_main_lasso)
all_beta_functions(beta_2way, beta_2way_lasso)
all_beta_functions(beta_3way, beta_3way_lasso)
##### RESULTS LASSO ON RECOVERED PARAMS ##########
beta_2way_lasso_matrix<-get_theta_from_theta_vec_2way3(beta_2way_lasso,l1=l1,l2=l2, l3=l3)
beta_3way_lasso_table<-get_psi_from_psi_vec3(beta_3way_lasso,l1=l1,l2=l2, l3=l3)
##hierarchy tests
test_hierarchy_layer12(beta_main_lasso,beta_2way_lasso_matrix, strong = TRUE)
test_hierarchy_layer23(beta_2way_lasso_matrix, beta_3way_lasso_table, strong = TRUE)
beta_main_lasso_recovered<- get_all_beta(beta_main_lasso, l1=l1, l2=l2, l3=l3, threshold = 0)
beta_2way_lasso_recovered<-  get_theta_vec_2way3(  get_all_theta(beta_2way_lasso_matrix, l1=l1, l2=l2, l3=l3, threshold = 0), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_lasso_recovered<- get_psi_vec3( get_all_psi(beta_3way_lasso_table, l1=l1, l2=l2, l3=l3, threshold = 0) , l1=l1+1, l2=l2+1, l3=l3+1)
print("results lasso recovered")
all_beta_functions(beta_main_recovered, beta_main_lasso_recovered)
all_beta_functions(beta_2way_recovered, beta_2way_lasso_recovered)
all_beta_functions(beta_3way_recovered, beta_3way_lasso_recovered)
test_hierarchy_layer12(beta_main_lasso_recovered, get_theta_from_theta_vec_2way3( beta_2way_lasso_recovered, l1=l1+1, l2=l2+1, l3=l3+1 ), strong =TRUE)
test_hierarchy_layer23( get_theta_from_theta_vec_2way3( beta_2way_lasso_recovered, l1=l1+1, l2=l2+1, l3=l3+1),
get_psi_from_psi_vec3(beta_3way_lasso_recovered,l1=l1+1,l2=l2+1, l3=l3+1), strong =TRUE)
cv_good<-cross_val_pipeline( X=X, y=y, lambda=best_lambda, lambda_values_main=c( 0.1, 0.12, 0.15),
lambda_values_2way=c(0.6), lambda_delta=1e-4, split_percentage = 0.6, verbose=TRUE, k=4, l1=l1, l2=l2, l3=l3)
libs_path<-file.path("..","libs")
source(file.path(libs_path,'Shim3way_class_sc_loss.R'))
source(file.path(libs_path,'hierarchy_tests.R'))
source(file.path(libs_path,'recover_parameters.R'))
data<- create_basic_dataset()
X<- data$X
y<- data$y$obs
mean(y)
beta_true<- data$beta[-1,]
l1=8
l2=7
l3=6
#print(beta_true)
range_main<-c(1: (l1+l2+l3) )
range_theta<-c( (l1+l2+l3+1) : (l1+l2+l3+l1*(l2+l3)+l2*l3) )
range_psi<-c(  (l1+l2+l3+ 1+ l1*(l2+l3)+l2*l3): (l1+l2+l3+ l1*(l2+l3)+l2*l3+l1*l2*l3) )
beta_main<-beta_true[1:(l1+l2+l3)]
beta_2way<-beta_true[unlist(get_ranges(l1,l2,l3)[2])]
beta_3way<-beta_true[unlist(get_ranges(l1,l2,l3)[3])]
beta_2way_matrix<-get_theta_from_theta_vec_2way3(beta_2way,l1=l1,l2=l2, l3=l3)
beta_3way_table<-get_psi_from_psi_vec3(beta_3way,l1=l1,l2=l2, l3=l3)
beta_main_recovered<- get_all_beta(beta_main, l1=l1, l2=l2, l3=l3, threshold = 0)
beta_2way_recovered<-  get_theta_vec_2way3(  get_all_theta(beta_2way_matrix, l1=l1, l2=l2, l3=l3, threshold = 0), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_recovered<- get_psi_vec3( get_all_psi(beta_3way_table, l1=l1, l2=l2, l3=l3, threshold = 0) , l1=l1+1, l2=l2+1, l3=l3+1)
beta_2way_without_gamma<-get_beta_vec_2way(beta = beta_main, l1=l1, l2=l2, l3=l3, gamma=NULL, only_beta = TRUE )
beta_3way_without_gamma<-get_beta_vec_3way(beta_2way = beta_2way, l1=l1, l2=l2, l3=l3, delta = NULL, only_beta = TRUE)
gamma_true<-beta_2way/beta_2way_without_gamma
gamma_true[is.nan(gamma_true)]<-0
delta_true<-beta_3way/beta_3way_without_gamma
delta_true[is.nan(delta_true)]<-0
y_centered<-y-mean(y)
best_lambda<-0.06## cv best lambda varies a bit at different runs. SET TO 0.06 for cv or 0.16 for TPR90%!!!
lasso_model <- glmnet(X, y_centered, alpha = 1, intercept = FALSE, standardize = FALSE, lambda=best_lambda)
coefs_lasso<-coefficients(lasso_model)[-1]
beta_main_lasso<-coefs_lasso[range_main]
beta_2way_lasso<-coefs_lasso[range_theta]
beta_3way_lasso<-coefs_lasso[range_psi]
beta_2way_lasso_without_gamma<-get_beta_vec_2way(beta_main_lasso,l1=l1,l2=l2,l3=l3,only_beta = TRUE)
beta_3way_lasso_without_delta<- get_beta_vec_3way(beta_2way_lasso, l1=l1, l2=l2, l3=l3, only_beta = TRUE)
predict_lasso<-predict(lasso_model, s=best_lambda, newx = X)
print(r2(y_centered, predict_lasso))
length(c(beta_main, beta_2way, beta_3way))
######################### RESULTS LASSO #########################################################
print(" results lasso without recovered")
all_beta_functions(beta_main, beta_main_lasso)
all_beta_functions(beta_2way, beta_2way_lasso)
all_beta_functions(beta_3way, beta_3way_lasso)
##### RESULTS LASSO ON RECOVERED PARAMS ##########
beta_2way_lasso_matrix<-get_theta_from_theta_vec_2way3(beta_2way_lasso,l1=l1,l2=l2, l3=l3)
beta_3way_lasso_table<-get_psi_from_psi_vec3(beta_3way_lasso,l1=l1,l2=l2, l3=l3)
##hierarchy tests
test_hierarchy_layer12(beta_main_lasso,beta_2way_lasso_matrix, strong = TRUE)
test_hierarchy_layer23(beta_2way_lasso_matrix, beta_3way_lasso_table, strong = TRUE)
beta_main_lasso_recovered<- get_all_beta(beta_main_lasso, l1=l1, l2=l2, l3=l3, threshold = 0)
beta_2way_lasso_recovered<-  get_theta_vec_2way3(  get_all_theta(beta_2way_lasso_matrix, l1=l1, l2=l2, l3=l3, threshold = 0), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_lasso_recovered<- get_psi_vec3( get_all_psi(beta_3way_lasso_table, l1=l1, l2=l2, l3=l3, threshold = 0) , l1=l1+1, l2=l2+1, l3=l3+1)
print("results lasso recovered")
all_beta_functions(beta_main_recovered, beta_main_lasso_recovered)
all_beta_functions(beta_2way_recovered, beta_2way_lasso_recovered)
all_beta_functions(beta_3way_recovered, beta_3way_lasso_recovered)
test_hierarchy_layer12(beta_main_lasso_recovered, get_theta_from_theta_vec_2way3( beta_2way_lasso_recovered, l1=l1+1, l2=l2+1, l3=l3+1 ), strong =TRUE)
test_hierarchy_layer23( get_theta_from_theta_vec_2way3( beta_2way_lasso_recovered, l1=l1+1, l2=l2+1, l3=l3+1),
get_psi_from_psi_vec3(beta_3way_lasso_recovered,l1=l1+1,l2=l2+1, l3=l3+1), strong =TRUE)
best_lambd
best_lambda
cv_good<-cross_val_pipeline( X=X, y=y, lambda=best_lambda, lambda_values_main=c( 0.1, 0.12, 0.15),
lambda_values_2way=c(0.6), lambda_delta=1e-4, split_percentage = 0.6, verbose=TRUE, k=4, l1=l1, l2=l2, l3=l3)
cv<-my_shim$cross_validation( X=X, y=y, lambda_values_main=c(0.12,0.08), lambda_values_2way=c( 0.8), lambda_delta=1, split_percentage = 0.6, k=3)
beta_hat<-beta_main_lasso
gamma_hat<- beta_2way_lasso/beta_2way_lasso_without_gamma
gamma_hat[is.nan(gamma_hat)]<-0
gamma_hat[!is.finite(gamma_hat)]<-0 #this is 0 in shim case
delta_hat<- beta_3way_lasso/beta_3way_lasso_without_delta
delta_hat[!is.finite(delta_hat)]<-0
delta_hat[is.nan(delta_hat)]<-0
cv<-my_shim$cross_validation( X=X, y=y, lambda_values_main=c(0.12,0.08), lambda_values_2way=c( 0.8), lambda_delta=1, split_percentage = 0.6, k=3)
cv<-my_shim$cross_validation( X=X, y=y, lambda_values_main=c(0.12,0.08), lambda_values_2way=c( 0.8), lambda_delta=1, split_percentage = 0.6, k=3)
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
cv<-my_shim$cross_validation( X=X, y=y, lambda_values_main=c(0.12,0.08), lambda_values_2way=c( 0.8), lambda_delta=1, split_percentage = 0.6, k=3)
cv_good<-cross_val_pipeline( X=X, y=y, lambda=best_lambda, lambda_values_main=c( 0.1, 0.12, 0.15),
lambda_values_2way=c(0.6), lambda_delta=1e-4, split_percentage = 0.6, verbose=TRUE, k=3, l1=l1, l2=l2, l3=l3)
cv_good<-cross_val_pipeline( X=X, y=y, lambda=best_lambda, lambda_values_main=c( 0.12, 0.15),
lambda_values_2way=c(0.6), lambda_delta=1e-4, split_percentage = 0.6, verbose=TRUE, k=3, l1=l1, l2=l2, l3=l3)
cv_good
cv_good<-cross_val_pipeline( X=X, y=y, lambda=best_lambda, lambda_values_main=c( 0.1),
lambda_values_2way=c(0.6), lambda_delta=1e-4, split_percentage = 0.6, verbose=TRUE, k=3, l1=l1, l2=l2, l3=l3)
lambda_beta<- cv_good$best_lambda1#0.2 #0.08
lambda_gamma<- cv_good$best_lambda2  #0.8 #0.8
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta,
lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1, w_gamma = 1, w_delta = 1, tol=1e-2)
lambda_beta<- cv_good$best_lambda1#0.2 #0.08
lambda_gamma<- cv_good$best_lambda2  #0.8 #0.8
lambda_delta<-1  #9 #1
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta,
lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1, w_gamma = 1, w_delta = 1, tol=1e-2)
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
beta_all_shim<-fitted$beta_all
beta_main_shim<-beta_all_shim[range_main]
beta_2way_shim<-beta_all_shim[range_theta]
beta_3way_shim<-beta_all_shim[range_psi]
all_beta_functions(beta_main, beta_main_shim)
all_beta_functions(beta_2way, beta_2way_shim)
all_beta_functions(beta_3way, beta_3way_shim)
##hierarchy tests
beta_2way_shim_matrix<-get_theta_from_theta_vec_2way3(beta_2way_shim,l1=l1,l2=l2, l3=l3)
beta_3way_shim_table<-get_psi_from_psi_vec3(beta_3way_shim,l1=l1,l2=l2, l3=l3)
test_hierarchy_layer12(beta_main_shim,beta_2way_shim_matrix, strong = TRUE)
test_hierarchy_layer23(beta_2way_shim_matrix, beta_3way_shim_table, strong = TRUE)
### SHIM FOR RECOVERED DATA #############
beta_2way_shim_matrix<-get_theta_from_theta_vec_2way3(beta_2way_shim,l1=l1,l2=l2, l3=l3)
beta_3way_shim_table<-get_psi_from_psi_vec3(beta_3way_shim,l1=l1, l2=l2, l3=l3)
beta_main_shim_recovered<- get_all_beta(beta_main_shim, l1=l1, l2=l2, l3=l3, threshold = 0)
beta_2way_shim_recovered<-  get_theta_vec_2way3( get_all_theta(beta_2way_shim_matrix, l1=l1, l2=l2, l3=l3, threshold = 0), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_shim_recovered<- get_psi_vec3( get_all_psi(beta_3way_shim_table, l1=l1, l2=l2, l3=l3, threshold = 0) , l1=l1+1, l2=l2+1, l3=l3+1)
print("results shim recovered")
all_beta_functions(beta_main_recovered, beta_main_shim_recovered)
all_beta_functions(beta_2way_recovered, beta_2way_shim_recovered)
all_beta_functions(beta_3way_recovered, beta_3way_shim_recovered)
sum(beta_main_recovered!=0)
sum(beta_2way_recovered!=0)
sum(beta_3way_recovered!=0)
test_hierarchy_layer12(beta_main_shim_recovered, get_theta_from_theta_vec_2way3( beta_2way_shim_recovered, l1=l1+1, l2=l2+1, l3=l3+1 ), strong =TRUE)
test_hierarchy_layer23( get_theta_from_theta_vec_2way3( beta_2way_shim_recovered, l1=l1+1, l2=l2+1, l3=l3+1),
get_psi_from_psi_vec3(beta_3way_shim_recovered,l1=l1+1,l2=l2+1, l3=l3+1), strong =TRUE)
libs_path<-file.path("..","libs")
source(file.path(libs_path,'Shim3way_class_sc_loss.R'))
source(file.path(libs_path,'hierarchy_tests.R'))
source(file.path(libs_path,'recover_parameters.R'))
data<- create_basic_dataset()
X<- data$X
y<- data$y$obs
mean(y)
beta_true<- data$beta[-1,]
l1=8
l2=7
l3=6
#print(beta_true)
range_main<-c(1: (l1+l2+l3) )
range_theta<-c( (l1+l2+l3+1) : (l1+l2+l3+l1*(l2+l3)+l2*l3) )
range_psi<-c(  (l1+l2+l3+ 1+ l1*(l2+l3)+l2*l3): (l1+l2+l3+ l1*(l2+l3)+l2*l3+l1*l2*l3) )
beta_main<-beta_true[1:(l1+l2+l3)]
beta_2way<-beta_true[unlist(get_ranges(l1,l2,l3)[2])]
beta_3way<-beta_true[unlist(get_ranges(l1,l2,l3)[3])]
beta_2way_matrix<-get_theta_from_theta_vec_2way3(beta_2way,l1=l1,l2=l2, l3=l3)
beta_3way_table<-get_psi_from_psi_vec3(beta_3way,l1=l1,l2=l2, l3=l3)
beta_main_recovered<- get_all_beta(beta_main, l1=l1, l2=l2, l3=l3, threshold = 0)
beta_2way_recovered<-  get_theta_vec_2way3(  get_all_theta(beta_2way_matrix, l1=l1, l2=l2, l3=l3, threshold = 0), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_recovered<- get_psi_vec3( get_all_psi(beta_3way_table, l1=l1, l2=l2, l3=l3, threshold = 0) , l1=l1+1, l2=l2+1, l3=l3+1)
beta_2way_without_gamma<-get_beta_vec_2way(beta = beta_main, l1=l1, l2=l2, l3=l3, gamma=NULL, only_beta = TRUE )
beta_3way_without_gamma<-get_beta_vec_3way(beta_2way = beta_2way, l1=l1, l2=l2, l3=l3, delta = NULL, only_beta = TRUE)
gamma_true<-beta_2way/beta_2way_without_gamma
gamma_true[is.nan(gamma_true)]<-0
delta_true<-beta_3way/beta_3way_without_gamma
delta_true[is.nan(delta_true)]<-0
y_centered<-y-mean(y)
best_lambda<-0.06## cv best lambda varies a bit at different runs. SET TO 0.06 for cv or 0.16 for TPR90%!!!
lasso_model <- glmnet(X, y_centered, alpha = 1, intercept = FALSE, standardize = FALSE, lambda=best_lambda)
coefs_lasso<-coefficients(lasso_model)[-1]
beta_main_lasso<-coefs_lasso[range_main]
beta_2way_lasso<-coefs_lasso[range_theta]
beta_3way_lasso<-coefs_lasso[range_psi]
beta_2way_lasso_without_gamma<-get_beta_vec_2way(beta_main_lasso,l1=l1,l2=l2,l3=l3,only_beta = TRUE)
beta_3way_lasso_without_delta<- get_beta_vec_3way(beta_2way_lasso, l1=l1, l2=l2, l3=l3, only_beta = TRUE)
predict_lasso<-predict(lasso_model, s=best_lambda, newx = X)
print(r2(y_centered, predict_lasso))
length(c(beta_main, beta_2way, beta_3way))
######################### RESULTS LASSO #########################################################
print(" results lasso without recovered")
all_beta_functions(beta_main, beta_main_lasso)
all_beta_functions(beta_2way, beta_2way_lasso)
all_beta_functions(beta_3way, beta_3way_lasso)
##### RESULTS LASSO ON RECOVERED PARAMS ##########
beta_2way_lasso_matrix<-get_theta_from_theta_vec_2way3(beta_2way_lasso,l1=l1,l2=l2, l3=l3)
beta_3way_lasso_table<-get_psi_from_psi_vec3(beta_3way_lasso,l1=l1,l2=l2, l3=l3)
##hierarchy tests
test_hierarchy_layer12(beta_main_lasso,beta_2way_lasso_matrix, strong = TRUE)
test_hierarchy_layer23(beta_2way_lasso_matrix, beta_3way_lasso_table, strong = TRUE)
beta_main_lasso_recovered<- get_all_beta(beta_main_lasso, l1=l1, l2=l2, l3=l3, threshold = 0)
beta_2way_lasso_recovered<-  get_theta_vec_2way3(  get_all_theta(beta_2way_lasso_matrix, l1=l1, l2=l2, l3=l3, threshold = 0), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_lasso_recovered<- get_psi_vec3( get_all_psi(beta_3way_lasso_table, l1=l1, l2=l2, l3=l3, threshold = 0) , l1=l1+1, l2=l2+1, l3=l3+1)
print("results lasso recovered")
all_beta_functions(beta_main_recovered, beta_main_lasso_recovered)
all_beta_functions(beta_2way_recovered, beta_2way_lasso_recovered)
all_beta_functions(beta_3way_recovered, beta_3way_lasso_recovered)
test_hierarchy_layer12(beta_main_lasso_recovered, get_theta_from_theta_vec_2way3( beta_2way_lasso_recovered, l1=l1+1, l2=l2+1, l3=l3+1 ), strong =TRUE)
test_hierarchy_layer23( get_theta_from_theta_vec_2way3( beta_2way_lasso_recovered, l1=l1+1, l2=l2+1, l3=l3+1),
get_psi_from_psi_vec3(beta_3way_lasso_recovered,l1=l1+1,l2=l2+1, l3=l3+1), strong =TRUE)
lambda_beta<- 0.08#0.2 #0.12
lambda_gamma<- 0.08  #0.8 #0.6
lambda_delta<-1  #9 #1
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
beta_hat<-beta_main_lasso
gamma_hat<- beta_2way_lasso/beta_2way_lasso_without_gamma
gamma_hat[is.nan(gamma_hat)]<-0
gamma_hat[!is.finite(gamma_hat)]<-0 #this is 0 in shim case
delta_hat<- beta_3way_lasso/beta_3way_lasso_without_delta
delta_hat[!is.finite(delta_hat)]<-0
delta_hat[is.nan(delta_hat)]<-0
##USE SHIM MODEL #########
lambda_beta<- 0.08#0.2 #0.12
lambda_gamma<- 0.08  #0.8 #0.6
lambda_delta<-1  #9 #1
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
lambda_beta<- 0.08#0.2 #0.12
lambda_gamma<- 0.8  #0.8 #0.6
lambda_delta<-1  #9 #1
lambda_gamma
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta,
lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1, w_gamma = 1, w_delta = 1, tol=1e-2)
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
beta_all_shim<-fitted$beta_all
beta_main_shim<-beta_all_shim[range_main]
beta_2way_shim<-beta_all_shim[range_theta]
beta_3way_shim<-beta_all_shim[range_psi]
all_beta_functions(beta_main, beta_main_shim)
all_beta_functions(beta_2way, beta_2way_shim)
all_beta_functions(beta_3way, beta_3way_shim)
##hierarchy tests
beta_2way_shim_matrix<-get_theta_from_theta_vec_2way3(beta_2way_shim,l1=l1,l2=l2, l3=l3)
beta_3way_shim_table<-get_psi_from_psi_vec3(beta_3way_shim,l1=l1,l2=l2, l3=l3)
test_hierarchy_layer12(beta_main_shim,beta_2way_shim_matrix, strong = TRUE)
test_hierarchy_layer23(beta_2way_shim_matrix, beta_3way_shim_table, strong = TRUE)
### SHIM FOR RECOVERED DATA #############
beta_2way_shim_matrix<-get_theta_from_theta_vec_2way3(beta_2way_shim,l1=l1,l2=l2, l3=l3)
beta_3way_shim_table<-get_psi_from_psi_vec3(beta_3way_shim,l1=l1, l2=l2, l3=l3)
beta_main_shim_recovered<- get_all_beta(beta_main_shim, l1=l1, l2=l2, l3=l3, threshold = 0)
beta_2way_shim_recovered<-  get_theta_vec_2way3( get_all_theta(beta_2way_shim_matrix, l1=l1, l2=l2, l3=l3, threshold = 0), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_shim_recovered<- get_psi_vec3( get_all_psi(beta_3way_shim_table, l1=l1, l2=l2, l3=l3, threshold = 0) , l1=l1+1, l2=l2+1, l3=l3+1)
print("results shim recovered")
all_beta_functions(beta_main_recovered, beta_main_shim_recovered)
all_beta_functions(beta_2way_recovered, beta_2way_shim_recovered)
all_beta_functions(beta_3way_recovered, beta_3way_shim_recovered)
sum(beta_main_recovered!=0)
sum(beta_2way_recovered!=0)
sum(beta_3way_recovered!=0)
test_hierarchy_layer12(beta_main_shim_recovered, get_theta_from_theta_vec_2way3( beta_2way_shim_recovered, l1=l1+1, l2=l2+1, l3=l3+1 ), strong =TRUE)
test_hierarchy_layer23( get_theta_from_theta_vec_2way3( beta_2way_shim_recovered, l1=l1+1, l2=l2+1, l3=l3+1),
get_psi_from_psi_vec3(beta_3way_shim_recovered,l1=l1+1,l2=l2+1, l3=l3+1), strong =TRUE)
cv_good<-cross_val_pipeline( X=X, y=y, lambda=best_lambda, lambda_values_main=c( 0.08, 0.1 ),
lambda_values_2way=c(0.8), lambda_delta=1e-4, split_percentage = 0.6, verbose=TRUE, k=3, l1=l1, l2=l2, l3=l3)
cv_good
lambda_beta<- 0.12#0.2 #0.12
lambda_gamma<- 0.6  #0.8 #0.6
lambda_delta<-1  #9 #1
lambda_beta
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta,
lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1, w_gamma = 1, w_delta = 1, tol=1e-2)
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
beta_all_shim<-fitted$beta_all
beta_main_shim<-beta_all_shim[range_main]
beta_2way_shim<-beta_all_shim[range_theta]
beta_3way_shim<-beta_all_shim[range_psi]
all_beta_functions(beta_main, beta_main_shim)
all_beta_functions(beta_2way, beta_2way_shim)
all_beta_functions(beta_3way, beta_3way_shim)
##hierarchy tests
beta_2way_shim_matrix<-get_theta_from_theta_vec_2way3(beta_2way_shim,l1=l1,l2=l2, l3=l3)
beta_3way_shim_table<-get_psi_from_psi_vec3(beta_3way_shim,l1=l1,l2=l2, l3=l3)
test_hierarchy_layer12(beta_main_shim,beta_2way_shim_matrix, strong = TRUE)
test_hierarchy_layer23(beta_2way_shim_matrix, beta_3way_shim_table, strong = TRUE)
### SHIM FOR RECOVERED DATA #############
beta_2way_shim_matrix<-get_theta_from_theta_vec_2way3(beta_2way_shim,l1=l1,l2=l2, l3=l3)
beta_3way_shim_table<-get_psi_from_psi_vec3(beta_3way_shim,l1=l1, l2=l2, l3=l3)
beta_main_shim_recovered<- get_all_beta(beta_main_shim, l1=l1, l2=l2, l3=l3, threshold = 0)
beta_2way_shim_recovered<-  get_theta_vec_2way3( get_all_theta(beta_2way_shim_matrix, l1=l1, l2=l2, l3=l3, threshold = 0), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_shim_recovered<- get_psi_vec3( get_all_psi(beta_3way_shim_table, l1=l1, l2=l2, l3=l3, threshold = 0) , l1=l1+1, l2=l2+1, l3=l3+1)
print("results shim recovered")
all_beta_functions(beta_main_recovered, beta_main_shim_recovered)
all_beta_functions(beta_2way_recovered, beta_2way_shim_recovered)
all_beta_functions(beta_3way_recovered, beta_3way_shim_recovered)
