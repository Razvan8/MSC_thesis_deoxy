matrix(matrix(c(-1, 1,nrow=1)), nrow = 40, byrow = TRUE))
print(mat)
eps1 <- rnorm(n = nrow(mat), mean = 0, sd = 1)
y1 <- 3 * mat[,1] - 3 * mat[,2] + eps1
mat <- rbind(matrix(matrix(c(1, 0), nrow=1), nrow = 40, byrow = TRUE),
matrix(matrix(c(0, 1),nrow=1), nrow = 40, byrow = TRUE),
matrix(matrix(c(-1, 1),nrow=1), nrow = 40, byrow = TRUE))
print(mat)
r1<-matrix(c(0,1), nrow = 40)
r1<-matrix(c(0,1), nrow = 40)
r1
r1<-matrix(c(0,1), nrow = 40, ncol=2)
r1
set.seed(123)
col1 <- c(rep(1, 40), rep(0, 40), rep(-1, 40))
col2 <- c(rep(0, 40), rep(1, 40), rep(-1, 40))
mat <- cbind(col1, col2)
eps1 <- rnorm(n = nrow(mat), mean = 0, sd = 1)
y1 <- 3 * mat[,1] - 3 * mat[,2] + eps1
lasso_model1 <- glmnet(mat, y1, alpha = 1, lambda = 0.1)
coefficients1 <- coef(lasso_model1)
print("Coefficients for Case 1 (y = 3 * col1 - 3 * col2 + eps(0,1)):")
print(coefficients1)
col1 <- c(rep(1, 40), rep(0, 40), rep(-1, 40))
col2 <- c(rep(0, 40), rep(1, 40), rep(-1, 40))
mat <- cbind(col1, col2)
eps1 <- rnorm(n = nrow(mat), mean = 0, sd = 2)
y1 <- 3 * mat[,1] - 3 * mat[,2] + eps1
lasso_model1 <- glmnet(mat, y1, alpha = 1, lambda = 0.1)
coefficients1 <- coef(lasso_model1)
print("Coefficients for Case 1 (y = 3 * col1 - 3 * col2 + eps(0,1)):")
print(coefficients1)
eps2 <- rnorm(n = nrow(mat), mean = 0, sd = 1)
y2 <- 3 * mat[,1] + 0 * mat[,2] + eps2
lasso_model2 <- glmnet(mat, y2, alpha = 1, lambda = 0.1)
coefficients2 <- coef(lasso_model2)
print("Coefficients for Case 2 (y = 3 * col1 + 0 * col2 + eps(0,1)):")
print(coefficients2)
col1 <- c(rep(1, 40), rep(0, 40), rep(-1, 40))
col2 <- c(rep(0, 40), rep(1, 40), rep(-1, 40))
mat <- cbind(col1, col2)
eps1 <- rnorm(n = nrow(mat), mean = 0, sd = 2)
y1 <- 3 * mat[,1] - 3 * mat[,2] + eps1
lasso_model1 <- glmnet(mat, y1, alpha = 1, lambda = 0.5)
coefficients1 <- coef(lasso_model1)
print("Coefficients for Case 1 (y = 3 * col1 - 3 * col2 + eps(0,1)):")
print(coefficients1)
eps2 <- rnorm(n = nrow(mat), mean = 0, sd = 1)
y2 <- 3 * mat[,1] + 0 * mat[,2] + eps2
lasso_model2 <- glmnet(mat, y2, alpha = 1, lambda = 0.5)
coefficients2 <- coef(lasso_model2)
print("Coefficients for Case 2 (y = 3 * col1 + 0 * col2 + eps(0,1)):")
print(coefficients2)
col1 <- c(rep(1, 40), rep(0, 40), rep(-1, 40))
col2 <- c(rep(0, 40), rep(1, 40), rep(-1, 40))
mat <- cbind(col1, col2)
eps1 <- rnorm(n = nrow(mat), mean = 0, sd = 2)
y1 <- 3 * mat[,1] - 3 * mat[,2] + eps1
lasso_model1 <- glmnet(mat, y1, alpha = 1, lambda = 0.5)
coefficients1 <- coef(lasso_model1)
print("Coefficients for Case 1 (y = 3 * col1 - 3 * col2 + eps(0,1)):")
print(coefficients1)
eps2 <- rnorm(n = nrow(mat), mean = 0, sd = 1)
y2 <- 3 * mat[,1] + 0 * mat[,2] + eps2
lasso_model2 <- glmnet(mat, y2, alpha = 1, lambda = 0.5)
coefficients2 <- coef(lasso_model2)
print("Coefficients for Case 2 (y = 3 * col1 + 0 * col2 + eps(0,1)):")
print(coefficients2)
col1 <- c(rep(1, 40), rep(0, 40), rep(-1, 40))
col2 <- c(rep(0, 40), rep(1, 40), rep(-1, 40))
mat <- cbind(col1, col2)
eps1 <- rnorm(n = nrow(mat), mean = 0, sd = 2)
y1 <- 3 * mat[,1] - 3 * mat[,2] + eps1
lasso_model1 <- glmnet(mat, y1, alpha = 1, lambda = 0.5)
coefficients1 <- coef(lasso_model1)
print("Coefficients for Case 1 (y = 3 * col1 - 3 * col2 + eps(0,1)):")
print(coefficients1)
eps2 <- rnorm(n = nrow(mat), mean = 0, sd = 1)
y2 <- 3 * mat[,1] + 0 * mat[,2] + eps2
lasso_model2 <- glmnet(mat, y2, alpha = 1, lambda = 0.5)
coefficients2 <- coef(lasso_model2)
print("Coefficients for Case 2 (y = 3 * col1 + 0 * col2 + eps(0,1)):")
print(coefficients2)
print("Coefficients for Case 1 (y = 3 * col1 - 3 * col2 + eps(0,1)):")
print(coefficients1)
g.link <- function(x) {
tt <- apply(as.matrix(x), 1, FUN = function(v) min(max(v, 0.001), 0.999))
g <- 3.5 * tan(pi * (2 * tt - 1) / 2)
return(g)
}
# Generate the data
x <- seq(0, 1, length.out = 100)
y <- g.link(x)
# Load necessary library
library(ggplot2)
# Create the plot
ggplot(data.frame(x, y), aes(x, y)) +
geom_line() +
ggtitle("Link function") +
theme(plot.title = element_text(face = "bold",
hjust = 0.5,
background = element_rect(fill = "grey80", color = "black")),
plot.background = element_rect(fill = "grey80"),
panel.background = element_rect(fill = "grey80"),
panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white")) +
labs(x = "Expected Yield", y = "Systematic Component")
# Create the plot
ggplot(data.frame(x, y), aes(x, y)) +
geom_line() +
ggtitle("Link function") +
theme(plot.title = element_text(face = "bold",
hjust = 0.5),
plot.background = element_rect(fill = "grey80"),
panel.background = element_rect(fill = "grey80"),
panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white")) +
labs(x = "Expected Yield", y = "Systematic Component")
plot(x, y, type = "l", col = "blue",
main = "Link function",
xlab = "Expected Yield", ylab = "Systematic Component")
# Create the plot
ggplot(data.frame(x, y), aes(x, y)) +
geom_line() +
ggtitle("Link function") +
theme(plot.title = element_text(face = "bold",
hjust = 0.5),
plot.background = element_rect(fill = "grey80"),
panel.background = element_rect(fill = "grey80"),
panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white")) +
labs(x = "Expected Yield", y = "Systematic Component")
# Generate the data
x <- seq(0, 1, length.out = 1000)
y <- g.link(x)
# Load necessary library
library(ggplot2)
# Create the plot
ggplot(data.frame(x, y), aes(x, y)) +
geom_line() +
ggtitle("Link function") +
theme(plot.title = element_text(face = "bold",
hjust = 0.5),
plot.background = element_rect(fill = "grey80"),
panel.background = element_rect(fill = "grey80"),
panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white")) +
labs(x = "Expected Yield", y = "Systematic Component")
x <- seq(0.1, 0.9, length.out = 1000)
y <- g.link(x)
# Load necessary library
library(ggplot2)
# Create the plot
ggplot(data.frame(x, y), aes(x, y)) +
geom_line() +
ggtitle("Link function") +
theme(plot.title = element_text(face = "bold",
hjust = 0.5),
plot.background = element_rect(fill = "grey80"),
panel.background = element_rect(fill = "grey80"),
panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white")) +
labs(x = "Expected Yield", y = "Systematic Component")
# Define the function
g.link <- function(x) {
tt <- apply(as.matrix(x), 1, FUN = function(v) min(max(v, 0.001), 0.999))
g <- 3.5 * tan(pi * (2 * tt - 1) / 2)
return(g)
}
# Generate the data
x <- seq(0, 1, length.out = 100)
y <- g.link(x)
# Basic plot
plot(x, y, type = "l", col = "blue",
main = "Link function",
xlab = "Expected Yield", ylab = "Systematic Component")
# Generate the data
x <- seq(0.05, 0.95, length.out = 100)
y <- g.link(x)
# Basic plot
plot(x, y, type = "l", col = "blue",
main = "Link function",
xlab = "Expected Yield", ylab = "Systematic Component")
x <- seq(0.1, 0.9, length.out = 100)
y <- g.link(x)
# Basic plot
plot(x, y, type = "l", col = "blue",
main = "Link function",
xlab = "Expected Yield", ylab = "Systematic Component")
x <- seq(0.07, 0.93, length.out = 100)
y <- g.link(x)
# Basic plot
plot(x, y, type = "l", col = "blue",
main = "Link function",
xlab = "Expected Yield", ylab = "Systematic Component")
x <- seq(0.05, 0.95, length.out = 100)
y <- g.link(x)
# Basic plot
plot(x, y, type = "l", col = "blue",
main = "Link function",
xlab = "Expected Yield", ylab = "Systematic Component")
x <- seq(0.07, 0.93, length.out = 100)
y <- g.link(x)
# Basic plot
plot(x, y, type = "l", col = "blue",
main = "Link function",
xlab = "Expected Yield", ylab = "Systematic Component")
x <- seq(0.06, 0.94, length.out = 100)
y <- g.link(x)
# Basic plot
plot(x, y, type = "l", col = "blue",
main = "Link function",
xlab = "Expected Yield", ylab = "Systematic Component")
# Generate the data
x <- seq(0.07, .93, length.out = 100)
y <- g.link(x)
# Basic plot with title
plot(x, y, type = "l", col = "blue",
main = "Link function",
xlab = "Expected Yield", ylab = "Systematic Component")
# Generate the data
x <- seq(0.07, 0.93, length.out = 100)
y <- g.link(x)
data <- data.frame(x, y)
# Create the plot using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component")
# Define the function
g.link <- function(x) {
tt <- apply(as.matrix(x), 1, FUN = function(v) min(max(v, 0.001), 0.999))
g <- 3.5 * tan(pi * (2 * tt - 1) / 2)
return(g)
}
# Generate the data
x <- seq(0.07, 0.93, length.out = 100)
y <- g.link(x)
data <- data.frame(x, y)
# Create the plot using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component") +
theme(
plot.title = element_text(hjust = 0.5,
face = "bold",
color = "black",
background = element_rect(fill = "grey", color = "black", size = 0.5))
library(ggplot2)
library(ggplot2)
# Define the function
g.link <- function(x) {
tt <- apply(as.matrix(x), 1, FUN = function(v) min(max(v, 0.001), 0.999))
g <- 3.5 * tan(pi * (2 * tt - 1) / 2)
return(g)
}
# Generate the data
x <- seq(0.07, 0.93, length.out = 100)
y <- g.link(x)
data <- data.frame(x, y)
# Create the plot using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component") +
theme(
plot.title = element_text(hjust = 0.5,
face = "bold",
color = "black",
background = element_rect(fill = "grey", color = "black", size = 0.5))
)
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
annotate("rect", xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf,
fill = "grey", color = "black", alpha = 0.2) +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", color = "black", size = 14),
plot.title.position = "plot"
)
# Create the plot using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component") +
theme(
plot.title = element_text(hjust = 0.5,
face = "bold",
color = "black",
background = element_rect(fill = "grey", color = "black", size = 0.5))
)
# Create the plot using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component")
# Load necessary libraries
library(ggplot2)
library(grid)
# Define the element_textbox function
element_textbox <- function(...) {
el <- element_text(...)
class(el) <- c("element_textbox", class(el))
el
}
element_grob.element_textbox <- function(element, ...) {
text_grob <- NextMethod()
rect_grob <- element_grob(calc_element("strip.background", theme_bw()))
ggplot2:::absoluteGrob(
grid::gList(
rect_grob,
text_grob
),
height = grid::grobHeight(text_grob),
width = grid::unit(1, "npc")
)
}
# Define the function
g.link <- function(x) {
tt <- apply(as.matrix(x), 1, FUN = function(v) min(max(v, 0.001), 0.999))
g <- 3.5 * tan(pi * (2 * tt - 1) / 2)
return(g)
}
# Generate the data
x <- seq(0.07, 0.93, length.out = 100)
y <- g.link(x)
data <- data.frame(x, y)
# Create the plot using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component") +
theme(
plot.title = element_textbox(hjust = 0.5, face = "bold", color = "black",
background = element_rect(fill = "grey", color = "black", size = 0.5)),
plot.title.position = "plot"
)
# Create the plot using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component")
data$title<-"Link function"
# Create the plot using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component")+
geom_bar() + theme_bw() +
facet_grid(. ~ title)
data$title<-"Link function"
# Create the plot using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component")+
facet_grid(. ~ title)
data$title<-"Link function"
# Create the plot using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component")+
theme(text = element_text(size = 40)) +
theme(plot.title = element_textbox(hjust = 0.5, margin = margin(t = 5, b = 5)))
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component")+
theme(text = element_text(size = 5)) +
theme(plot.title = element_textbox(hjust = 0.5, margin = margin(t = 5, b = 5)))
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component")+
theme(text = element_text(size = 15)) +
theme(plot.title = element_textbox(hjust = 0.5, margin = margin(t = 5, b = 5)))
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component")+
theme(text = element_text(size = 12)) +
theme(plot.title = element_textbox(hjust = 0.5, margin = margin(t = 5, b = 5)))
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component")+
theme(text = element_text(size = 15)) +
theme(plot.title = element_textbox(hjust = 0.5, margin = margin(t = 5, b = 5)))
# Generate the data
x <- seq(0.07, 0.93, length.out = 1000)
y <- g.link(x)
data <- data.frame(x, y)
element_textbox <- function(...) {
el <- element_text(...)
class(el) <- c("element_textbox", class(el))
el
}
data$title<-"Link function"
# Create the plot using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component")+
theme(text = element_text(size = 12)) +
theme(plot.title = element_textbox(hjust = 0.5, margin = margin(t = 5, b = 5)))
# Create the plot using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component")+
theme(aspect.ratio1)
# Create the plot using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component")+
theme(aspect.ratio=1)
theme(text = element_text(size = 12)) +
theme(plot.title = element_textbox(hjust = 0.5, margin = margin(t = 5, b = 5)))
# Create the plot using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component")+
theme(aspect.ratio=1)+
theme(text = element_text(size = 12)) +
theme(plot.title = element_textbox(hjust = 0.5, margin = margin(t = 5, b = 5)))
# Generate the data
x <- seq(0.05, 0.95, length.out = 1000)
y <- g.link(x)
data <- data.frame(x, y)
element_textbox <- function(...) {
el <- element_text(...)
class(el) <- c("element_textbox", class(el))
el
}
# Create the plot using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component")+
theme(aspect.ratio=1)+
theme(text = element_text(size = 12)) +
theme(plot.title = element_textbox(hjust = 0.5, margin = margin(t = 5, b = 5)))
x <- seq(0.1, 0.9, length.out = 1000)
y <- g.link(x)
data <- data.frame(x, y)
element_textbox <- function(...) {
el <- element_text(...)
class(el) <- c("element_textbox", class(el))
el
}
# Create the plot using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component")+
theme(aspect.ratio=1)+
theme(text = element_text(size = 12)) +
theme(plot.title = element_textbox(hjust = 0.5, margin = margin(t = 5, b = 5)))
# Generate the data
x <- seq(0.07, 0.93, length.out = 1000)
y <- g.link(x)
data <- data.frame(x, y)
element_textbox <- function(...) {
el <- element_text(...)
class(el) <- c("element_textbox", class(el))
el
}
# Create the plot using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component")+
theme(aspect.ratio=1)+
theme(text = element_text(size = 12)) +
theme(plot.title = element_textbox(hjust = 0.5, margin = margin(t = 5, b = 5)))
# Create the plot using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
ggtitle("Link function") +
xlab("Expected Yield") +
ylab("Systematic Component")+
scale_x_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1), limits = c(0, 1)) +
theme(aspect.ratio=1)+
theme(text = element_text(size = 12)) +
theme(plot.title = element_textbox(hjust = 0.5, margin = margin(t = 5, b = 5)))
